put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://fullscreen.spec.whatwg.org",timestamp:1512968949381,contents:"partial interface Element {\u000a  Promise<void> requestFullscreen();\u000a\u000a  attribute EventHandler onfullscreenchange;\u000a  attribute EventHandler onfullscreenerror;\u000a};\u000a\u000apartial interface Document {\u000a  [LenientSetter] readonly attribute boolean fullscreenEnabled;\u000a  [LenientSetter, Unscopable] readonly attribute boolean fullscreen; // historical\u000a\u000a  Promise<void> exitFullscreen();\u000a\u000a  attribute EventHandler onfullscreenchange;\u000a  attribute EventHandler onfullscreenerror;\u000a};\u000a\u000apartial interface DocumentOrShadowRoot {\u000a  [LenientSetter] readonly attribute Element? fullscreenElement;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://compat.spec.whatwg.org",timestamp:1512968950571,contents:"partial interface Window {\u000a    readonly attribute short orientation;\u000a    attribute EventHandler onorientationchange;\u000a};\u000a\u000apartial interface HTMLBodyElement {\u000a    attribute EventHandler onorientationchange;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://console.spec.whatwg.org",timestamp:1512968952025,contents:"[Exposed=(Window,Worker,Worklet)]\u000anamespace console { // but see namespace object requirements below\u000a  // Logging\u000a  void assert(optional boolean condition = false, any... data);\u000a  void clear();\u000a  void count(optional DOMString label = \"default\");\u000a  void debug(any... data);\u000a  void error(any... data);\u000a  void info(any... data);\u000a  void log(any... data);\u000a  void table(any tabularData, optional sequence<DOMString> properties);\u000a  void trace(any... data);\u000a  void warn(any... data);\u000a  void dir(any item, optional object? options);\u000a  void dirxml(any... data);\u000a\u000a  // Grouping\u000a  void group(any... data);\u000a  void groupCollapsed(any... data);\u000a  void groupEnd();\u000a\u000a  // Timing\u000a  void time(optional DOMString label = \"default\");\u000a  void timeEnd(optional DOMString label = \"default\");\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://notifications.spec.whatwg.org",timestamp:1512968953316,contents:"[Constructor(DOMString title, optional NotificationOptions options),\u000a Exposed=(Window,Worker)]\u000ainterface Notification : EventTarget {\u000a  static readonly attribute NotificationPermission permission;\u000a  [Exposed=Window] static Promise<NotificationPermission> requestPermission(optional NotificationPermissionCallback deprecatedCallback);\u000a\u000a  static readonly attribute unsigned long maxActions;\u000a\u000a  attribute EventHandler onclick;\u000a  attribute EventHandler onerror;\u000a\u000a  readonly attribute DOMString title;\u000a  readonly attribute NotificationDirection dir;\u000a  readonly attribute DOMString lang;\u000a  readonly attribute DOMString body;\u000a  readonly attribute DOMString tag;\u000a  readonly attribute USVString image;\u000a  readonly attribute USVString icon;\u000a  readonly attribute USVString badge;\u000a  readonly attribute USVString sound;\u000a  [SameObject] readonly attribute FrozenArray<unsigned long> vibrate;\u000a  readonly attribute DOMTimeStamp timestamp;\u000a  readonly attribute boolean renotify;\u000a  readonly attribute boolean silent;\u000a  readonly attribute boolean requireInteraction;\u000a  [SameObject] readonly attribute any data;\u000a  [SameObject] readonly attribute FrozenArray<NotificationAction> actions;\u000a\u000a  void close();\u000a};\u000a\u000adictionary NotificationOptions {\u000a  NotificationDirection dir = \"auto\";\u000a  DOMString lang = \"\";\u000a  DOMString body = \"\";\u000a  DOMString tag = \"\";\u000a  USVString image;\u000a  USVString icon;\u000a  USVString badge;\u000a  USVString sound;\u000a  VibratePattern vibrate;\u000a  DOMTimeStamp timestamp;\u000a  boolean renotify = false;\u000a  boolean silent = false;\u000a  boolean requireInteraction = false;\u000a  any data = null;\u000a  sequence<NotificationAction> actions = [];\u000a};\u000a\u000aenum NotificationPermission {\u000a  \"default\",\u000a  \"denied\",\u000a  \"granted\"\u000a};\u000a\u000aenum NotificationDirection {\u000a  \"auto\",\u000a  \"ltr\",\u000a  \"rtl\"\u000a};\u000a\u000adictionary NotificationAction {\u000a  required DOMString action;\u000a  required DOMString title;\u000a  USVString icon;\u000a};\u000a\u000acallback NotificationPermissionCallback = void (NotificationPermission permission);\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://notifications.spec.whatwg.org",timestamp:1512968953316,contents:"dictionary GetNotificationOptions {\u000a  DOMString tag = \"\";\u000a};\u000a\u000apartial interface ServiceWorkerRegistration {\u000a  Promise<void> showNotification(DOMString title, optional NotificationOptions options);\u000a  Promise<sequence<Notification>> getNotifications(optional GetNotificationOptions filter);\u000a};\u000a\u000a[Constructor(DOMString type, NotificationEventInit eventInitDict),\u000a Exposed=ServiceWorker]\u000ainterface NotificationEvent : ExtendableEvent {\u000a  readonly attribute Notification notification;\u000a  readonly attribute DOMString action;\u000a};\u000a\u000adictionary NotificationEventInit : ExtendableEventInit {\u000a  required Notification notification;\u000a  DOMString action = \"\";\u000a};\u000a\u000apartial interface ServiceWorkerGlobalScope {\u000a  attribute EventHandler onnotificationclick;\u000a  attribute EventHandler onnotificationclose;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://storage.spec.whatwg.org",timestamp:1512968955380,contents:"[SecureContext,\u000a NoInterfaceObject,\u000a Exposed=(Window,Worker)]\u000ainterface NavigatorStorage {\u000a  readonly attribute StorageManager storage;\u000a};\u000aNavigator implements NavigatorStorage;\u000aWorkerNavigator implements NavigatorStorage;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://storage.spec.whatwg.org",timestamp:1512968955380,contents:"[SecureContext,\u000a Exposed=(Window,Worker)]\u000ainterface StorageManager {\u000a  Promise<boolean> persisted();\u000a  [Exposed=Window] Promise<boolean> persist();\u000a\u000a  Promise<StorageEstimate> estimate();\u000a};\u000a\u000adictionary StorageEstimate {\u000a  unsigned long long usage;\u000a  unsigned long long quota;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://encoding.spec.whatwg.org",timestamp:1512968956068,contents:"dictionary TextDecoderOptions {\u000a  boolean fatal = false;\u000a  boolean ignoreBOM = false;\u000a};\u000a\u000adictionary TextDecodeOptions {\u000a  boolean stream = false;\u000a};\u000a\u000a[Constructor(optional DOMString label = \"utf-8\", optional TextDecoderOptions options),\u000a Exposed=(Window,Worker)]\u000ainterface TextDecoder {\u000a  readonly attribute DOMString encoding;\u000a  readonly attribute boolean fatal;\u000a  readonly attribute boolean ignoreBOM;\u000a  USVString decode(optional BufferSource input, optional TextDecodeOptions options);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://encoding.spec.whatwg.org",timestamp:1512968956068,contents:"[Constructor,\u000a Exposed=(Window,Worker)]\u000ainterface TextEncoder {\u000a  readonly attribute DOMString encoding;\u000a  [NewObject] Uint8Array encode(optional USVString input = \"\");\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://xhr.spec.whatwg.org",timestamp:1512968959746,contents:"[Exposed=(Window,DedicatedWorker,SharedWorker)]\u000ainterface XMLHttpRequestEventTarget : EventTarget {\u000a  // event handlers\u000a  attribute EventHandler onloadstart;\u000a  attribute EventHandler onprogress;\u000a  attribute EventHandler onabort;\u000a  attribute EventHandler onerror;\u000a  attribute EventHandler onload;\u000a  attribute EventHandler ontimeout;\u000a  attribute EventHandler onloadend;\u000a};\u000a\u000a[Exposed=(Window,DedicatedWorker,SharedWorker)]\u000ainterface XMLHttpRequestUpload : XMLHttpRequestEventTarget {\u000a};\u000a\u000aenum XMLHttpRequestResponseType {\u000a  \"\",\u000a  \"arraybuffer\",\u000a  \"blob\",\u000a  \"document\",\u000a  \"json\",\u000a  \"text\"\u000a};\u000a\u000a[Constructor,\u000a Exposed=(Window,DedicatedWorker,SharedWorker)]\u000ainterface XMLHttpRequest : XMLHttpRequestEventTarget {\u000a  // event handler\u000a  attribute EventHandler onreadystatechange;\u000a\u000a  // states\u000a  const unsigned short UNSENT = 0;\u000a  const unsigned short OPENED = 1;\u000a  const unsigned short HEADERS_RECEIVED = 2;\u000a  const unsigned short LOADING = 3;\u000a  const unsigned short DONE = 4;\u000a  readonly attribute unsigned short readyState;\u000a\u000a  // request\u000a  void open(ByteString method, USVString url);\u000a  void open(ByteString method, USVString url, boolean async, optional USVString? username = null, optional USVString? password = null);\u000a  void setRequestHeader(ByteString name, ByteString value);\u000a           attribute unsigned long timeout;\u000a           attribute boolean withCredentials;\u000a  [SameObject] readonly attribute XMLHttpRequestUpload upload;\u000a  void send(optional (Document or BodyInit)? body = null);\u000a  void abort();\u000a\u000a  // response\u000a  readonly attribute USVString responseURL;\u000a  readonly attribute unsigned short status;\u000a  readonly attribute ByteString statusText;\u000a  ByteString? getResponseHeader(ByteString name);\u000a  ByteString getAllResponseHeaders();\u000a  void overrideMimeType(DOMString mime);\u000a           attribute XMLHttpRequestResponseType responseType;\u000a  readonly attribute any response;\u000a  readonly attribute USVString responseText;\u000a  [Exposed=Window] readonly attribute Document? responseXML;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://xhr.spec.whatwg.org",timestamp:1512968959746,contents:"typedef (File or USVString) FormDataEntryValue;\u000a\u000a[Constructor(optional HTMLFormElement form),\u000a Exposed=(Window,Worker)]\u000ainterface FormData {\u000a  void append(USVString name, USVString value);\u000a  void append(USVString name, Blob blobValue, optional USVString filename);\u000a  void delete(USVString name);\u000a  FormDataEntryValue? get(USVString name);\u000a  sequence<FormDataEntryValue> getAll(USVString name);\u000a  boolean has(USVString name);\u000a  void set(USVString name, USVString value);\u000a  void set(USVString name, Blob blobValue, optional USVString filename);\u000a  iterable<USVString, FormDataEntryValue>;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://xhr.spec.whatwg.org",timestamp:1512968959746,contents:"[Constructor(DOMString type, optional ProgressEventInit eventInitDict),\u000a Exposed=(Window,DedicatedWorker,SharedWorker)]\u000ainterface ProgressEvent : Event {\u000a  readonly attribute boolean lengthComputable;\u000a  readonly attribute unsigned long long loaded;\u000a  readonly attribute unsigned long long total;\u000a};\u000a\u000adictionary ProgressEventInit : EventInit {\u000a  boolean lengthComputable = false;\u000a  unsigned long long loaded = 0;\u000a  unsigned long long total = 0;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://url.spec.whatwg.org",timestamp:1512968962692,contents:"[Constructor(USVString url, optional USVString base),\u000a Exposed=(Window,Worker),\u000a LegacyWindowAlias=webkitURL]\u000ainterface URL {\u000a  stringifier attribute USVString href;\u000a  readonly attribute USVString origin;\u000a           attribute USVString protocol;\u000a           attribute USVString username;\u000a           attribute USVString password;\u000a           attribute USVString host;\u000a           attribute USVString hostname;\u000a           attribute USVString port;\u000a           attribute USVString pathname;\u000a           attribute USVString search;\u000a  [SameObject] readonly attribute URLSearchParams searchParams;\u000a           attribute USVString hash;\u000a\u000a  USVString toJSON();\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://url.spec.whatwg.org",timestamp:1512968962692,contents:"[Constructor(optional (sequence<sequence<USVString>> or record<USVString, USVString> or USVString) init = \"\"),\u000a Exposed=(Window,Worker)]\u000ainterface URLSearchParams {\u000a  void append(USVString name, USVString value);\u000a  void delete(USVString name);\u000a  USVString? get(USVString name);\u000a  sequence<USVString> getAll(USVString name);\u000a  boolean has(USVString name);\u000a  void set(USVString name, USVString value);\u000a\u000a  void sort();\u000a\u000a  iterable<USVString, USVString>;\u000a  stringifier;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://fetch.spec.whatwg.org",timestamp:1512968966338,contents:"typedef (sequence<sequence<ByteString>> or record<ByteString, ByteString>) HeadersInit;\u000a\u000a[Constructor(optional HeadersInit init),\u000a Exposed=(Window,Worker)]\u000ainterface Headers {\u000a  void append(ByteString name, ByteString value);\u000a  void delete(ByteString name);\u000a  ByteString? get(ByteString name);\u000a  boolean has(ByteString name);\u000a  void set(ByteString name, ByteString value);\u000a  iterable<ByteString, ByteString>;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://fetch.spec.whatwg.org",timestamp:1512968966338,contents:"typedef (Blob or BufferSource or FormData or URLSearchParams or ReadableStream or USVString) BodyInit;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://fetch.spec.whatwg.org",timestamp:1512968966338,contents:"[NoInterfaceObject, Exposed=(Window,Worker)]\u000ainterface Body {\u000a  readonly attribute ReadableStream? body;\u000a  readonly attribute boolean bodyUsed;\u000a  [NewObject] Promise<ArrayBuffer> arrayBuffer();\u000a  [NewObject] Promise<Blob> blob();\u000a  [NewObject] Promise<FormData> formData();\u000a  [NewObject] Promise<any> json();\u000a  [NewObject] Promise<USVString> text();\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://fetch.spec.whatwg.org",timestamp:1512968966338,contents:"typedef (Request or USVString) RequestInfo;\u000a\u000a[Constructor(RequestInfo input, optional RequestInit init),\u000a Exposed=(Window,Worker)]\u000ainterface Request {\u000a  readonly attribute ByteString method;\u000a  readonly attribute USVString url;\u000a  [SameObject] readonly attribute Headers headers;\u000a\u000a  readonly attribute RequestDestination destination;\u000a  readonly attribute USVString referrer;\u000a  readonly attribute ReferrerPolicy referrerPolicy;\u000a  readonly attribute RequestMode mode;\u000a  readonly attribute RequestCredentials credentials;\u000a  readonly attribute RequestCache cache;\u000a  readonly attribute RequestRedirect redirect;\u000a  readonly attribute DOMString integrity;\u000a  readonly attribute boolean keepalive;\u000a  readonly attribute AbortSignal signal;\u000a\u000a  [NewObject] Request clone();\u000a};\u000aRequest implements Body;\u000adictionary RequestInit {\u000a  ByteString method;\u000a  HeadersInit headers;\u000a  BodyInit? body;\u000a  USVString referrer;\u000a  ReferrerPolicy referrerPolicy;\u000a  RequestMode mode;\u000a  RequestCredentials credentials;\u000a  RequestCache cache;\u000a  RequestRedirect redirect;\u000a  DOMString integrity;\u000a  boolean keepalive;\u000a  AbortSignal? signal;\u000a  any window; // can only be set to null\u000a};\u000a\u000aenum RequestDestination { \"\", \"audio\", \"audioworklet\", \"document\", \"embed\", \"font\", \"image\", \"manifest\", \"object\", \"paintworklet\", \"report\", \"script\", \"sharedworker\", \"style\",  \"track\", \"video\", \"worker\", \"xslt\" };\u000aenum RequestMode { \"navigate\", \"same-origin\", \"no-cors\", \"cors\" };\u000aenum RequestCredentials { \"omit\", \"same-origin\", \"include\" };\u000aenum RequestCache { \"default\", \"no-store\", \"reload\", \"no-cache\", \"force-cache\", \"only-if-cached\" };\u000aenum RequestRedirect { \"follow\", \"error\", \"manual\" };"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://fetch.spec.whatwg.org",timestamp:1512968966338,contents:"[Constructor(optional BodyInit? body = null, optional ResponseInit init), Exposed=(Window,Worker)]\u000ainterface Response {\u000a  [NewObject] static Response error();\u000a  [NewObject] static Response redirect(USVString url, optional unsigned short status = 302);\u000a\u000a  readonly attribute ResponseType type;\u000a\u000a  readonly attribute USVString url;\u000a  readonly attribute boolean redirected;\u000a  readonly attribute unsigned short status;\u000a  readonly attribute boolean ok;\u000a  readonly attribute ByteString statusText;\u000a  [SameObject] readonly attribute Headers headers;\u000a  readonly attribute Promise<Headers> trailer;\u000a\u000a  [NewObject] Response clone();\u000a};\u000aResponse implements Body;\u000a\u000adictionary ResponseInit {\u000a  unsigned short status = 200;\u000a  ByteString statusText = \"OK\";\u000a  HeadersInit headers;\u000a};\u000a\u000aenum ResponseType { \"basic\", \"cors\", \"default\", \"error\", \"opaque\", \"opaqueredirect\" };"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://fetch.spec.whatwg.org",timestamp:1512968966338,contents:"partial interface WindowOrWorkerGlobalScope {\u000a  [NewObject] Promise<Response> fetch(RequestInfo input, optional RequestInit init);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/pointerevents/extension.html",timestamp:1512968975660,contents:"\u000apartial dictionary PointerEventInit {\u000a    sequence<PointerEvent> coalescedEvents = [];\u000a};\u000a\u000apartial interface PointerEvent {\u000a    sequence<PointerEvent> getCoalescedEvents();\u000a};\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/deviceorientation/spec-source-orientation.html",timestamp:1512968975867,contents:"\u000a    partial interface Window {\u000a      attribute EventHandler ondeviceorientation;\u000a    };\u000a\u000a    [Constructor(DOMString type, optional DeviceOrientationEventInit eventInitDict), Exposed=Window]\u000a    interface DeviceOrientationEvent : Event {\u000a      readonly attribute double? alpha;\u000a      readonly attribute double? beta;\u000a      readonly attribute double? gamma;\u000a      readonly attribute boolean absolute;\u000a    };\u000a\u000a    dictionary DeviceOrientationEventInit : EventInit {\u000a      double? alpha = null;\u000a      double? beta = null;\u000a      double? gamma = null;\u000a      boolean absolute = false;\u000a    };\u000a  "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/deviceorientation/spec-source-orientation.html",timestamp:1512968975867,contents:"\u000a    partial interface Window {\u000a      attribute EventHandler ondevicemotion;\u000a    };\u000a\u000a    [NoInterfaceObject]\u000a    interface DeviceAcceleration {\u000a      readonly attribute double? x;\u000a      readonly attribute double? y;\u000a      readonly attribute double? z;\u000a    };\u000a\u000a    [NoInterfaceObject]\u000a    interface DeviceRotationRate {\u000a      readonly attribute double? alpha;\u000a      readonly attribute double? beta;\u000a      readonly attribute double? gamma;\u000a    };\u000a\u000a    [Constructor(DOMString type, optional DeviceMotionEventInit eventInitDict), Exposed=Window]\u000a    interface DeviceMotionEvent : Event {\u000a      readonly attribute DeviceAcceleration? acceleration;\u000a      readonly attribute DeviceAcceleration? accelerationIncludingGravity;\u000a      readonly attribute DeviceRotationRate? rotationRate;\u000a      readonly attribute double interval;\u000a    };\u000a\u000a    dictionary DeviceAccelerationInit {\u000a      double? x = null;\u000a      double? y = null;\u000a      double? z = null;\u000a    };\u000a\u000a    dictionary DeviceRotationRateInit {\u000a      double? alpha = null;\u000a      double? beta = null;\u000a      double? gamma = null;\u000a    };\u000a\u000a    dictionary DeviceMotionEventInit : EventInit {\u000a      DeviceAccelerationInit? acceleration;\u000a      DeviceAccelerationInit? accelerationIncludingGravity;\u000a      DeviceRotationRateInit? rotationRate;\u000a      double interval = 0;\u000a    };\u000a  "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/gamepad/extensions.html",timestamp:1512968976290,contents:"\u000a        enum GamepadHand {\u000a          \"\",  /* unknown, both hands, or not applicable */\u000a          \"left\",\u000a          \"right\"\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/gamepad/extensions.html",timestamp:1512968976290,contents:"\u000a        interface GamepadHapticActuator {\u000a          readonly attribute GamepadHapticActuatorType type;\u000a          Promise pulse(double value, double duration);\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/gamepad/extensions.html",timestamp:1512968976290,contents:"\u000a        enum GamepadHapticActuatorType {\u000a          \"vibration\"\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/gamepad/extensions.html",timestamp:1512968976290,contents:"\u000a        interface GamepadPose {\u000a          readonly attribute boolean hasOrientation;\u000a          readonly attribute boolean hasPosition;\u000a\u000a          readonly attribute Float32Array? position;\u000a          readonly attribute Float32Array? linearVelocity;\u000a          readonly attribute Float32Array? linearAcceleration;\u000a          readonly attribute Float32Array? orientation;\u000a          readonly attribute Float32Array? angularVelocity;\u000a          readonly attribute Float32Array? angularAcceleration;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/gamepad/extensions.html",timestamp:1512968976290,contents:"\u000a        partial interface Gamepad {\u000a          readonly attribute GamepadHand hand;\u000a          readonly attribute FrozenArray<GamepadHapticActuator> hapticActuators;\u000a          readonly attribute GamepadPose? pose;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-record/MediaRecorder.html",timestamp:1512968976436,contents:"[Exposed=Window,\u000a Constructor(MediaStream stream, optional MediaRecorderOptions options)]\u000ainterface MediaRecorder : EventTarget {\u000a  readonly attribute MediaStream stream;\u000a  readonly attribute DOMString mimeType;\u000a  readonly attribute RecordingState state;\u000a  attribute EventHandler onstart;\u000a  attribute EventHandler onstop;\u000a  attribute EventHandler ondataavailable;\u000a  attribute EventHandler onpause;\u000a  attribute EventHandler onresume;\u000a  attribute EventHandler onerror;\u000a  readonly attribute unsigned long videoBitsPerSecond;\u000a  readonly attribute unsigned long audioBitsPerSecond;\u000a\u000a  void start(optional long timeslice);\u000a  void stop();\u000a  void pause();\u000a  void resume();\u000a  void requestData();\u000a\u000a  static boolean isTypeSupported(DOMString type);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-record/MediaRecorder.html",timestamp:1512968976436,contents:"dictionary MediaRecorderOptions {\u000a  DOMString mimeType;\u000a  unsigned long audioBitsPerSecond;\u000a  unsigned long videoBitsPerSecond;\u000a  unsigned long bitsPerSecond;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-record/MediaRecorder.html",timestamp:1512968976436,contents:"enum RecordingState {\u000a  \"inactive\",\u000a  \"recording\",\u000a  \"paused\"\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-record/MediaRecorder.html",timestamp:1512968976436,contents:"[Exposed=Window, Constructor(DOMString type, BlobEventInit eventInitDict)]\u000ainterface BlobEvent : Event {\u000a  [SameObject] readonly attribute Blob data;\u000a  readonly attribute DOMHighResTimeStamp timecode;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-record/MediaRecorder.html",timestamp:1512968976436,contents:"dictionary BlobEventInit {\u000a  required Blob data;\u000a  DOMHighResTimeStamp timecode;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-record/MediaRecorder.html",timestamp:1512968976436,contents:"dictionary MediaRecorderErrorEventInit : EventInit {\u000a  required DOMException error;\u000a};\u000a\u000a[Exposed=Window, Constructor(DOMString type, MediaRecorderErrorEventInit eventInitDict)]\u000ainterface MediaRecorderErrorEvent : Event {\u000a  [SameObject] readonly attribute DOMException error;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webdriver/webdriver-spec.html",timestamp:1512968978515,contents:"\u000a Navigator implements NavigatorAutomationInformation;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webdriver/webdriver-spec.html",timestamp:1512968978515,contents:"\u000a [NoInterfaceObject, Exposed=(Window)]\u000a interface NavigatorAutomationInformation {\u000a readonly attribute boolean webdriver; // always returns true\u000a };\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/shape-detection-api/text.html",timestamp:1512968983633,contents:"[\u000a    Constructor,\u000a    Exposed=(Window,Worker),\u000a] interface TextDetector {\u000a    Promise<sequence<DetectedText>> detect(ImageBitmapSource image);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/shape-detection-api/text.html",timestamp:1512968983633,contents:"[\u000a    Constructor,\u000a] interface DetectedText {\u000a  [SameObject] readonly attribute DOMRect boundingBox;\u000a  [SameObject] readonly attribute DOMString rawValue;\u000a  [SameObject] readonly attribute FrozenArray<Point2D> cornerPoints;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Constructor(DOMString type, optional EventInit eventInitDict),\u000a Exposed=(Window,Worker,AudioWorklet)]\u000ainterface Event {\u000a  readonly attribute DOMString type;\u000a  readonly attribute EventTarget? target;\u000a  readonly attribute EventTarget? currentTarget;\u000a  sequence<EventTarget> composedPath();\u000a\u000a  const unsigned short NONE = 0;\u000a  const unsigned short CAPTURING_PHASE = 1;\u000a  const unsigned short AT_TARGET = 2;\u000a  const unsigned short BUBBLING_PHASE = 3;\u000a  readonly attribute unsigned short eventPhase;\u000a\u000a  void stopPropagation();\u000a           attribute boolean cancelBubble; // historical alias of .stopPropagation\u000a  void stopImmediatePropagation();\u000a\u000a  readonly attribute boolean bubbles;\u000a  readonly attribute boolean cancelable;\u000a  void preventDefault();\u000a  readonly attribute boolean defaultPrevented;\u000a  readonly attribute boolean composed;\u000a\u000a  [Unforgeable] readonly attribute boolean isTrusted;\u000a  readonly attribute DOMHighResTimeStamp timeStamp;\u000a\u000a  void initEvent(DOMString type, optional boolean bubbles = false, optional boolean cancelable = false); // historical\u000a};\u000a\u000adictionary EventInit {\u000a  boolean bubbles = false;\u000a  boolean cancelable = false;\u000a  boolean composed = false;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Constructor(DOMString type, optional CustomEventInit eventInitDict),\u000a Exposed=(Window,Worker)]\u000ainterface CustomEvent : Event {\u000a  readonly attribute any detail;\u000a\u000a  void initCustomEvent(DOMString type, optional boolean bubbles = false, optional boolean cancelable = false, optional any detail = null);\u000a};\u000a\u000adictionary CustomEventInit : EventInit {\u000a  any detail = null;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Constructor,\u000a Exposed=(Window,Worker,AudioWorklet)]\u000ainterface EventTarget {\u000a  void addEventListener(DOMString type, EventListener? callback, optional (AddEventListenerOptions or boolean) options);\u000a  void removeEventListener(DOMString type, EventListener? callback, optional (EventListenerOptions or boolean) options);\u000a  boolean dispatchEvent(Event event);\u000a};\u000a\u000acallback interface EventListener {\u000a  void handleEvent(Event event);\u000a};\u000a\u000adictionary EventListenerOptions {\u000a  boolean capture = false;\u000a};\u000a\u000adictionary AddEventListenerOptions : EventListenerOptions {\u000a  boolean passive = false;\u000a  boolean once = false;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Constructor,\u000a Exposed=(Window,Worker)]\u000ainterface AbortController {\u000a  [SameObject] readonly attribute AbortSignal signal;\u000a\u000a  void abort();\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Exposed=(Window,Worker)]\u000ainterface AbortSignal : EventTarget {\u000a  readonly attribute boolean aborted;\u000a\u000a  attribute EventHandler onabort;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[NoInterfaceObject,\u000a Exposed=Window]\u000ainterface NonElementParentNode {\u000a  Element? getElementById(DOMString elementId);\u000a};\u000aDocument implements NonElementParentNode;\u000aDocumentFragment implements NonElementParentNode;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[NoInterfaceObject,\u000a Exposed=Window]\u000ainterface DocumentOrShadowRoot {\u000a};\u000aDocument implements DocumentOrShadowRoot;\u000aShadowRoot implements DocumentOrShadowRoot;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[NoInterfaceObject,\u000a Exposed=Window]\u000ainterface ParentNode {\u000a  [SameObject] readonly attribute HTMLCollection children;\u000a  readonly attribute Element? firstElementChild;\u000a  readonly attribute Element? lastElementChild;\u000a  readonly attribute unsigned long childElementCount;\u000a\u000a  [CEReactions, Unscopable] void prepend((Node or DOMString)... nodes);\u000a  [CEReactions, Unscopable] void append((Node or DOMString)... nodes);\u000a\u000a  Element? querySelector(DOMString selectors);\u000a  [NewObject] NodeList querySelectorAll(DOMString selectors);\u000a};\u000aDocument implements ParentNode;\u000aDocumentFragment implements ParentNode;\u000aElement implements ParentNode;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[NoInterfaceObject,\u000a Exposed=Window]\u000ainterface NonDocumentTypeChildNode {\u000a  readonly attribute Element? previousElementSibling;\u000a  readonly attribute Element? nextElementSibling;\u000a};\u000aElement implements NonDocumentTypeChildNode;\u000aCharacterData implements NonDocumentTypeChildNode;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[NoInterfaceObject,\u000a Exposed=Window]\u000ainterface ChildNode {\u000a  [CEReactions, Unscopable] void before((Node or DOMString)... nodes);\u000a  [CEReactions, Unscopable] void after((Node or DOMString)... nodes);\u000a  [CEReactions, Unscopable] void replaceWith((Node or DOMString)... nodes);\u000a  [CEReactions, Unscopable] void remove();\u000a};\u000aDocumentType implements ChildNode;\u000aElement implements ChildNode;\u000aCharacterData implements ChildNode;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[NoInterfaceObject,\u000a Exposed=Window]\u000ainterface Slotable {\u000a  readonly attribute HTMLSlotElement? assignedSlot;\u000a};\u000aElement implements Slotable;\u000aText implements Slotable;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Exposed=Window]\u000ainterface NodeList {\u000a  getter Node? item(unsigned long index);\u000a  readonly attribute unsigned long length;\u000a  iterable<Node>;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Exposed=Window, LegacyUnenumerableNamedProperties]\u000ainterface HTMLCollection {\u000a  readonly attribute unsigned long length;\u000a  getter Element? item(unsigned long index);\u000a  getter Element? namedItem(DOMString name);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Constructor(MutationCallback callback),\u000a Exposed=Window]\u000ainterface MutationObserver {\u000a  void observe(Node target, optional MutationObserverInit options);\u000a  void disconnect();\u000a  sequence<MutationRecord> takeRecords();\u000a};\u000a\u000acallback MutationCallback = void (sequence<MutationRecord> mutations, MutationObserver observer);\u000a\u000adictionary MutationObserverInit {\u000a  boolean childList = false;\u000a  boolean attributes;\u000a  boolean characterData;\u000a  boolean subtree = false;\u000a  boolean attributeOldValue;\u000a  boolean characterDataOldValue;\u000a  sequence<DOMString> attributeFilter;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Exposed=Window]\u000ainterface MutationRecord {\u000a  readonly attribute DOMString type;\u000a  [SameObject] readonly attribute Node target;\u000a  [SameObject] readonly attribute NodeList addedNodes;\u000a  [SameObject] readonly attribute NodeList removedNodes;\u000a  readonly attribute Node? previousSibling;\u000a  readonly attribute Node? nextSibling;\u000a  readonly attribute DOMString? attributeName;\u000a  readonly attribute DOMString? attributeNamespace;\u000a  readonly attribute DOMString? oldValue;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Exposed=Window]\u000ainterface Node : EventTarget {\u000a  const unsigned short ELEMENT_NODE = 1;\u000a  const unsigned short ATTRIBUTE_NODE = 2;\u000a  const unsigned short TEXT_NODE = 3;\u000a  const unsigned short CDATA_SECTION_NODE = 4;\u000a  const unsigned short ENTITY_REFERENCE_NODE = 5; // historical\u000a  const unsigned short ENTITY_NODE = 6; // historical\u000a  const unsigned short PROCESSING_INSTRUCTION_NODE = 7;\u000a  const unsigned short COMMENT_NODE = 8;\u000a  const unsigned short DOCUMENT_NODE = 9;\u000a  const unsigned short DOCUMENT_TYPE_NODE = 10;\u000a  const unsigned short DOCUMENT_FRAGMENT_NODE = 11;\u000a  const unsigned short NOTATION_NODE = 12; // historical\u000a  readonly attribute unsigned short nodeType;\u000a  readonly attribute DOMString nodeName;\u000a\u000a  readonly attribute USVString baseURI;\u000a\u000a  readonly attribute boolean isConnected;\u000a  readonly attribute Document? ownerDocument;\u000a  Node getRootNode(optional GetRootNodeOptions options);\u000a  readonly attribute Node? parentNode;\u000a  readonly attribute Element? parentElement;\u000a  boolean hasChildNodes();\u000a  [SameObject] readonly attribute NodeList childNodes;\u000a  readonly attribute Node? firstChild;\u000a  readonly attribute Node? lastChild;\u000a  readonly attribute Node? previousSibling;\u000a  readonly attribute Node? nextSibling;\u000a\u000a  [CEReactions] attribute DOMString? nodeValue;\u000a  [CEReactions] attribute DOMString? textContent;\u000a  [CEReactions] void normalize();\u000a\u000a  [CEReactions, NewObject] Node cloneNode(optional boolean deep = false);\u000a  boolean isEqualNode(Node? otherNode);\u000a  boolean isSameNode(Node? otherNode); // historical alias of ===\u000a\u000a  const unsigned short DOCUMENT_POSITION_DISCONNECTED = 0x01;\u000a  const unsigned short DOCUMENT_POSITION_PRECEDING = 0x02;\u000a  const unsigned short DOCUMENT_POSITION_FOLLOWING = 0x04;\u000a  const unsigned short DOCUMENT_POSITION_CONTAINS = 0x08;\u000a  const unsigned short DOCUMENT_POSITION_CONTAINED_BY = 0x10;\u000a  const unsigned short DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;\u000a  unsigned short compareDocumentPosition(Node other);\u000a  boolean contains(Node? other);\u000a\u000a  DOMString? lookupPrefix(DOMString? namespace);\u000a  DOMString? lookupNamespaceURI(DOMString? prefix);\u000a  boolean isDefaultNamespace(DOMString? namespace);\u000a\u000a  [CEReactions] Node insertBefore(Node node, Node? child);\u000a  [CEReactions] Node appendChild(Node node);\u000a  [CEReactions] Node replaceChild(Node node, Node child);\u000a  [CEReactions] Node removeChild(Node child);\u000a};\u000a\u000adictionary GetRootNodeOptions {\u000a  boolean composed = false;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Constructor,\u000a Exposed=Window]\u000ainterface Document : Node {\u000a  [SameObject] readonly attribute DOMImplementation implementation;\u000a  readonly attribute USVString URL;\u000a  readonly attribute USVString documentURI;\u000a  readonly attribute USVString origin;\u000a  readonly attribute DOMString compatMode;\u000a  readonly attribute DOMString characterSet;\u000a  readonly attribute DOMString charset; // historical alias of .characterSet\u000a  readonly attribute DOMString inputEncoding; // historical alias of .characterSet\u000a  readonly attribute DOMString contentType;\u000a\u000a  readonly attribute DocumentType? doctype;\u000a  readonly attribute Element? documentElement;\u000a  HTMLCollection getElementsByTagName(DOMString qualifiedName);\u000a  HTMLCollection getElementsByTagNameNS(DOMString? namespace, DOMString localName);\u000a  HTMLCollection getElementsByClassName(DOMString classNames);\u000a\u000a  [CEReactions, NewObject] Element createElement(DOMString localName, optional ElementCreationOptions options);\u000a  [CEReactions, NewObject] Element createElementNS(DOMString? namespace, DOMString qualifiedName, optional ElementCreationOptions options);\u000a  [NewObject] DocumentFragment createDocumentFragment();\u000a  [NewObject] Text createTextNode(DOMString data);\u000a  [NewObject] CDATASection createCDATASection(DOMString data);\u000a  [NewObject] Comment createComment(DOMString data);\u000a  [NewObject] ProcessingInstruction createProcessingInstruction(DOMString target, DOMString data);\u000a\u000a  [CEReactions, NewObject] Node importNode(Node node, optional boolean deep = false);\u000a  [CEReactions] Node adoptNode(Node node);\u000a\u000a  [NewObject] Attr createAttribute(DOMString localName);\u000a  [NewObject] Attr createAttributeNS(DOMString? namespace, DOMString qualifiedName);\u000a\u000a  [NewObject] Event createEvent(DOMString interface);\u000a\u000a  [NewObject] Range createRange();\u000a\u000a  // NodeFilter.SHOW_ALL = 0xFFFFFFFF\u000a  [NewObject] NodeIterator createNodeIterator(Node root, optional unsigned long whatToShow = 0xFFFFFFFF, optional NodeFilter? filter = null);\u000a  [NewObject] TreeWalker createTreeWalker(Node root, optional unsigned long whatToShow = 0xFFFFFFFF, optional NodeFilter? filter = null);\u000a};\u000a\u000a[Exposed=Window]\u000ainterface XMLDocument : Document {};\u000a\u000adictionary ElementCreationOptions {\u000a  DOMString is;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Exposed=Window]\u000ainterface DOMImplementation {\u000a  [NewObject] DocumentType createDocumentType(DOMString qualifiedName, DOMString publicId, DOMString systemId);\u000a  [NewObject] XMLDocument createDocument(DOMString? namespace, [TreatNullAs=EmptyString] DOMString qualifiedName, optional DocumentType? doctype = null);\u000a  [NewObject] Document createHTMLDocument(optional DOMString title);\u000a\u000a  boolean hasFeature(); // useless; always returns true\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Exposed=Window]\u000ainterface DocumentType : Node {\u000a  readonly attribute DOMString name;\u000a  readonly attribute DOMString publicId;\u000a  readonly attribute DOMString systemId;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Constructor,\u000a Exposed=Window]\u000ainterface DocumentFragment : Node {\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Exposed=Window]\u000ainterface ShadowRoot : DocumentFragment {\u000a  readonly attribute ShadowRootMode mode;\u000a  readonly attribute Element host;\u000a};\u000a\u000aenum ShadowRootMode { \"open\", \"closed\" };\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Exposed=Window]\u000ainterface Element : Node {\u000a  readonly attribute DOMString? namespaceURI;\u000a  readonly attribute DOMString? prefix;\u000a  readonly attribute DOMString localName;\u000a  readonly attribute DOMString tagName;\u000a\u000a  [CEReactions] attribute DOMString id;\u000a  [CEReactions] attribute DOMString className;\u000a  [SameObject, PutForwards=value] readonly attribute DOMTokenList classList;\u000a  [CEReactions, Unscopable] attribute DOMString slot;\u000a\u000a  boolean hasAttributes();\u000a  [SameObject] readonly attribute NamedNodeMap attributes;\u000a  sequence<DOMString> getAttributeNames();\u000a  DOMString? getAttribute(DOMString qualifiedName);\u000a  DOMString? getAttributeNS(DOMString? namespace, DOMString localName);\u000a  [CEReactions] void setAttribute(DOMString qualifiedName, DOMString value);\u000a  [CEReactions] void setAttributeNS(DOMString? namespace, DOMString qualifiedName, DOMString value);\u000a  [CEReactions] void removeAttribute(DOMString qualifiedName);\u000a  [CEReactions] void removeAttributeNS(DOMString? namespace, DOMString localName);\u000a  boolean hasAttribute(DOMString qualifiedName);\u000a  boolean hasAttributeNS(DOMString? namespace, DOMString localName);\u000a\u000a  Attr? getAttributeNode(DOMString qualifiedName);\u000a  Attr? getAttributeNodeNS(DOMString? namespace, DOMString localName);\u000a  [CEReactions] Attr? setAttributeNode(Attr attr);\u000a  [CEReactions] Attr? setAttributeNodeNS(Attr attr);\u000a  [CEReactions] Attr removeAttributeNode(Attr attr);\u000a\u000a  ShadowRoot attachShadow(ShadowRootInit init);\u000a  readonly attribute ShadowRoot? shadowRoot;\u000a\u000a  Element? closest(DOMString selectors);\u000a  boolean matches(DOMString selectors);\u000a  boolean webkitMatchesSelector(DOMString selectors); // historical alias of .matches\u000a\u000a  HTMLCollection getElementsByTagName(DOMString qualifiedName);\u000a  HTMLCollection getElementsByTagNameNS(DOMString? namespace, DOMString localName);\u000a  HTMLCollection getElementsByClassName(DOMString classNames);\u000a\u000a  [CEReactions] Element? insertAdjacentElement(DOMString where, Element element); // historical\u000a  void insertAdjacentText(DOMString where, DOMString data); // historical\u000a};\u000a\u000adictionary ShadowRootInit {\u000a  required ShadowRootMode mode;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Exposed=Window,\u000a LegacyUnenumerableNamedProperties]\u000ainterface NamedNodeMap {\u000a  readonly attribute unsigned long length;\u000a  getter Attr? item(unsigned long index);\u000a  getter Attr? getNamedItem(DOMString qualifiedName);\u000a  Attr? getNamedItemNS(DOMString? namespace, DOMString localName);\u000a  [CEReactions] Attr? setNamedItem(Attr attr);\u000a  [CEReactions] Attr? setNamedItemNS(Attr attr);\u000a  [CEReactions] Attr removeNamedItem(DOMString qualifiedName);\u000a  [CEReactions] Attr removeNamedItemNS(DOMString? namespace, DOMString localName);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Exposed=Window]\u000ainterface Attr : Node {\u000a  readonly attribute DOMString? namespaceURI;\u000a  readonly attribute DOMString? prefix;\u000a  readonly attribute DOMString localName;\u000a  readonly attribute DOMString name;\u000a  [CEReactions] attribute DOMString value;\u000a\u000a  readonly attribute Element? ownerElement;\u000a\u000a  readonly attribute boolean specified; // useless; always returns true\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Exposed=Window]\u000ainterface CharacterData : Node {\u000a  attribute [TreatNullAs=EmptyString] DOMString data;\u000a  readonly attribute unsigned long length;\u000a  DOMString substringData(unsigned long offset, unsigned long count);\u000a  void appendData(DOMString data);\u000a  void insertData(unsigned long offset, DOMString data);\u000a  void deleteData(unsigned long offset, unsigned long count);\u000a  void replaceData(unsigned long offset, unsigned long count, DOMString data);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Constructor(optional DOMString data = \"\"),\u000a Exposed=Window]\u000ainterface Text : CharacterData {\u000a  [NewObject] Text splitText(unsigned long offset);\u000a  readonly attribute DOMString wholeText;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Exposed=Window]\u000ainterface CDATASection : Text {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Exposed=Window]\u000ainterface ProcessingInstruction : CharacterData {\u000a  readonly attribute DOMString target;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Constructor(optional DOMString data = \"\"),\u000a Exposed=Window]\u000ainterface Comment : CharacterData {\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Constructor,\u000a Exposed=Window]\u000ainterface Range {\u000a  readonly attribute Node startContainer;\u000a  readonly attribute unsigned long startOffset;\u000a  readonly attribute Node endContainer;\u000a  readonly attribute unsigned long endOffset;\u000a  readonly attribute boolean collapsed;\u000a  readonly attribute Node commonAncestorContainer;\u000a\u000a  void setStart(Node node, unsigned long offset);\u000a  void setEnd(Node node, unsigned long offset);\u000a  void setStartBefore(Node node);\u000a  void setStartAfter(Node node);\u000a  void setEndBefore(Node node);\u000a  void setEndAfter(Node node);\u000a  void collapse(optional boolean toStart = false);\u000a  void selectNode(Node node);\u000a  void selectNodeContents(Node node);\u000a\u000a  const unsigned short START_TO_START = 0;\u000a  const unsigned short START_TO_END = 1;\u000a  const unsigned short END_TO_END = 2;\u000a  const unsigned short END_TO_START = 3;\u000a  short compareBoundaryPoints(unsigned short how, Range sourceRange);\u000a\u000a  [CEReactions] void deleteContents();\u000a  [CEReactions, NewObject] DocumentFragment extractContents();\u000a  [CEReactions, NewObject] DocumentFragment cloneContents();\u000a  [CEReactions] void insertNode(Node node);\u000a  [CEReactions] void surroundContents(Node newParent);\u000a\u000a  [NewObject] Range cloneRange();\u000a  void detach();\u000a\u000a  boolean isPointInRange(Node node, unsigned long offset);\u000a  short comparePoint(Node node, unsigned long offset);\u000a\u000a  boolean intersectsNode(Node node);\u000a\u000a  stringifier;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Exposed=Window]\u000ainterface NodeIterator {\u000a  [SameObject] readonly attribute Node root;\u000a  readonly attribute Node referenceNode;\u000a  readonly attribute boolean pointerBeforeReferenceNode;\u000a  readonly attribute unsigned long whatToShow;\u000a  readonly attribute NodeFilter? filter;\u000a\u000a  Node? nextNode();\u000a  Node? previousNode();\u000a\u000a  void detach();\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Exposed=Window]\u000ainterface TreeWalker {\u000a  [SameObject] readonly attribute Node root;\u000a  readonly attribute unsigned long whatToShow;\u000a  readonly attribute NodeFilter? filter;\u000a           attribute Node currentNode;\u000a\u000a  Node? parentNode();\u000a  Node? firstChild();\u000a  Node? lastChild();\u000a  Node? previousSibling();\u000a  Node? nextSibling();\u000a  Node? previousNode();\u000a  Node? nextNode();\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Exposed=Window]\u000acallback interface NodeFilter {\u000a  // Constants for acceptNode()\u000a  const unsigned short FILTER_ACCEPT = 1;\u000a  const unsigned short FILTER_REJECT = 2;\u000a  const unsigned short FILTER_SKIP = 3;\u000a\u000a  // Constants for whatToShow\u000a  const unsigned long SHOW_ALL = 0xFFFFFFFF;\u000a  const unsigned long SHOW_ELEMENT = 0x1;\u000a  const unsigned long SHOW_ATTRIBUTE = 0x2;\u000a  const unsigned long SHOW_TEXT = 0x4;\u000a  const unsigned long SHOW_CDATA_SECTION = 0x8;\u000a  const unsigned long SHOW_ENTITY_REFERENCE = 0x10; // historical\u000a  const unsigned long SHOW_ENTITY = 0x20; // historical\u000a  const unsigned long SHOW_PROCESSING_INSTRUCTION = 0x40;\u000a  const unsigned long SHOW_COMMENT = 0x80;\u000a  const unsigned long SHOW_DOCUMENT = 0x100;\u000a  const unsigned long SHOW_DOCUMENT_TYPE = 0x200;\u000a  const unsigned long SHOW_DOCUMENT_FRAGMENT = 0x400;\u000a  const unsigned long SHOW_NOTATION = 0x800; // historical\u000a\u000a  unsigned short acceptNode(Node node);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dom.spec.whatwg.org",timestamp:1512968984207,contents:"[Exposed=Window]\u000ainterface DOMTokenList {\u000a  readonly attribute unsigned long length;\u000a  getter DOMString? item(unsigned long index);\u000a  boolean contains(DOMString token);\u000a  [CEReactions] void add(DOMString... tokens);\u000a  [CEReactions] void remove(DOMString... tokens);\u000a  [CEReactions] boolean toggle(DOMString token, optional boolean force);\u000a  [CEReactions] void replace(DOMString token, DOMString newToken);\u000a  boolean supports(DOMString token);\u000a  [CEReactions] stringifier attribute DOMString value;\u000a  iterable<DOMString>;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.w3.org/TR/geolocation-API",timestamp:1512969012670,contents:" partial interface Navigator {\u000a   readonly attribute Geolocation geolocation;\u000a };\u000a\u000a  "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.w3.org/TR/geolocation-API",timestamp:1512969012670,contents:" [NoInterfaceObject]\u000a interface Geolocation { \u000a   void getCurrentPosition(PositionCallback successCallback,\u000a                           optional PositionErrorCallback errorCallback,\u000a                           optional PositionOptions options);\u000a\u000a   long watchPosition(PositionCallback successCallback,\u000a                      optional PositionErrorCallback errorCallback,\u000a                      optional PositionOptions options);\u000a\u000a   void clearWatch(long watchId);\u000a };\u000a\u000a callback PositionCallback = void (Position position);\u000a\u000a callback PositionErrorCallback = void (PositionError positionError);\u000a "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.w3.org/TR/geolocation-API",timestamp:1512969012670,contents:"  dictionary PositionOptions {\u000a    boolean enableHighAccuracy = false;\u000a    [Clamp] unsigned long timeout = 0xFFFFFFFF;\u000a    [Clamp] unsigned long maximumAge = 0;\u000a  };\u000a\u000a  "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.w3.org/TR/geolocation-API",timestamp:1512969012670,contents:"  [NoInterfaceObject]\u000a  interface Position {\u000a    readonly attribute Coordinates coords;\u000a    readonly attribute DOMTimeStamp timestamp;\u000a  };\u000a  "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.w3.org/TR/geolocation-API",timestamp:1512969012670,contents:"  [NoInterfaceObject]\u000a  interface Coordinates {\u000a    readonly attribute double latitude;\u000a    readonly attribute double longitude;\u000a    readonly attribute double? altitude;\u000a    readonly attribute double accuracy;\u000a    readonly attribute double? altitudeAccuracy;\u000a    readonly attribute double? heading;\u000a    readonly attribute double? speed;\u000a  };\u000a  "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.w3.org/TR/geolocation-API",timestamp:1512969012670,contents:"  [NoInterfaceObject]\u000a  interface PositionError {\u000a    const unsigned short PERMISSION_DENIED = 1;\u000a    const unsigned short POSITION_UNAVAILABLE = 2;\u000a    const unsigned short TIMEOUT = 3;\u000a    readonly attribute unsigned short code;\u000a    readonly attribute DOMString message;\u000a  };\u000a  "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/aom/spec",timestamp:1512969013083,contents:"\u000a          partial interface Element {\u000a            readonly attribute AccessibleNode accessibleNode;\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/aom/spec",timestamp:1512969013083,contents:"\u000a        interface AccessibleNode {\u000a          attribute DOMString? role;\u000a          attribute DOMString? roleDescription;\u000a\u000a          // Accessible label and description.\u000a          attribute DOMString? label;\u000a          attribute AccessibleNodeList? labeledBy;\u000a          attribute AccessibleNodeList? describedBy;\u000a\u000a          // Global states and properties.\u000a          attribute DOMString? current;\u000a\u000a          // Widget properties.\u000a          attribute DOMString? autocomplete;\u000a          attribute boolean? hidden;\u000a          attribute DOMString? keyShortcuts;\u000a          attribute boolean? modal;\u000a          attribute boolean? multiline;\u000a          attribute boolean? multiselectable;\u000a          attribute DOMString? orientation;\u000a          attribute boolean? readOnly;\u000a          attribute boolean? required;\u000a          attribute boolean? selected;\u000a          attribute DOMString? sort;\u000a\u000a          // Widget states.\u000a          attribute DOMString? checked;\u000a          attribute boolean? expanded;\u000a          attribute boolean? disabled;\u000a          attribute DOMString? invalid;\u000a          attribute DOMString? hasPopUp;\u000a          attribute DOMString? pressed;\u000a\u000a          // Control values.\u000a          attribute DOMString? valueText;\u000a          attribute DOMString? placeholder;\u000a          attribute double? valueNow;\u000a          attribute double? valueMin;\u000a          attribute double? valueMax;\u000a\u000a          // Live regions.\u000a          attribute boolean? atomic;\u000a          attribute boolean? busy;\u000a          attribute DOMString? live;\u000a          attribute DOMString? relevant;\u000a\u000a          // Other relationships.\u000a          attribute AccessibleNode? activeDescendant;\u000a          attribute AccessibleNodeList? controls;\u000a          attribute AccessibleNode? details;\u000a          attribute AccessibleNode? errorMessage;\u000a          attribute AccessibleNodeList? flowTo;\u000a          attribute AccessibleNodeList? owns;\u000a\u000a          // Collections.\u000a          attribute long? colCount;\u000a          attribute unsigned long? colIndex;\u000a          attribute unsigned long? colSpan;\u000a          attribute unsigned long? posInSet;\u000a          attribute long? rowCount;\u000a          attribute unsigned long? rowIndex;\u000a          attribute unsigned long? rowSpan;\u000a          attribute long? setSize;\u000a          attribute unsigned long? level;\u000a        };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/aom/spec",timestamp:1512969013083,contents:"\u000a        [\u000a          Constructor(optional sequence<AccessibleNode> nodes = [])\u000a        ]\u000a        interface AccessibleNodeList {\u000a          attribute unsigned long length;\u000a          getter AccessibleNode? item(unsigned long index);\u000a          setter void (unsigned long index, AccessibleNode node);\u000a          void add(AccessibleNode node, optional AccessibleNode? before = null);\u000a          void remove(long index);\u000a        };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webcomponents/spec/custom",timestamp:1512969013309,contents:"\u000ainterface CustomElementRegistry {\u000a  [CEReactions] void define(DOMString name, Function constructor, optional ElementDefinitionOptions options);\u000a  any get(DOMString name);\u000a  Promise<void> whenDefined(DOMString name);\u000a};\u000a\u000adictionary ElementDefinitionOptions {\u000a  DOMString extends;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webcomponents/spec/custom",timestamp:1512969013309,contents:"\u000apartial interface Window {\u000a    readonly attribute CustomElementRegistry customElements;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webcomponents/spec/shadow",timestamp:1512969014803,contents:"\u000a          partial interface DocumentOrShadowRoot {\u000a            Selection? getSelection ();\u000a            Element? elementFromPoint(double x, double y);\u000a            sequence<Element> elementsFromPoint(double x, double y);\u000a            CaretPosition? caretPositionFromPoint(double x, double y);\u000a            readonly attribute Element? activeElement;\u000a            readonly attribute StyleSheetList styleSheets;\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webcomponents/spec/shadow",timestamp:1512969014803,contents:"[Exposed=Window]\u000ainterface ShadowRoot : DocumentFragment {\u000a  readonly attribute ShadowRootMode mode;\u000a  readonly attribute Element host;\u000a};\u000a\u000aenum ShadowRootMode { \"open\", \"closed\" };\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webcomponents/spec/imports",timestamp:1512969016050,contents:"\u000apartial interface HTMLLinkElement {\u000a    readonly attribute Document? import;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/BackgroundSync/spec",timestamp:1512969016541,contents:"partial interface ServiceWorkerRegistration {\u000a  readonly attribute SyncManager sync;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/BackgroundSync/spec",timestamp:1512969016541,contents:"[Exposed=(Window,Worker)]\u000ainterface SyncManager {\u000a  Promise<void> register(DOMString tag);\u000a  Promise<sequence<DOMString>> getTags();\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/BackgroundSync/spec",timestamp:1512969016541,contents:"partial interface ServiceWorkerGlobalScope {\u000a  attribute EventHandler onsync;\u000a};\u000a\u000a[Constructor(DOMString type, SyncEventInit init), Exposed=ServiceWorker]\u000ainterface SyncEvent : ExtendableEvent {\u000a  readonly attribute DOMString tag;\u000a  readonly attribute boolean lastChance;\u000a};\u000a\u000adictionary SyncEventInit : ExtendableEventInit {\u000a  required DOMString tag;\u000a  boolean lastChance = false;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-midi-api",timestamp:1512969017525,contents:"\u000a            partial interface Navigator {\u000a              Promise <MIDIAccess> requestMIDIAccess(optional MIDIOptions options);\u000a            };\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-midi-api",timestamp:1512969017525,contents:"\u000a          dictionary MIDIOptions {\u000a            boolean sysex;\u000a            boolean software;\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-midi-api",timestamp:1512969017525,contents:"\u000a          interface MIDIInputMap {\u000a            readonly maplike <DOMString, MIDIInput>;\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-midi-api",timestamp:1512969017525,contents:"\u000a          interface MIDIOutputMap {\u000a            readonly maplike <DOMString, MIDIOutput>;\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-midi-api",timestamp:1512969017525,contents:"\u000a        interface MIDIAccess: EventTarget {\u000a          readonly attribute MIDIInputMap inputs;\u000a          readonly attribute MIDIOutputMap outputs;\u000a          attribute EventHandler onstatechange;\u000a          readonly attribute boolean sysexEnabled;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-midi-api",timestamp:1512969017525,contents:"\u000a        interface MIDIPort: EventTarget {\u000a          readonly attribute DOMString id;\u000a          readonly attribute DOMString? manufacturer;\u000a          readonly attribute DOMString? name;\u000a          readonly attribute MIDIPortType type;\u000a          readonly attribute DOMString? version;\u000a          readonly attribute MIDIPortDeviceState state;\u000a          readonly attribute MIDIPortConnectionState connection;\u000a          attribute EventHandler onstatechange;\u000a          Promise <MIDIPort> open();\u000a          Promise <MIDIPort> close();\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-midi-api",timestamp:1512969017525,contents:"\u000a          interface MIDIInput: MIDIPort {\u000a            attribute EventHandler onmidimessage;\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-midi-api",timestamp:1512969017525,contents:"\u000a          interface MIDIOutput : MIDIPort {\u000a            void send(sequence<octet> data, optional DOMHighResTimeStamp timestamp = 0);\u000a            void clear();\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-midi-api",timestamp:1512969017525,contents:"\u000a          enum MIDIPortType {\u000a            \"input\",\u000a            \"output\",\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-midi-api",timestamp:1512969017525,contents:"\u000a        enum MIDIPortDeviceState {\u000a          \"disconnected\",\u000a          \"connected\",\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-midi-api",timestamp:1512969017525,contents:"\u000a        enum MIDIPortConnectionState {\u000a          \"open\",\u000a          \"closed\",\u000a          \"pending\",\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-midi-api",timestamp:1512969017525,contents:"\u000a        [Constructor(DOMString type, optional MIDIMessageEventInit eventInitDict)]\u000a        interface MIDIMessageEvent: Event {\u000a          readonly attribute Uint8Array data;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-midi-api",timestamp:1512969017525,contents:"\u000a          dictionary MIDIMessageEventInit: EventInit {\u000a            Uint8Array data;\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-midi-api",timestamp:1512969017525,contents:"\u000a        [Constructor(DOMString type, optional MIDIConnectionEventInit eventInitDict)]\u000a        interface MIDIConnectionEvent: Event {\u000a          readonly attribute MIDIPort port;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-midi-api",timestamp:1512969017525,contents:"\u000a          dictionary MIDIConnectionEventInit: EventInit {\u000a            MIDIPort port;\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/web-share",timestamp:1512969018015,contents:"\u000a          partial interface Navigator {\u000a            [SecureContext] Promise<void> share(optional ShareData data);\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/web-share",timestamp:1512969018015,contents:"\u000a          dictionary ShareData {\u000a            USVString title;\u000a            USVString text;\u000a            USVString url;\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/scroll-animations",timestamp:1512969018220,contents:"enum ScrollDirection {\u000a  \"auto\",\u000a  \"block\",\u000a  \"inline\",\u000a  \"horizontal\",\u000a  \"vertical\"\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/scroll-animations",timestamp:1512969018220,contents:"enum ScrollTimelineAutoKeyword { \"auto\" };\u000a\u000adictionary ScrollTimelineOptions {\u000a  Element scrollSource;\u000a  ScrollDirection orientation = \"auto\";\u000a  DOMString startScrollOffset = \"auto\";\u000a  DOMString endScrollOffset = \"auto\";\u000a  (double or ScrollTimelineAutoKeyword) timeRange = \"auto\";\u000a  FillMode fill = \"none\";\u000a};\u000a\u000a[Constructor(optional ScrollTimelineOptions options)]\u000ainterface ScrollTimeline : AnimationTimeline {\u000a  readonly attribute Element scrollSource;\u000a  readonly attribute ScrollDirection orientation;\u000a  readonly attribute DOMString startScrollOffset;\u000a  readonly attribute DOMString endScrollOffset;\u000a  readonly attribute (double or ScrollTimelineAutoKeyword) timeRange;\u000a  readonly attribute FillMode fill;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/page-visibility",timestamp:1512969019569,contents:"\u000a      enum VisibilityState {\u000a        \"hidden\", \"visible\", \"prerender\"\u000a      };\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/page-visibility",timestamp:1512969019569,contents:"\u000a      partial interface Document {\u000a        readonly attribute boolean hidden;\u000a        readonly attribute VisibilityState visibilityState;\u000a        attribute EventHandler onvisibilitychange;\u000a      };\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/cors-rfc1918",timestamp:1512969019751,contents:"enum AddressSpace { \"local\", \"private\", \"public\" };\u000a\u000apartial interface Document {\u000a  readonly attribute AddressSpace addressSpace;\u000a};\u000a\u000apartial interface WorkerGlobalScope {\u000a  readonly attribute AddressSpace addressSpace;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/selection-api",timestamp:1512969020788,contents:"\u000a        interface Selection {\u000a          readonly attribute Node? anchorNode;\u000a          readonly attribute unsigned long anchorOffset;\u000a          readonly attribute Node? focusNode;\u000a          readonly attribute unsigned long focusOffset;\u000a          readonly attribute boolean isCollapsed;\u000a          readonly attribute unsigned long rangeCount;\u000a          readonly attribute DOMString type;\u000a          Range getRangeAt(unsigned long index);\u000a          void addRange(Range range);\u000a          void removeRange(Range range);\u000a          void removeAllRanges();\u000a          void empty();\u000a          void collapse(Node? node, optional unsigned long offset = 0);\u000a          void setPosition(Node? node, optional unsigned long offset = 0);\u000a          void collapseToStart();\u000a          void collapseToEnd();\u000a          void extend(Node node, optional unsigned long offset = 0);\u000a          void setBaseAndExtent(Node anchorNode, unsigned long anchorOffset, Node focusNode, unsigned long focusOffset);\u000a          void selectAllChildren(Node node);\u000a          [CEReactions]\u000a          void deleteFromDocument();\u000a          boolean containsNode(Node node, optional boolean allowPartialContainment = false);\u000a          stringifier DOMString();\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/selection-api",timestamp:1512969020788,contents:"\u000a          partial interface Document {\u000a            Selection ? getSelection();\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/selection-api",timestamp:1512969020788,contents:"\u000a          partial interface Window {\u000a            Selection? getSelection();\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/selection-api",timestamp:1512969020788,contents:"\u000a          partial interface GlobalEventHandlers {\u000a            attribute EventHandler onselectstart;\u000a            attribute EventHandler onselectionchange;\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/pointerlock",timestamp:1512969021201,contents:"\u000a        partial interface Element {\u000a          void requestPointerLock();\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/pointerlock",timestamp:1512969021201,contents:"\u000a        partial interface Document {\u000a          attribute EventHandler onpointerlockchange;\u000a          attribute EventHandler onpointerlockerror;\u000a          void exitPointerLock();\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/pointerlock",timestamp:1512969021201,contents:"\u000a        partial interface DocumentOrShadowRoot {\u000a          readonly attribute Element ? pointerLockElement;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/pointerlock",timestamp:1512969021201,contents:"\u000a        partial interface MouseEvent {\u000a          readonly attribute long movementX;\u000a          readonly attribute long movementY;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/pointerlock",timestamp:1512969021201,contents:"\u000a        partial dictionary MouseEventInit {\u000a          long movementX = 0;\u000a          long movementY = 0;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/DOM-Parsing",timestamp:1512969021500,contents:"\u000a    [Constructor, Exposed=Window]\u000a    interface DOMParser {\u000a      [NewObject] Document parseFromString(DOMString str, SupportedType type);\u000a    };\u000a\u000a    enum SupportedType {\u000a      \"text/html\",\u000a      \"text/xml\",\u000a      \"application/xml\",\u000a      \"application/xhtml+xml\",\u000a      \"image/svg+xml\"\u000a    };\u000a  "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/DOM-Parsing",timestamp:1512969021500,contents:"\u000a    [Constructor, Exposed=Window] \u000a      interface XMLSerializer {\u000a      DOMString serializeToString(Node root);\u000a    };\u000a  "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/DOM-Parsing",timestamp:1512969021500,contents:"\u000a    partial interface Element {\u000a      [CEReactions, TreatNullAs=EmptyString] attribute DOMString innerHTML;\u000a      [CEReactions, TreatNullAs=EmptyString] attribute DOMString outerHTML;\u000a      [CEReactions] void insertAdjacentHTML(DOMString position, DOMString text);\u000a    };\u000a  "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/DOM-Parsing",timestamp:1512969021500,contents:"\u000a    partial interface Range {\u000a      [CEReactions, NewObject] DocumentFragment createContextualFragment(DOMString fragment);\u000a    };\u000a  "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/DOM-Parsing",timestamp:1512969021500,contents:"\u000a    partial interface Text {\u000a      attribute boolean serializeAsCDATA;\u000a    };\u000a  "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/feature-policy",timestamp:1512969022743,contents:"partial interface HTMLIFrameElement {\u000a    [CEReactions, Reflect] attribute DOMString allow;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/pointerevents",timestamp:1512969023888,contents:"\u000adictionary PointerEventInit : MouseEventInit {\u000a    long        pointerId = 0;\u000a    double      width = 1;\u000a    double      height = 1;\u000a    float       pressure = 0;\u000a    float       tangentialPressure = 0;\u000a    long        tiltX = 0;\u000a    long        tiltY = 0;\u000a    long        twist = 0;\u000a    DOMString   pointerType = \"\";\u000a    boolean     isPrimary = false;\u000a};\u000a\u000a[Constructor(DOMString type, optional PointerEventInit eventInitDict), Exposed=Window]\u000ainterface PointerEvent : MouseEvent {\u000a    readonly        attribute long        pointerId;\u000a    readonly        attribute double      width;\u000a    readonly        attribute double      height;\u000a    readonly        attribute float       pressure;\u000a    readonly        attribute float       tangentialPressure;\u000a    readonly        attribute long        tiltX;\u000a    readonly        attribute long        tiltY;\u000a    readonly        attribute long        twist;\u000a    readonly        attribute DOMString   pointerType;\u000a    readonly        attribute boolean     isPrimary;\u000a};\u000a              "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/pointerevents",timestamp:1512969023888,contents:"\u000apartial interface Element {\u000a  void setPointerCapture (long pointerId);\u000a  void releasePointerCapture (long pointerId);\u000a  boolean hasPointerCapture (long pointerId);\u000a};\u000a            "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/pointerevents",timestamp:1512969023888,contents:"\u000apartial interface GlobalEventHandlers {\u000a    attribute EventHandler ongotpointercapture;\u000a    attribute EventHandler onlostpointercapture;\u000a    attribute EventHandler onpointerdown;\u000a    attribute EventHandler onpointermove;\u000a    attribute EventHandler onpointerup;\u000a    attribute EventHandler onpointercancel;\u000a    attribute EventHandler onpointerover;\u000a    attribute EventHandler onpointerout;\u000a    attribute EventHandler onpointerenter;\u000a    attribute EventHandler onpointerleave;\u000a};\u000a            "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/pointerevents",timestamp:1512969023888,contents:"\u000apartial interface Navigator {\u000a    readonly  attribute long maxTouchPoints;\u000a};\u000a            "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/touch-events",timestamp:1512969024767,contents:"\u000aenum TouchType {\u000a    \"direct\",\u000a    \"stylus\"\u000a};\u000a\u000adictionary TouchInit {\u000a    required long        identifier;\u000a    required EventTarget target;\u000a             double      clientX = 0;\u000a             double      clientY = 0;\u000a             double      screenX = 0;\u000a             double      screenY = 0;\u000a             double      pageX = 0;\u000a             double      pageY = 0;\u000a             float       radiusX = 0;\u000a             float       radiusY = 0;\u000a             float       rotationAngle = 0;\u000a             float       force = 0;\u000a             double      altitudeAngle = 0;\u000a             double      azimuthAngle = 0;\u000a             TouchType   touchType = \"direct\";\u000a};\u000a\u000a[Constructor(TouchInit touchInitDict), Exposed=Window]\u000ainterface Touch {\u000a    readonly        attribute long        identifier;\u000a    readonly        attribute EventTarget target;\u000a    readonly        attribute double      screenX;\u000a    readonly        attribute double      screenY;\u000a    readonly        attribute double      clientX;\u000a    readonly        attribute double      clientY;\u000a    readonly        attribute double      pageX;\u000a    readonly        attribute double      pageY;\u000a    readonly        attribute float       radiusX;\u000a    readonly        attribute float       radiusY;\u000a    readonly        attribute float       rotationAngle;\u000a    readonly        attribute float       force;\u000a    readonly        attribute float       altitudeAngle;\u000a    readonly        attribute float       azimuthAngle;\u000a    readonly        attribute TouchType   touchType;\u000a};\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/touch-events",timestamp:1512969024767,contents:"\u000ainterface TouchList {\u000a    readonly        attribute unsigned long length;\u000a    getter Touch? item (unsigned long index);\u000a};\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/touch-events",timestamp:1512969024767,contents:"\u000adictionary TouchEventInit : EventModifierInit {\u000a             sequence<Touch> touches = [];\u000a             sequence<Touch> targetTouches = [];\u000a             sequence<Touch> changedTouches = [];\u000a};\u000a\u000a[Constructor(DOMString type, optional TouchEventInit eventInitDict), Exposed=Window]\u000ainterface TouchEvent : UIEvent {\u000a    readonly        attribute TouchList touches;\u000a    readonly        attribute TouchList targetTouches;\u000a    readonly        attribute TouchList changedTouches;\u000a    readonly        attribute boolean   altKey;\u000a    readonly        attribute boolean   metaKey;\u000a    readonly        attribute boolean   ctrlKey;\u000a    readonly        attribute boolean   shiftKey;\u000a};\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/touch-events",timestamp:1512969024767,contents:"\u000apartial interface GlobalEventHandlers {\u000a                    attribute EventHandler ontouchstart;\u000a                    attribute EventHandler ontouchend;\u000a                    attribute EventHandler ontouchmove;\u000a                    attribute EventHandler ontouchcancel;\u000a};\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/touch-events",timestamp:1512969024767,contents:"\u000a          partial interface Document {\u000a            // Deprecated in this specification\u000a            Touch createTouch (WindowProxy view, EventTarget target, long identifier, double pageX, double pageY, double screenX, double screenY);\u000a            // Deprecated in this specification\u000a            TouchList createTouchList (Touch... touches);\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/requestidlecallback",timestamp:1512969025254,contents:"\u000apartial interface Window {\u000a  unsigned long requestIdleCallback(IdleRequestCallback callback, optional IdleRequestOptions options);\u000a  void cancelIdleCallback(unsigned long handle);\u000a};\u000a\u000adictionary IdleRequestOptions {\u000a  unsigned long timeout;\u000a};\u000a\u000a[Exposed=Window] interface IdleDeadline {\u000a  DOMHighResTimeStamp timeRemaining();\u000a  readonly attribute boolean didTimeout;\u000a};\u000a\u000acallback IdleRequestCallback = void (IdleDeadline deadline);\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/clipboard-apis",timestamp:1512969025564,contents:"dictionary ClipboardEventInit : EventInit {\u000a  DataTransfer? clipboardData = null;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/clipboard-apis",timestamp:1512969025564,contents:"[Constructor(DOMString type, optional ClipboardEventInit eventInitDict), Exposed=Window]\u000ainterface ClipboardEvent : Event {\u000a  readonly attribute DataTransfer? clipboardData;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/clipboard-apis",timestamp:1512969025564,contents:"partial interface Navigator {\u000a  [SecureContext, SameObject] readonly attribute Clipboard clipboard;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/clipboard-apis",timestamp:1512969025564,contents:"[SecureContext, Exposed=Window] interface Clipboard : EventTarget {\u000a  Promise<DataTransfer> read();\u000a  Promise<DOMString> readText();\u000a  Promise<void> write(DataTransfer data);\u000a  Promise<void> writeText(DOMString data);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/clipboard-apis",timestamp:1512969025564,contents:"dictionary ClipboardPermissionDescriptor : PermissionDescriptor {\u000a  boolean allowWithoutGesture = false;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://garykac.github.io/staticrange",timestamp:1512969027533,contents:"interface StaticRange {\u000a  readonly attribute Node startContainer;\u000a  readonly attribute unsigned long startOffset;\u000a\u0009\u0009\u000a  readonly attribute Node endContainer;\u000a  readonly attribute unsigned long endOffset;\u000a\u0009\u0009\u000a  readonly attribute boolean collapsed;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webappsec-subresource-integrity",timestamp:1512969028261,contents:"partial interface HTMLLinkElement {\u000a  attribute DOMString integrity;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webappsec-subresource-integrity",timestamp:1512969028261,contents:"partial interface HTMLScriptElement {\u000a  attribute DOMString integrity;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/html-media-capture",timestamp:1512969029475,contents:"\u000a        partial interface HTMLInputElement {\u000a            [CEReactions] attribute DOMString capture;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/InputDeviceCapabilities",timestamp:1512969029619,contents:"\u000a        [Constructor(optional InputDeviceCapabilitiesInit deviceInitDict)]\u000a        interface InputDeviceCapabilities {\u000a          readonly attribute boolean firesTouchEvents;\u000a          readonly attribute boolean pointerMovementScrolls;\u000a        };\u000a\u000a        dictionary InputDeviceCapabilitiesInit {\u000a          boolean firesTouchEvents = false;\u000a          boolean pointerMovementScrolls = false;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/InputDeviceCapabilities",timestamp:1512969029619,contents:"\u000a        partial interface UIEvent {\u000a          readonly attribute InputDeviceCapabilities? sourceCapabilities;\u000a        };\u000a\u000a        partial dictionary UIEventInit {\u000a          InputDeviceCapabilities? sourceCapabilities = null;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/hr-time",timestamp:1512969029723,contents:"\u000atypedef double DOMHighResTimeStamp;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/hr-time",timestamp:1512969029723,contents:"\u000a[Exposed=(Window,Worker)]\u000ainterface Performance : EventTarget {\u000a    DOMHighResTimeStamp now ();\u000a    readonly attribute DOMHighResTimeStamp timeOrigin;\u000a    [Default] object toJSON();\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/hr-time",timestamp:1512969029723,contents:"partial interface WindowOrWorkerGlobalScope {\u000a    [Replaceable]\u000a    readonly    attribute Performance performance;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/resource-timing",timestamp:1512969029886,contents:"\u000d\u000a[Exposed=(Window,Worker)]\u000d\u000ainterface PerformanceResourceTiming : PerformanceEntry {\u000d\u000a    readonly        attribute DOMString           initiatorType;\u000d\u000a    readonly        attribute DOMString           nextHopProtocol;\u000d\u000a    readonly        attribute DOMHighResTimeStamp workerStart;\u000d\u000a    readonly        attribute DOMHighResTimeStamp redirectStart;\u000d\u000a    readonly        attribute DOMHighResTimeStamp redirectEnd;\u000d\u000a    readonly        attribute DOMHighResTimeStamp fetchStart;\u000d\u000a    readonly        attribute DOMHighResTimeStamp domainLookupStart;\u000d\u000a    readonly        attribute DOMHighResTimeStamp domainLookupEnd;\u000d\u000a    readonly        attribute DOMHighResTimeStamp connectStart;\u000d\u000a    readonly        attribute DOMHighResTimeStamp connectEnd;\u000d\u000a    readonly        attribute DOMHighResTimeStamp secureConnectionStart;\u000d\u000a    readonly        attribute DOMHighResTimeStamp requestStart;\u000d\u000a    readonly        attribute DOMHighResTimeStamp responseStart;\u000d\u000a    readonly        attribute DOMHighResTimeStamp responseEnd;\u000d\u000a    readonly        attribute unsigned long long  transferSize;\u000d\u000a    readonly        attribute unsigned long long  encodedBodySize;\u000d\u000a    readonly        attribute unsigned long long  decodedBodySize;\u000d\u000a    [Default] object toJSON();\u000d\u000a};\u000d\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/resource-timing",timestamp:1512969029886,contents:"partial interface Performance {\u000d\u000a  void clearResourceTimings ();\u000d\u000a  void setResourceTimingBufferSize (unsigned long maxSize);\u000d\u000a              attribute EventHandler onresourcetimingbufferfull;\u000d\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/longtasks",timestamp:1512969030700,contents:"interface PerformanceLongTaskTiming : PerformanceEntry {\u000a    readonly attribute FrozenArray<TaskAttributionTiming> attribution;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/longtasks",timestamp:1512969030700,contents:"interface TaskAttributionTiming : PerformanceEntry {\u000a    readonly attribute DOMString containerType;\u000a    readonly attribute DOMString containerSrc;\u000a    readonly attribute DOMString containerId;\u000a    readonly attribute DOMString containerName;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/ResizeObserver",timestamp:1512969031455,contents:"[Constructor(ResizeObserverCallback callback),\u000a    Exposed=Window]\u000ainterface ResizeObserver {\u000a    void observe(Element target);\u000a    void unobserve(Element target);\u000a    void disconnect();\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/ResizeObserver",timestamp:1512969031455,contents:"callback ResizeObserverCallback = void (sequence<ResizeObserverEntry> entries, ResizeObserver observer)\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/ResizeObserver",timestamp:1512969031455,contents:"[Constructor(Element target)\u000a]\u000ainterface ResizeObserverEntry {\u000a    readonly attribute Element target;\u000a    readonly attribute DOMRectReadOnly contentRect;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/ResizeObserver",timestamp:1512969031455,contents:"[Constructor(Element target)\u000a]\u000ainterface ResizeObservation {\u000a    readonly attribute Element target;\u000a    readonly attribute float broadcastWidth;\u000a    readonly attribute float broadcastHeight;\u000a    boolean isActive();\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/server-timing",timestamp:1512969032823,contents:"\u000a    [Exposed=(Window,Worker)]\u000a    interface PerformanceServerTiming {\u000a      readonly attribute DOMString name;\u000a      readonly attribute DOMHighResTimeStamp duration;\u000a      readonly attribute DOMString description;\u000a      [Default] object toJSON();\u000a    };\u000a  "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/server-timing",timestamp:1512969032823,contents:"\u000a  [Exposed=(Window,Worker)]\u000a  partial interface PerformanceResourceTiming {\u000a    readonly attribute FrozenArray<PerformanceServerTiming> serverTiming;\u000a  };\u000a  "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/performance-timeline",timestamp:1512969032936,contents:"\u000a      partial interface Performance {\u000a        PerformanceEntryList getEntries ();\u000a        PerformanceEntryList getEntriesByType (DOMString type);\u000a        PerformanceEntryList getEntriesByName (DOMString name, optional DOMString type);\u000a      };\u000a      typedef sequence<PerformanceEntry> PerformanceEntryList;\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/performance-timeline",timestamp:1512969032936,contents:"\u000a      [Exposed=(Window,Worker)]\u000a      interface PerformanceEntry {\u000a        readonly    attribute DOMString           name;\u000a        readonly    attribute DOMString           entryType;\u000a        readonly    attribute DOMHighResTimeStamp startTime;\u000a        readonly    attribute DOMHighResTimeStamp duration;\u000a        [Default] object toJSON();\u000a      };"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/performance-timeline",timestamp:1512969032936,contents:"\u000a      callback PerformanceObserverCallback = void (PerformanceObserverEntryList entries,\u000a                                                   PerformanceObserver observer);\u000a      [Constructor(PerformanceObserverCallback callback), Exposed=(Window,Worker)]\u000a      interface PerformanceObserver {\u000a        void observe (PerformanceObserverInit options);\u000a        void disconnect ();\u000a      };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/performance-timeline",timestamp:1512969032936,contents:"\u000a          dictionary PerformanceObserverInit {\u000a            required sequence<DOMString> entryTypes;\u000a            boolean buffered = false;\u000a          };\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/performance-timeline",timestamp:1512969032936,contents:"\u000a          [Exposed=(Window,Worker)]\u000a          interface PerformanceObserverEntryList {\u000a            PerformanceEntryList getEntries();\u000a            PerformanceEntryList getEntriesByType (DOMString type);\u000a            PerformanceEntryList getEntriesByName (DOMString name, optional DOMString type);\u000a          };\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/navigation-timing",timestamp:1512969033180,contents:"\u000a        [Exposed=Window]\u000a        interface PerformanceNavigationTiming : PerformanceResourceTiming {\u000a            readonly        attribute DOMHighResTimeStamp unloadEventStart;\u000a            readonly        attribute DOMHighResTimeStamp unloadEventEnd;\u000a            readonly        attribute DOMHighResTimeStamp domInteractive;\u000a            readonly        attribute DOMHighResTimeStamp domContentLoadedEventStart;\u000a            readonly        attribute DOMHighResTimeStamp domContentLoadedEventEnd;\u000a            readonly        attribute DOMHighResTimeStamp domComplete;\u000a            readonly        attribute DOMHighResTimeStamp loadEventStart;\u000a            readonly        attribute DOMHighResTimeStamp loadEventEnd;\u000a            readonly        attribute NavigationType      type;\u000a            readonly        attribute unsigned short      redirectCount;\u000a            [Default] object toJSON();\u000a        };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/navigation-timing",timestamp:1512969033180,contents:"\u000a            enum NavigationType {\u000a                \"navigate\",\u000a                \"reload\",\u000a                \"back_forward\",\u000a                \"prerender\"\u000a            };\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/navigation-timing",timestamp:1512969033180,contents:"\u000a[Exposed=Window]\u000ainterface PerformanceTiming {\u000a  readonly attribute unsigned long long navigationStart;\u000a  readonly attribute unsigned long long unloadEventStart;\u000a  readonly attribute unsigned long long unloadEventEnd;\u000a  readonly attribute unsigned long long redirectStart;\u000a  readonly attribute unsigned long long redirectEnd;\u000a  readonly attribute unsigned long long fetchStart;\u000a  readonly attribute unsigned long long domainLookupStart;\u000a  readonly attribute unsigned long long domainLookupEnd;\u000a  readonly attribute unsigned long long connectStart;\u000a  readonly attribute unsigned long long connectEnd;\u000a  readonly attribute unsigned long long secureConnectionStart;\u000a  readonly attribute unsigned long long requestStart;\u000a  readonly attribute unsigned long long responseStart;\u000a  readonly attribute unsigned long long responseEnd;\u000a  readonly attribute unsigned long long domLoading;\u000a  readonly attribute unsigned long long domInteractive;\u000a  readonly attribute unsigned long long domContentLoadedEventStart;\u000a  readonly attribute unsigned long long domContentLoadedEventEnd;\u000a  readonly attribute unsigned long long domComplete;\u000a  readonly attribute unsigned long long loadEventStart;\u000a  readonly attribute unsigned long long loadEventEnd;\u000a  [Default] object toJSON();\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/navigation-timing",timestamp:1512969033180,contents:"\u000a[Exposed=Window]\u000ainterface PerformanceNavigation {\u000a  const unsigned short TYPE_NAVIGATE = 0;\u000a  const unsigned short TYPE_RELOAD = 1;\u000a  const unsigned short TYPE_BACK_FORWARD = 2;\u000a  const unsigned short TYPE_RESERVED = 255;\u000a  readonly attribute unsigned short type;\u000a  readonly attribute unsigned short redirectCount;\u000a  [Default] object toJSON();\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/navigation-timing",timestamp:1512969033180,contents:"\u000a        [Exposed=Window]\u000a        partial interface Performance {\u000a          [SameObject]\u000a          readonly attribute PerformanceTiming timing;\u000a          [SameObject]\u000a          readonly attribute PerformanceNavigation navigation;\u000a        };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/animation-worklet",timestamp:1512969033759,contents:"partial interface Window {\u000a    [SameObject] readonly attribute Worklet animationWorklet;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/animation-worklet",timestamp:1512969033759,contents:"callback VoidFunction = void ();\u000a\u000a[Global=Worklet]\u000ainterface AnimationWorkletGlobalScope : WorkletGlobalScope {\u000a    void registerAnimator(DOMString name, VoidFunction animatorCtor);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/animation-worklet",timestamp:1512969033759,contents:"[Constructor (DOMString animatorName,\u000a              optional (AnimationEffectReadOnly or array)? effects = null,\u000a              AnimationTimeline? timeline,\u000a              optional WorkletAnimationOptions)]\u000ainterface WorkletAnimation : Animation {\u000a        readonly attribute DOMString animatorName;\u000a};\u000a\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/animation-worklet",timestamp:1512969033759,contents:"interface WorkletGroupEffectReadOnly :  GroupEffectReadOnly {};\u000a\u000ainterface WorkletGroupEffect :  WorkletGroupEffectReadOnly {};\u000aWorkletGroupEffect implements AnimationEffectMutable;\u000aWorkletGroupEffect implements GroupEffectMutable;\u000a\u000a[Exposed=Worklet]\u000apartial interface AnimationEffectReadOnly {\u000a    // Intended for use inside Animation Worklet scope to drive the effect.\u000a    attribute double localTime;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/paint-timing",timestamp:1512969035328,contents:"interface PerformancePaintTiming : PerformanceEntry {};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-output",timestamp:1512969035645,contents:"\u000a      partial interface HTMLMediaElement {\u000a        readonly        attribute DOMString sinkId;\u000a        Promise<void> setSinkId (DOMString sinkId);\u000a      };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webappsec-secure-contexts",timestamp:1512969035760,contents:"partial interface WindowOrWorkerGlobalScope {\u000a  readonly attribute boolean isSecureContext;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/battery",timestamp:1512969036910,contents:"\u000a        partial interface Navigator {\u000a          Promise<BatteryManager> getBattery();\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/battery",timestamp:1512969036910,contents:"\u000a        [Exposed=Window]\u000a        interface BatteryManager : EventTarget {\u000a            readonly        attribute boolean             charging;\u000a            readonly        attribute unrestricted double chargingTime;\u000a            readonly        attribute unrestricted double dischargingTime;\u000a            readonly        attribute double              level;\u000a                            attribute EventHandler        onchargingchange;\u000a                            attribute EventHandler        onchargingtimechange;\u000a                            attribute EventHandler        ondischargingtimechange;\u000a                            attribute EventHandler        onlevelchange;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/beacon",timestamp:1512969037082,contents:"\u000a  partial interface Navigator {\u000a      boolean sendBeacon(USVString url, optional BodyInit? data = null);\u000a  };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/budget-api",timestamp:1512969037302,contents:"[Exposed=Window]\u000apartial interface Navigator {\u000a    [SameObject] readonly attribute BudgetService budget;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/budget-api",timestamp:1512969037302,contents:"[Exposed=Worker]\u000apartial interface WorkerNavigator {\u000a    [SameObject] readonly attribute BudgetService budget;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/budget-api",timestamp:1512969037302,contents:"[Exposed=(Window,Worker)]\u000ainterface BudgetService {\u000a    Promise<double> getCost(OperationType operation);\u000a    Promise<sequence<BudgetState>> getBudget();\u000a\u000a    Promise<boolean> reserve(OperationType operation);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/budget-api",timestamp:1512969037302,contents:"[Exposed=(Window,Worker)]\u000ainterface BudgetState {\u000a  readonly attribute double budgetAt;\u000a  readonly attribute DOMTimeStamp time;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/budget-api",timestamp:1512969037302,contents:"enum OperationType {\u000a  \"silent-push\"\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/media-capabilities",timestamp:1512969038127,contents:"dictionary MediaConfiguration {\u000a  VideoConfiguration video;\u000a  AudioConfiguration audio;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/media-capabilities",timestamp:1512969038127,contents:"dictionary MediaDecodingConfiguration : MediaConfiguration {\u000a  required MediaDecodingType type;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/media-capabilities",timestamp:1512969038127,contents:"dictionary MediaEncodingConfiguration : MediaConfiguration {\u000a  required MediaEncodingType type;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/media-capabilities",timestamp:1512969038127,contents:"enum MediaDecodingType {\u000a  \"file\",\u000a  \"media-source\",\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/media-capabilities",timestamp:1512969038127,contents:"enum MediaEncodingType {\u000a  \"record\",\u000a  \"transmission\"\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/media-capabilities",timestamp:1512969038127,contents:"dictionary VideoConfiguration {\u000a  required DOMString contentType;\u000a  required unsigned long width;\u000a  required unsigned long height;\u000a  required unsigned long bitrate;\u000a  required DOMString framerate;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/media-capabilities",timestamp:1512969038127,contents:"dictionary AudioConfiguration {\u000a  required DOMString contentType;\u000a  DOMString channels;\u000a  unsigned long bitrate;\u000a  unsigned long samplerate;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/media-capabilities",timestamp:1512969038127,contents:"interface MediaCapabilitiesInfo {\u000a  readonly attribute boolean supported;\u000a  readonly attribute boolean smooth;\u000a  readonly attribute boolean powerEfficient;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/media-capabilities",timestamp:1512969038127,contents:"[Exposed=(Window)]\u000apartial interface Navigator {\u000a  [SameObject] readonly attribute MediaCapabilities mediaCapabilities;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/media-capabilities",timestamp:1512969038127,contents:"[Exposed=(Worker)]\u000apartial interface WorkerNavigator {\u000a  [SameObject] readonly attribute MediaCapabilities mediaCapabilities;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/media-capabilities",timestamp:1512969038127,contents:"[Exposed=(Window, Worker)]\u000ainterface MediaCapabilities {\u000a  Promise<MediaCapabilitiesInfo> decodingInfo(MediaDecodingConfiguration configuration);\u000a  Promise<MediaCapabilitiesInfo> encodingInfo(MediaEncodingConfiguration configuration);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/media-capabilities",timestamp:1512969038127,contents:"interface ScreenLuminance {\u000a  readonly attribute double min;\u000a  readonly attribute double max;\u000a  readonly attribute double maxAverage;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/media-capabilities",timestamp:1512969038127,contents:"enum ScreenColorGamut {\u000a  \"srgb\",\u000a  \"p3\",\u000a  \"rec2020\",\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/media-capabilities",timestamp:1512969038127,contents:"partial interface Screen {\u000a  readonly attribute ScreenColorGamut colorGamut;\u000a  readonly attribute ScreenLuminance? luminance;\u000a\u000a  attribute EventHandler onchange;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-fromelement",timestamp:1512969039477,contents:"partial interface HTMLMediaElement {\u000a    MediaStream captureStream ();\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-fromelement",timestamp:1512969039477,contents:"partial interface HTMLCanvasElement {\u000a    MediaStream captureStream (optional double frameRequestRate);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-fromelement",timestamp:1512969039477,contents:"[Exposed=Window] interface CanvasCaptureMediaStreamTrack : MediaStreamTrack {\u000a    readonly        attribute HTMLCanvasElement canvas;\u000a    void requestFrame ();\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-handler",timestamp:1512969039670,contents:"\u000a        partial interface ServiceWorkerRegistration {\u000a          readonly attribute PaymentManager paymentManager;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-handler",timestamp:1512969039670,contents:"\u000a      [SecureContext, Exposed=(Window,Worker)]\u000a      interface PaymentManager {\u000a        [SameObject] readonly attribute PaymentInstruments instruments;\u000a        [Exposed=Window] static Promise<PermissionState> requestPermission();\u000a        attribute DOMString userHint;     \u000a      };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-handler",timestamp:1512969039670,contents:"\u000a      [SecureContext, Exposed=(Window,Worker)]\u000a      interface PaymentInstruments {\u000a          Promise<boolean>           delete(DOMString instrumentKey);\u000a          Promise<any> get(DOMString instrumentKey);\u000a          Promise<sequence<DOMString>>  keys();\u000a          Promise<boolean>           has(DOMString instrumentKey);\u000a          Promise<void>              set(DOMString instrumentKey, PaymentInstrument details);\u000a          Promise<void>           clear();\u000a      };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-handler",timestamp:1512969039670,contents:"\u000a      dictionary PaymentInstrument {\u000a        required DOMString name;\u000a        sequence<ImageObject> icons;\u000a        sequence<DOMString> enabledMethods;\u000a        object capabilities;\u000a      };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-handler",timestamp:1512969039670,contents:"\u000a      dictionary ImageObject {\u000a          required USVString src;\u000a          DOMString sizes;\u000a          DOMString type;\u000a      };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-handler",timestamp:1512969039670,contents:"\u000a        partial interface ServiceWorkerGlobalScope {\u000a          attribute EventHandler onpaymentrequest;\u000a        };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-handler",timestamp:1512969039670,contents:"\u000a        [Constructor(DOMString type, PaymentRequestEventInit eventInitDict), Exposed=ServiceWorker]\u000a        interface PaymentRequestEvent : ExtendableEvent {\u000a          readonly attribute USVString topLevelOrigin;\u000a          readonly attribute USVString paymentRequestOrigin;\u000a          readonly attribute DOMString paymentRequestId;\u000a          readonly attribute FrozenArray<PaymentMethodData> methodData;\u000a          readonly attribute object total;\u000a          readonly attribute FrozenArray<PaymentDetailsModifier> modifiers;\u000a          readonly attribute DOMString instrumentKey;\u000a          Promise<WindowClient?> openWindow(USVString url);\u000a          void respondWith(Promise<PaymentHandlerResponse>handlerResponsePromise);\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-handler",timestamp:1512969039670,contents:"\u000a            dictionary PaymentRequestEventInit : ExtendableEventInit {\u000a              USVString topLevelOrigin;\u000a              USVString paymentRequestOrigin;\u000a              DOMString paymentRequestId;\u000a              sequence<PaymentMethodData> methodData;\u000a              PaymentCurrencyAmount total;\u000a              sequence<PaymentDetailsModifier> modifiers;\u000a              DOMString instrumentKey;\u000a            };\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-handler",timestamp:1512969039670,contents:"\u000a          dictionary PaymentHandlerResponse {\u000a          DOMString methodName;\u000a          object details;\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/webusb",timestamp:1512969040506,contents:"dictionary USBDeviceFilter {\u000a  unsigned short vendorId;\u000a  unsigned short productId;\u000a  octet classCode;\u000a  octet subclassCode;\u000a  octet protocolCode;\u000a  DOMString serialNumber;\u000a};\u000a\u000adictionary USBDeviceRequestOptions {\u000a  required sequence<USBDeviceFilter> filters;\u000a};\u000a\u000ainterface USB : EventTarget {\u000a  attribute EventHandler onconnect;\u000a  attribute EventHandler ondisconnect;\u000a  Promise<sequence<USBDevice>> getDevices();\u000a  Promise<USBDevice> requestDevice(USBDeviceRequestOptions options);\u000a};\u000a\u000a[SecureContext]\u000apartial interface Navigator {\u000a  [SameObject] readonly attribute USB usb;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/webusb",timestamp:1512969040506,contents:"dictionary USBConnectionEventInit : EventInit {\u000a    required USBDevice device;\u000a};\u000a\u000a[Constructor(DOMString type, USBConnectionEventInit eventInitDict)]\u000ainterface USBConnectionEvent : Event {\u000a  [SameObject] readonly attribute USBDevice device;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/webusb",timestamp:1512969040506,contents:"interface USBDevice {\u000a  readonly attribute octet usbVersionMajor;\u000a  readonly attribute octet usbVersionMinor;\u000a  readonly attribute octet usbVersionSubminor;\u000a  readonly attribute octet deviceClass;\u000a  readonly attribute octet deviceSubclass;\u000a  readonly attribute octet deviceProtocol;\u000a  readonly attribute unsigned short vendorId;\u000a  readonly attribute unsigned short productId;\u000a  readonly attribute octet deviceVersionMajor;\u000a  readonly attribute octet deviceVersionMinor;\u000a  readonly attribute octet deviceVersionSubminor;\u000a  readonly attribute DOMString? manufacturerName;\u000a  readonly attribute DOMString? productName;\u000a  readonly attribute DOMString? serialNumber;\u000a  readonly attribute USBConfiguration? configuration;\u000a  readonly attribute FrozenArray<USBConfiguration> configurations;\u000a  readonly attribute boolean opened;\u000a  Promise<void> open();\u000a  Promise<void> close();\u000a  Promise<void> selectConfiguration(octet configurationValue);\u000a  Promise<void> claimInterface(octet interfaceNumber);\u000a  Promise<void> releaseInterface(octet interfaceNumber);\u000a  Promise<void> selectAlternateInterface(octet interfaceNumber, octet alternateSetting);\u000a  Promise<USBInTransferResult> controlTransferIn(USBControlTransferParameters setup, unsigned short length);\u000a  Promise<USBOutTransferResult> controlTransferOut(USBControlTransferParameters setup, optional BufferSource data);\u000a  Promise<void> clearHalt(USBDirection direction, octet endpointNumber);\u000a  Promise<USBInTransferResult> transferIn(octet endpointNumber, unsigned long length);\u000a  Promise<USBOutTransferResult> transferOut(octet endpointNumber, BufferSource data);\u000a  Promise<USBIsochronousInTransferResult> isochronousTransferIn(octet endpointNumber, sequence<unsigned long> packetLengths);\u000a  Promise<USBIsochronousOutTransferResult> isochronousTransferOut(octet endpointNumber, BufferSource data, sequence<unsigned long> packetLengths);\u000a  Promise<void> reset();\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/webusb",timestamp:1512969040506,contents:"enum USBRequestType {\u000a  \"standard\",\u000a  \"class\",\u000a  \"vendor\"\u000a};\u000a\u000aenum USBRecipient {\u000a  \"device\",\u000a  \"interface\",\u000a  \"endpoint\",\u000a  \"other\"\u000a};\u000a\u000aenum USBTransferStatus {\u000a  \"ok\",\u000a  \"stall\",\u000a  \"babble\"\u000a};\u000a\u000adictionary USBControlTransferParameters {\u000a  required USBRequestType requestType;\u000a  required USBRecipient recipient;\u000a  required octet request;\u000a  required unsigned short value;\u000a  required unsigned short index;\u000a};\u000a\u000a[Constructor(USBTransferStatus status, optional DataView? data)]\u000ainterface USBInTransferResult {\u000a  readonly attribute DataView? data;\u000a  readonly attribute USBTransferStatus status;\u000a};\u000a\u000a[Constructor(USBTransferStatus status, optional unsigned long bytesWritten = 0)]\u000ainterface USBOutTransferResult {\u000a  readonly attribute unsigned long bytesWritten;\u000a  readonly attribute USBTransferStatus status;\u000a};\u000a\u000a[Constructor(USBTransferStatus status, optional DataView? data)]\u000ainterface USBIsochronousInTransferPacket {\u000a  readonly attribute DataView? data;\u000a  readonly attribute USBTransferStatus status;\u000a};\u000a\u000a[Constructor(sequence<USBIsochronousInTransferPacket> packets, optional DataView? data)]\u000ainterface USBIsochronousInTransferResult {\u000a  readonly attribute DataView? data;\u000a  readonly attribute FrozenArray<USBIsochronousInTransferPacket> packets;\u000a};\u000a\u000a[Constructor(USBTransferStatus status, optional unsigned long bytesWritten = 0)]\u000ainterface USBIsochronousOutTransferPacket {\u000a  readonly attribute unsigned long bytesWritten;\u000a  readonly attribute USBTransferStatus status;\u000a};\u000a\u000a[Constructor(sequence<USBIsochronousOutTransferPacket> packets)]\u000ainterface USBIsochronousOutTransferResult {\u000a  readonly attribute FrozenArray<USBIsochronousOutTransferPacket> packets;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/webusb",timestamp:1512969040506,contents:"[Constructor(USBDevice device, octet configurationValue)]\u000ainterface USBConfiguration {\u000a  readonly attribute octet configurationValue;\u000a  readonly attribute DOMString? configurationName;\u000a  readonly attribute FrozenArray<USBInterface> interfaces;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/webusb",timestamp:1512969040506,contents:"[Constructor(USBConfiguration configuration, octet interfaceNumber)]\u000ainterface USBInterface {\u000a  readonly attribute octet interfaceNumber;\u000a  readonly attribute USBAlternateInterface alternate;\u000a  readonly attribute FrozenArray<USBAlternateInterface> alternates;\u000a  readonly attribute boolean claimed;\u000a};\u000a\u000a[Constructor(USBInterface deviceInterface, octet alternateSetting)]\u000ainterface USBAlternateInterface {\u000a  readonly attribute octet alternateSetting;\u000a  readonly attribute octet interfaceClass;\u000a  readonly attribute octet interfaceSubclass;\u000a  readonly attribute octet interfaceProtocol;\u000a  readonly attribute DOMString? interfaceName;\u000a  readonly attribute FrozenArray<USBEndpoint> endpoints;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/webusb",timestamp:1512969040506,contents:"enum USBDirection {\u000a  \"in\",\u000a  \"out\"\u000a};\u000a\u000aenum USBEndpointType {\u000a  \"bulk\",\u000a  \"interrupt\",\u000a  \"isochronous\"\u000a};\u000a\u000a[Constructor(USBAlternateInterface alternate, octet endpointNumber, USBDirection direction)]\u000ainterface USBEndpoint {\u000a  readonly attribute octet endpointNumber;\u000a  readonly attribute USBDirection direction;\u000a  readonly attribute USBEndpointType type;\u000a  readonly attribute unsigned long packetSize;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/webusb",timestamp:1512969040506,contents:"dictionary USBPermissionDescriptor : PermissionDescriptor {\u000a  sequence<USBDeviceFilter> filters;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/webusb",timestamp:1512969040506,contents:"dictionary AllowedUSBDevice {\u000a  required octet vendorId;\u000a  required octet productId;\u000a  DOMString serialNumber;\u000a};\u000a\u000adictionary USBPermissionStorage {\u000a  required sequence<AllowedUSBDevice> allowedDevices = [];\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/webusb",timestamp:1512969040506,contents:"interface USBPermissionResult : PermissionStatus {\u000a  attribute FrozenArray<USBDevice> devices;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/FileAPI",timestamp:1512969044669,contents:"[Constructor(optional sequence<BlobPart> blobParts,\u000a             optional BlobPropertyBag options),\u000a Exposed=(Window,Worker), Serializable]\u000ainterface Blob {\u000a\u000a  readonly attribute unsigned long long size;\u000a  readonly attribute DOMString type;\u000a\u000a  // slice Blob into byte-ranged chunks\u000a  Blob slice([Clamp] optional long long start,\u000a            [Clamp] optional long long end,\u000a            optional DOMString contentType);\u000a};\u000a\u000aenum EndingType { \"transparent\", \"native\" };\u000a\u000adictionary BlobPropertyBag {\u000a  DOMString type = \"\";\u000a  EndingType endings = \"transparent\";\u000a};\u000a\u000atypedef (BufferSource or Blob or USVString) BlobPart;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/FileAPI",timestamp:1512969044669,contents:"[Constructor(sequence<BlobPart> fileBits,\u000a             USVString fileName,\u000a             optional FilePropertyBag options),\u000a Exposed=(Window,Worker), Serializable]\u000ainterface File : Blob {\u000a  readonly attribute DOMString name;\u000a  readonly attribute long long lastModified;\u000a};\u000a\u000adictionary FilePropertyBag : BlobPropertyBag {\u000a  long long lastModified;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/FileAPI",timestamp:1512969044669,contents:"[Exposed=(Window,Worker), Serializable]\u000ainterface FileList {\u000a  getter File? item(unsigned long index);\u000a  readonly attribute unsigned long length;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/FileAPI",timestamp:1512969044669,contents:"[Constructor, Exposed=(Window,Worker)]\u000ainterface FileReader: EventTarget {\u000a\u000a  // async read methods\u000a  void readAsArrayBuffer(Blob blob);\u000a  void readAsBinaryString(Blob blob);\u000a  void readAsText(Blob blob, optional DOMString label);\u000a  void readAsDataURL(Blob blob);\u000a\u000a  void abort();\u000a\u000a  // states\u000a  const unsigned short EMPTY = 0;\u000a  const unsigned short LOADING = 1;\u000a  const unsigned short DONE = 2;\u000a\u000a\u000a  readonly attribute unsigned short readyState;\u000a\u000a  // File or Blob data\u000a  readonly attribute (DOMString or ArrayBuffer)? result;\u000a\u000a  readonly attribute DOMException? error;\u000a\u000a  // event handler content attributes\u000a  attribute EventHandler onloadstart;\u000a  attribute EventHandler onprogress;\u000a  attribute EventHandler onload;\u000a  attribute EventHandler onabort;\u000a  attribute EventHandler onerror;\u000a  attribute EventHandler onloadend;\u000a\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/FileAPI",timestamp:1512969044669,contents:"[Constructor, Exposed=(DedicatedWorker,SharedWorker)]\u000ainterface FileReaderSync {\u000a  // Synchronously return strings\u000a\u000a  ArrayBuffer readAsArrayBuffer(Blob blob);\u000a  DOMString readAsBinaryString(Blob blob);\u000a  DOMString readAsText(Blob blob, optional DOMString label);\u000a  DOMString readAsDataURL(Blob blob);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/FileAPI",timestamp:1512969044669,contents:"[Exposed=(Window,DedicatedWorker,SharedWorker)]\u000apartial interface URL {\u000a  static DOMString createObjectURL(Blob blob);\u000a  static void revokeObjectURL(DOMString url);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webappsec-credential-management",timestamp:1512969049690,contents:"[Exposed=Window, SecureContext]\u000ainterface Credential {\u000a  readonly attribute USVString id;\u000a  readonly attribute DOMString type;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webappsec-credential-management",timestamp:1512969049690,contents:"[NoInterfaceObject, SecureContext]\u000ainterface CredentialUserData {\u000a  readonly attribute USVString name;\u000a  readonly attribute USVString iconURL;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webappsec-credential-management",timestamp:1512969049690,contents:"partial interface Navigator {\u000a  [SecureContext, SameObject] readonly attribute CredentialsContainer credentials;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webappsec-credential-management",timestamp:1512969049690,contents:"[Exposed=Window, SecureContext]\u000ainterface CredentialsContainer {\u000a  Promise<Credential?> get(optional CredentialRequestOptions options);\u000a  Promise<Credential> store(Credential credential);\u000a  Promise<Credential?> create(optional CredentialCreationOptions options);\u000a  Promise<void> preventSilentAccess();\u000a};\u000a\u000adictionary CredentialData {\u000a  required USVString id;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webappsec-credential-management",timestamp:1512969049690,contents:"dictionary CredentialRequestOptions {\u000a  CredentialMediationRequirement mediation = \"optional\";\u000a  AbortSignal signal;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webappsec-credential-management",timestamp:1512969049690,contents:"enum CredentialMediationRequirement {\u000a  \"silent\",\u000a  \"optional\",\u000a  \"required\"\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webappsec-credential-management",timestamp:1512969049690,contents:"dictionary CredentialCreationOptions {\u000a  AbortSignal signal;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webappsec-credential-management",timestamp:1512969049690,contents:"typedef (FormData or URLSearchParams) CredentialBodyType;\u000a\u000a[Constructor(HTMLFormElement form),\u000a Constructor(PasswordCredentialData data),\u000a Exposed=Window,\u000a SecureContext]\u000ainterface PasswordCredential : Credential {\u000a  readonly attribute USVString password;\u000a};\u000aPasswordCredential implements CredentialUserData;\u000a\u000apartial dictionary CredentialRequestOptions {\u000a  boolean password = false;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webappsec-credential-management",timestamp:1512969049690,contents:"dictionary PasswordCredentialData : CredentialData {\u000a  USVString name;\u000a  USVString iconURL;\u000a  required USVString password;\u000a};\u000a\u000atypedef (PasswordCredentialData or HTMLFormElement) PasswordCredentialInit;\u000a\u000apartial dictionary CredentialCreationOptions {\u000a  PasswordCredentialInit password;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webappsec-credential-management",timestamp:1512969049690,contents:"[Constructor(FederatedCredentialInit data),\u000a Exposed=Window,\u000a SecureContext]\u000ainterface FederatedCredential : Credential {\u000a  readonly attribute USVString provider;\u000a  readonly attribute DOMString? protocol;\u000a};\u000aFederatedCredential implements CredentialUserData;\u000a\u000adictionary FederatedCredentialRequestOptions {\u000a  sequence<USVString> providers;\u000a  sequence<DOMString> protocols;\u000a};\u000a\u000apartial dictionary CredentialRequestOptions {\u000a  FederatedCredentialRequestOptions federated;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webappsec-credential-management",timestamp:1512969049690,contents:"dictionary FederatedCredentialInit : CredentialData {\u000a  USVString name;\u000a  USVString iconURL;\u000a  required USVString provider;\u000a  DOMString protocol;\u000a};\u000a\u000apartial dictionary CredentialCreationOptions {\u000a  FederatedCredentialInit federated;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-image",timestamp:1512969053603,contents:"[Exposed=Window, Constructor(MediaStreamTrack videoTrack)]\u000ainterface ImageCapture {\u000a   Promise<Blob>              takePhoto(optional PhotoSettings photoSettings);\u000a   Promise<PhotoCapabilities> getPhotoCapabilities();\u000a   Promise<PhotoSettings>     getPhotoSettings();\u000a\u000a   Promise<ImageBitmap>       grabFrame();\u000a\u000a   readonly attribute MediaStreamTrack track;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-image",timestamp:1512969053603,contents:"[Exposed=Window] interface PhotoCapabilities {\u000a  readonly attribute RedEyeReduction            redEyeReduction;\u000a  readonly attribute MediaSettingsRange         imageHeight;\u000a  readonly attribute MediaSettingsRange         imageWidth;\u000a  readonly attribute FrozenArray<FillLightMode> fillLightMode;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-image",timestamp:1512969053603,contents:"dictionary PhotoSettings {\u000a  FillLightMode   fillLightMode;\u000a  double          imageHeight;\u000a  double          imageWidth;\u000a  boolean         redEyeReduction;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-image",timestamp:1512969053603,contents:"[Exposed=Window] interface MediaSettingsRange {\u000a    readonly attribute double max;\u000a    readonly attribute double min;\u000a    readonly attribute double step;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-image",timestamp:1512969053603,contents:"enum RedEyeReduction {\u000a  \"never\",\u000a  \"always\",\u000a  \"controllable\"\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-image",timestamp:1512969053603,contents:"enum FillLightMode {\u000a  \"auto\",\u000a  \"off\",\u000a  \"flash\"\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-image",timestamp:1512969053603,contents:"partial dictionary MediaTrackSupportedConstraints {\u000a  boolean whiteBalanceMode = true;\u000a  boolean exposureMode = true;\u000a  boolean focusMode = true;\u000a  boolean pointsOfInterest = true;\u000a\u000a  boolean exposureCompensation = true;\u000a  boolean colorTemperature = true;\u000a  boolean iso = true;\u000a\u000a  boolean brightness = true;\u000a  boolean contrast = true;\u000a  boolean saturation = true;\u000a  boolean sharpness = true;\u000a  boolean focusDistance = true;\u000a  boolean zoom = true;\u000a  boolean torch = true;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-image",timestamp:1512969053603,contents:"partial dictionary MediaTrackCapabilities {\u000a  sequence<DOMString>  whiteBalanceMode;\u000a  sequence<DOMString>  exposureMode;\u000a  sequence<DOMString>  focusMode;\u000a\u000a  MediaSettingsRange   exposureCompensation;\u000a  MediaSettingsRange   colorTemperature;\u000a  MediaSettingsRange   iso;\u000a\u000a  MediaSettingsRange   brightness;\u000a  MediaSettingsRange   contrast;\u000a  MediaSettingsRange   saturation;\u000a  MediaSettingsRange   sharpness;\u000a\u000a  MediaSettingsRange   focusDistance;\u000a  MediaSettingsRange   zoom;\u000a\u000a  boolean              torch;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-image",timestamp:1512969053603,contents:"partial dictionary MediaTrackConstraintSet {\u000a  ConstrainDOMString whiteBalanceMode;\u000a  ConstrainDOMString exposureMode;\u000a  ConstrainDOMString focusMode;\u000a  ConstrainPoint2D   pointsOfInterest;\u000a\u000a  ConstrainDouble    exposureCompensation;\u000a  ConstrainDouble    colorTemperature;\u000a  ConstrainDouble    iso;\u000a\u000a  ConstrainDouble    brightness;\u000a  ConstrainDouble    contrast;\u000a  ConstrainDouble    saturation;\u000a  ConstrainDouble    sharpness;\u000a\u000a  ConstrainDouble    focusDistance;\u000a  ConstrainDouble    zoom;\u000a\u000a  ConstrainBoolean   torch;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-image",timestamp:1512969053603,contents:"partial dictionary MediaTrackSettings {\u000a  DOMString         whiteBalanceMode;\u000a  DOMString         exposureMode;\u000a  DOMString         focusMode;\u000a  sequence<Point2D> pointsOfInterest;\u000a\u000a  double            exposureCompensation;\u000a  double            colorTemperature;\u000a  double            iso;\u000a\u000a  double            brightness;\u000a  double            contrast;\u000a  double            saturation;\u000a  double            sharpness;\u000a\u000a  double            focusDistance;\u000a  double            zoom;\u000a\u000a  boolean           torch;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-image",timestamp:1512969053603,contents:"dictionary ConstrainPoint2DParameters {\u000a  sequence<Point2D> exact;\u000a  sequence<Point2D> ideal;\u000a};\u000a\u000atypedef (sequence<Point2D> or ConstrainPoint2DParameters) ConstrainPoint2D;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-image",timestamp:1512969053603,contents:"enum MeteringMode {\u000a  \"none\",\u000a  \"manual\",\u000a  \"single-shot\",\u000a  \"continuous\"\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-image",timestamp:1512969053603,contents:"dictionary Point2D {\u000a  double x = 0.0;\u000a  double y = 0.0;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/background-fetch",timestamp:1512969056634,contents:"partial interface ServiceWorkerGlobalScope {\u000a  attribute EventHandler onbackgroundfetched;\u000a  attribute EventHandler onbackgroundfetchfail;\u000a  attribute EventHandler onbackgroundfetchabort;\u000a  attribute EventHandler onbackgroundfetchclick;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/background-fetch",timestamp:1512969056634,contents:"partial interface ServiceWorkerRegistration {\u000a  readonly attribute BackgroundFetchManager backgroundFetch;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/background-fetch",timestamp:1512969056634,contents:"[Exposed=(Window,Worker)]\u000ainterface BackgroundFetchManager {\u000a  Promise<BackgroundFetchRegistration> fetch(DOMString id, (RequestInfo or sequence<RequestInfo>) requests, optional BackgroundFetchOptions options);\u000a  Promise<BackgroundFetchRegistration?> get(DOMString id);\u000a  Promise<FrozenArray<DOMString>> getIds();\u000a  // TODO: in future this should become an async iterator for BackgroundFetchRegistration objects\u000a};\u000a\u000adictionary BackgroundFetchOptions {\u000a  sequence<IconDefinition> icons = [];\u000a  DOMString title = \"\";\u000a  unsigned long long downloadTotal = 0;\u000a};\u000a\u000a// This is taken from https://w3c.github.io/manifest/#icons-member.\u000a// This definition should probably be moved somewhere more general.\u000adictionary IconDefinition {\u000a  DOMString src;\u000a  DOMString sizes = \"\";\u000a  DOMString type = \"\";\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/background-fetch",timestamp:1512969056634,contents:"[Exposed=(Window,Worker)]\u000ainterface BackgroundFetchRegistration : EventTarget {\u000a  readonly attribute DOMString id;\u000a  readonly attribute unsigned long long uploadTotal;\u000a  readonly attribute unsigned long long uploaded;\u000a  readonly attribute unsigned long long downloadTotal;\u000a  readonly attribute unsigned long long downloaded;\u000a  readonly attribute BackgroundFetchActiveFetches activeFetches;\u000a\u000a  attribute EventHandler onprogress;\u000a\u000a  Promise<boolean> abort();\u000a};\u000a\u000a[Exposed=(Window,Worker)]\u000ainterface BackgroundFetchFetch {\u000a  readonly attribute Request request;\u000a};\u000a\u000a[Exposed=(Window,Worker)]\u000ainterface BackgroundFetchActiveFetches {\u000a  Promise<BackgroundFetchActiveFetch> match(RequestInfo request);\u000a  Promise<FrozenArray<BackgroundFetchActiveFetch>> values();\u000a};\u000a\u000a[Exposed=(Window,Worker)]\u000ainterface BackgroundFetchActiveFetch : BackgroundFetchFetch {\u000a  readonly attribute Promise<Response> responseReady;\u000a  // In future this will include a fetch observer\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/background-fetch",timestamp:1512969056634,contents:"[Constructor(DOMString type, BackgroundFetchEventInit init), Exposed=ServiceWorker]\u000ainterface BackgroundFetchEvent : ExtendableEvent {\u000a  readonly attribute DOMString id;\u000a};\u000a\u000adictionary BackgroundFetchEventInit : ExtendableEventInit {\u000a  required DOMString id;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/background-fetch",timestamp:1512969056634,contents:"[Constructor(DOMString type, BackgroundFetchSettledEventInit init), Exposed=ServiceWorker]\u000ainterface BackgroundFetchSettledEvent : BackgroundFetchEvent {\u000a  readonly attribute BackgroundFetchSettledFetches fetches;\u000a};\u000a\u000adictionary BackgroundFetchSettledEventInit : BackgroundFetchEventInit {\u000a  required BackgroundFetchSettledFetches fetches;\u000a};\u000a\u000a[Exposed=ServiceWorker]\u000ainterface BackgroundFetchSettledFetches {\u000a  Promise<BackgroundFetchSettledFetch> match(RequestInfo request);\u000a  Promise<FrozenArray<BackgroundFetchSettledFetch>> values();\u000a};\u000a\u000a[Exposed=ServiceWorker]\u000ainterface BackgroundFetchSettledFetch : BackgroundFetchFetch {\u000a  readonly attribute Response? response;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/background-fetch",timestamp:1512969056634,contents:"[Constructor(DOMString type, BackgroundFetchSettledEventInit init), Exposed=ServiceWorker]\u000ainterface BackgroundFetchUpdateEvent : BackgroundFetchSettledEvent {\u000a  Promise<void> updateUI(DOMString title);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/background-fetch",timestamp:1512969056634,contents:"[Constructor(DOMString type, BackgroundFetchClickEventInit init), Exposed=ServiceWorker]\u000ainterface BackgroundFetchClickEvent : BackgroundFetchEvent {\u000a  readonly attribute BackgroundFetchState state;\u000a};\u000a\u000adictionary BackgroundFetchClickEventInit : BackgroundFetchEventInit {\u000a  required BackgroundFetchState state;\u000a};\u000a\u000aenum BackgroundFetchState { \"pending\", \"succeeded\", \"failed\" };\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webappsec-referrer-policy",timestamp:1512969058868,contents:"enum ReferrerPolicy {\u000a  \"\",\u000a  \"no-referrer\",\u000a  \"no-referrer-when-downgrade\",\u000a  \"same-origin\",\u000a  \"origin\",\u000a  \"strict-origin\",\u000a  \"origin-when-cross-origin\",\u000a  \"strict-origin-when-cross-origin\",\u000a  \"unsafe-url\"\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/gamepad",timestamp:1512969060181,contents:"\u000a        interface Gamepad {\u000a          readonly attribute DOMString id;\u000a          readonly attribute long index;\u000a          readonly attribute boolean connected;\u000a          readonly attribute DOMHighResTimeStamp timestamp;\u000a          readonly attribute GamepadMappingType mapping;\u000a          readonly attribute FrozenArray<double> axes;\u000a          readonly attribute FrozenArray<GamepadButton> buttons;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/gamepad",timestamp:1512969060181,contents:"\u000a        interface GamepadButton {\u000a          readonly attribute boolean pressed;\u000a          readonly attribute boolean touched;\u000a          readonly attribute double value;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/gamepad",timestamp:1512969060181,contents:"\u000a        enum GamepadMappingType {\u000a          \"\",\u000a          \"standard\",\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/gamepad",timestamp:1512969060181,contents:"\u000a        partial interface Navigator {\u000a          sequence<Gamepad?> getGamepads();\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/gamepad",timestamp:1512969060181,contents:"\u000a        [Constructor(GamepadEventInit eventInitDict)]\u000a        interface GamepadEvent: Event {\u000a          readonly attribute Gamepad gamepad;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/gamepad",timestamp:1512969060181,contents:"\u000a        dictionary GamepadEventInit: EventInit {\u000a          required Gamepad gamepad;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/user-timing",timestamp:1512969060343,contents:"\u000d\u000apartial interface Performance {\u000d\u000a    void mark(DOMString markName);\u000d\u000a    void clearMarks(optional DOMString markName);\u000d\u000a\u000d\u000a    void measure(DOMString measureName, optional DOMString startMark, optional DOMString endMark);\u000d\u000a    void clearMeasures(optional DOMString measureName);\u000d\u000a};\u000d\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/user-timing",timestamp:1512969060343,contents:"\u000d\u000a  [Exposed=(Window,Worker)]\u000d\u000a  interface PerformanceMark : PerformanceEntry {\u000d\u000a  };\u000d\u000a    "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/user-timing",timestamp:1512969060343,contents:"\u000d\u000a  [Exposed=(Window,Worker)]\u000d\u000a  interface PerformanceMeasure : PerformanceEntry {\u000d\u000a  };\u000d\u000a    "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/web-nfc",timestamp:1512969060479,contents:"\u000a      dictionary NFCMessage {\u000a        sequence<NFCRecord> records;\u000a        USVString url;\u000a      };\u000a    "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/web-nfc",timestamp:1512969060479,contents:"\u000a      typedef (DOMString or unrestricted double or ArrayBuffer or Dictionary) NFCRecordData;\u000a\u000a      dictionary NFCRecord {\u000a        NFCRecordType recordType;\u000a        USVString mediaType;\u000a        NFCRecordData data;\u000a      };\u000a    "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/web-nfc",timestamp:1512969060479,contents:"\u000a        enum NFCRecordType {\u000a          \"empty\",\u000a          \"text\",\u000a          \"url\",\u000a          \"json\",\u000a          \"opaque\"\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/web-nfc",timestamp:1512969060479,contents:"\u000a    partial interface Navigator {\u000a      readonly attribute NFC nfc;\u000a    };\u000a  "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/web-nfc",timestamp:1512969060479,contents:"\u000a    typedef (DOMString or ArrayBuffer or NFCMessage) NFCPushMessage;\u000a\u000a    interface NFC {\u000a      Promise<void> push(NFCPushMessage message, optional NFCPushOptions options);\u000a      Promise<void> cancelPush(optional NFCPushTarget target=\"any\");\u000a      Promise<long> watch(MessageCallback callback, optional NFCWatchOptions options);\u000a      Promise<void> cancelWatch(optional long id);\u000a    };\u000a\u000a    callback MessageCallback = void (NFCMessage message);\u000a  "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/web-nfc",timestamp:1512969060479,contents:"\u000a      dictionary NFCPushOptions {\u000a        NFCPushTarget target = \"any\";\u000a        unrestricted double timeout = Infinity;\u000a        boolean ignoreRead = true;\u000a      };\u000a    "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/web-nfc",timestamp:1512969060479,contents:"\u000a      enum NFCPushTarget {\u000a        \"tag\",\u000a        \"peer\",\u000a        \"any\"\u000a      };\u000a    "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/web-nfc",timestamp:1512969060479,contents:"\u000a        dictionary NFCWatchOptions {\u000a          USVString url = \"\";\u000a          NFCRecordType? recordType;\u000a          USVString mediaType = \"\";\u000a          NFCWatchMode mode = \"web-nfc-only\";\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/web-nfc",timestamp:1512969060479,contents:"\u000a      enum NFCWatchMode {\u000a        \"web-nfc-only\",\u000a        \"any\"\u000a      };\u000a    "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/mst-content-hint",timestamp:1512969061774,contents:"\u000a    partial interface MediaStreamTrack {\u000a      attribute DOMString contentHint;\u000a    };\u000a    "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-request",timestamp:1512969061853,contents:"\u000a        [Constructor(sequence<PaymentMethodData> methodData, PaymentDetailsInit details, optional PaymentOptions options),\u000a        SecureContext, Exposed=Window]\u000a        interface PaymentRequest : EventTarget {\u000a          Promise<PaymentResponse> show();\u000a          Promise<void> abort();\u000a          Promise<boolean> canMakePayment();\u000a\u000a          readonly attribute DOMString id;\u000a          readonly attribute PaymentAddress? shippingAddress;\u000a          readonly attribute DOMString? shippingOption;\u000a          readonly attribute PaymentShippingType? shippingType;\u000a\u000a          attribute EventHandler onshippingaddresschange;\u000a\u000a          attribute EventHandler onshippingoptionchange;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-request",timestamp:1512969061853,contents:"\u000a        dictionary PaymentMethodData {\u000a          required DOMString supportedMethods;\u000a          object data;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-request",timestamp:1512969061853,contents:"\u000a        dictionary PaymentCurrencyAmount {\u000a          required DOMString currency;\u000a          required DOMString value;\u000a          // Note: currencySystem is \"at risk\" of being removed!\u000a          DOMString currencySystem = \"urn:iso:std:iso:4217\";\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-request",timestamp:1512969061853,contents:"\u000a        dictionary PaymentDetailsBase {\u000a          sequence<PaymentItem> displayItems;\u000a          sequence<PaymentShippingOption> shippingOptions;\u000a          sequence<PaymentDetailsModifier> modifiers;\u000a        };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-request",timestamp:1512969061853,contents:"\u000a          dictionary PaymentDetailsInit : PaymentDetailsBase {\u000a            DOMString id;\u000a            required PaymentItem total;\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-request",timestamp:1512969061853,contents:"\u000a          dictionary PaymentDetailsUpdate : PaymentDetailsBase {\u000a            DOMString error;\u000a            PaymentItem total;\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-request",timestamp:1512969061853,contents:"\u000a        dictionary PaymentDetailsModifier {\u000a          required DOMString supportedMethods;\u000a          PaymentItem total;\u000a          sequence<PaymentItem> additionalDisplayItems;\u000a          object data;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-request",timestamp:1512969061853,contents:"\u000a        enum PaymentShippingType {\u000a          \"shipping\",\u000a          \"delivery\",\u000a          \"pickup\"\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-request",timestamp:1512969061853,contents:"\u000a        dictionary PaymentOptions {\u000a          boolean requestPayerName = false;\u000a          boolean requestPayerEmail = false;\u000a          boolean requestPayerPhone = false;\u000a          boolean requestShipping = false;\u000a          PaymentShippingType shippingType = \"shipping\";\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-request",timestamp:1512969061853,contents:"\u000a        dictionary PaymentItem {\u000a          required DOMString label;\u000a          required PaymentCurrencyAmount amount;\u000a          boolean pending = false;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-request",timestamp:1512969061853,contents:"\u000a        [SecureContext, Exposed=Window]\u000a        interface PaymentAddress {\u000a          [Default] object toJSON();\u000a          readonly attribute DOMString country;\u000a          readonly attribute FrozenArray<DOMString> addressLine;\u000a          readonly attribute DOMString region;\u000a          readonly attribute DOMString city;\u000a          readonly attribute DOMString dependentLocality;\u000a          readonly attribute DOMString postalCode;\u000a          readonly attribute DOMString sortingCode;\u000a          readonly attribute DOMString languageCode;\u000a          readonly attribute DOMString organization;\u000a          readonly attribute DOMString recipient;\u000a          readonly attribute DOMString phone;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-request",timestamp:1512969061853,contents:"\u000a        dictionary PaymentShippingOption {\u000a          required DOMString id;\u000a          required DOMString label;\u000a          required PaymentCurrencyAmount amount;\u000a          boolean selected = false;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-request",timestamp:1512969061853,contents:"\u000a        enum PaymentComplete {\u000a          \"fail\",\u000a          \"success\",\u000a          \"unknown\"\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-request",timestamp:1512969061853,contents:"\u000a        [SecureContext, Exposed=Window]\u000a        interface PaymentResponse {\u000a          [Default] object toJSON();\u000a\u000a          readonly attribute DOMString requestId;\u000a          readonly attribute DOMString methodName;\u000a          readonly attribute object details;\u000a          readonly attribute PaymentAddress? shippingAddress;\u000a          readonly attribute DOMString? shippingOption;\u000a          readonly attribute DOMString? payerName;\u000a          readonly attribute DOMString? payerEmail;\u000a          readonly attribute DOMString? payerPhone;\u000a\u000a          Promise<void> complete(optional PaymentComplete result = \"unknown\");\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-request",timestamp:1512969061853,contents:"\u000a          [Constructor(DOMString type, optional PaymentRequestUpdateEventInit eventInitDict), SecureContext, Exposed=Window]\u000a          interface PaymentRequestUpdateEvent : Event {\u000a            void updateWith(Promise<PaymentDetailsUpdate> detailsPromise);\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/payment-request",timestamp:1512969061853,contents:"\u000a            dictionary PaymentRequestUpdateEventInit : EventInit {};\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/orientation-sensor",timestamp:1512969063219,contents:"typedef (Float32Array or Float64Array or DOMMatrix) RotationMatrixType;\u000a\u000a[SecureContext, Exposed=Window]\u000ainterface OrientationSensor : Sensor {\u000a  readonly attribute FrozenArray<double>? quaternion;\u000a  void populateMatrix(RotationMatrixType targetMatrix);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/orientation-sensor",timestamp:1512969063219,contents:"[Constructor(optional SensorOptions sensorOptions), SecureContext, Exposed=Window]\u000ainterface AbsoluteOrientationSensor : OrientationSensor {\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/orientation-sensor",timestamp:1512969063219,contents:"[Constructor(optional SensorOptions sensorOptions), SecureContext, Exposed=Window]\u000ainterface RelativeOrientationSensor : OrientationSensor {\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/remote-playback",timestamp:1512969064154,contents:"\u000a          [Exposed=Window]\u000a          interface RemotePlayback : EventTarget {\u000a            Promise<long> watchAvailability(RemotePlaybackAvailabilityCallback callback);\u000a            Promise<void> cancelWatchAvailability(optional long id);\u000a\u000a            readonly attribute RemotePlaybackState state;\u000a\u000a            attribute EventHandler onconnecting;\u000a            attribute EventHandler onconnect;\u000a            attribute EventHandler ondisconnect;\u000a\u000a            Promise<void> prompt();\u000a          };\u000a\u000a          enum RemotePlaybackState {\u000a            \"connecting\",\u000a            \"connected\",\u000a            \"disconnected\"\u000a          };\u000a\u000a          callback RemotePlaybackAvailabilityCallback = void(boolean available);\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/remote-playback",timestamp:1512969064154,contents:"\u000a          partial interface HTMLMediaElement {\u000a            [SameObject] readonly attribute RemotePlayback remote;\u000a\u000a            [CEReactions] attribute boolean disableRemotePlayback;\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/gyroscope",timestamp:1512969064768,contents:"[Constructor(optional SensorOptions sensorOptions), SecureContext, Exposed=Window]\u000ainterface Gyroscope : Sensor {\u000a  readonly attribute double? x;\u000a  readonly attribute double? y;\u000a  readonly attribute double? z;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/vibration",timestamp:1512969065297,contents:"\u000a        typedef (unsigned long or sequence<unsigned long>) VibratePattern;\u000a\u000a        partial interface Navigator {\u000a            boolean vibrate (VibratePattern pattern);\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/accelerometer",timestamp:1512969065399,contents:"[Constructor(optional SensorOptions options), SecureContext, Exposed=Window]\u000ainterface Accelerometer : Sensor {\u000a  readonly attribute double? x;\u000a  readonly attribute double? y;\u000a  readonly attribute double? z;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/accelerometer",timestamp:1512969065399,contents:"[Constructor(optional SensorOptions options), SecureContext, Exposed=Window]\u000ainterface LinearAccelerationSensor : Accelerometer {\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/accelerometer",timestamp:1512969065399,contents:"[Constructor(optional SensorOptions options), SecureContext, Exposed=Window]\u000ainterface GravitySensor : Accelerometer {\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.khronos.org/registry/webgl/specs/latest/1.0",timestamp:1512969066224,contents:"\u000atypedef unsigned long  GLenum;\u000atypedef boolean        GLboolean;\u000atypedef unsigned long  GLbitfield;\u000atypedef byte           GLbyte;         /* 'byte' should be a signed 8 bit type. */\u000atypedef short          GLshort;\u000atypedef long           GLint;\u000atypedef long           GLsizei;\u000atypedef long long      GLintptr;\u000atypedef long long      GLsizeiptr;\u000a// Ideally the typedef below would use 'unsigned byte', but that doesn't currently exist in Web IDL.\u000atypedef octet          GLubyte;        /* 'octet' should be an unsigned 8 bit type. */\u000atypedef unsigned short GLushort;\u000atypedef unsigned long  GLuint;\u000atypedef unrestricted float GLfloat;\u000atypedef unrestricted float GLclampf;\u000a\u000a// The power preference settings are documented in the WebGLContextAttributes\u000a// section of the specification.\u000aenum WebGLPowerPreference { \"default\", \"low-power\", \"high-performance\" };\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.khronos.org/registry/webgl/specs/latest/1.0",timestamp:1512969066224,contents:"dictionary WebGLContextAttributes {\u000a    GLboolean alpha = true;\u000a    GLboolean depth = true;\u000a    GLboolean stencil = false;\u000a    GLboolean antialias = true;\u000a    GLboolean premultipliedAlpha = true;\u000a    GLboolean preserveDrawingBuffer = false;\u000a    WebGLPowerPreference powerPreference = \"default\";\u000a    GLboolean failIfMajorPerformanceCaveat = false;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.khronos.org/registry/webgl/specs/latest/1.0",timestamp:1512969066224,contents:"interface WebGLObject {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.khronos.org/registry/webgl/specs/latest/1.0",timestamp:1512969066224,contents:"interface WebGLBuffer : WebGLObject {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.khronos.org/registry/webgl/specs/latest/1.0",timestamp:1512969066224,contents:"interface WebGLFramebuffer : WebGLObject {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.khronos.org/registry/webgl/specs/latest/1.0",timestamp:1512969066224,contents:"interface WebGLProgram : WebGLObject {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.khronos.org/registry/webgl/specs/latest/1.0",timestamp:1512969066224,contents:"interface WebGLRenderbuffer : WebGLObject {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.khronos.org/registry/webgl/specs/latest/1.0",timestamp:1512969066224,contents:"interface WebGLShader : WebGLObject {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.khronos.org/registry/webgl/specs/latest/1.0",timestamp:1512969066224,contents:"interface WebGLTexture : WebGLObject {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.khronos.org/registry/webgl/specs/latest/1.0",timestamp:1512969066224,contents:"interface WebGLUniformLocation {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.khronos.org/registry/webgl/specs/latest/1.0",timestamp:1512969066224,contents:"interface WebGLActiveInfo {\u000a    readonly attribute GLint size;\u000a    readonly attribute GLenum type;\u000a    readonly attribute DOMString name;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.khronos.org/registry/webgl/specs/latest/1.0",timestamp:1512969066224,contents:"interface WebGLShaderPrecisionFormat {\u000a    readonly attribute GLint rangeMin;\u000a    readonly attribute GLint rangeMax;\u000a    readonly attribute GLint precision;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.khronos.org/registry/webgl/specs/latest/1.0",timestamp:1512969066224,contents:"\u000atypedef (ImageBitmap or\u000a         ImageData or\u000a         HTMLImageElement or\u000a         HTMLCanvasElement or\u000a         HTMLVideoElement) TexImageSource;\u000a\u000atypedef ([AllowShared] Float32Array or sequence<GLfloat>) Float32List;\u000atypedef ([AllowShared] Int32Array or sequence<GLint>) Int32List;\u000a\u000a[NoInterfaceObject]\u000ainterface WebGLRenderingContextBase\u000a{\u000a\u000a    /* ClearBufferMask */\u000a    const GLenum DEPTH_BUFFER_BIT               = 0x00000100;\u000a    const GLenum STENCIL_BUFFER_BIT             = 0x00000400;\u000a    const GLenum COLOR_BUFFER_BIT               = 0x00004000;\u000a\u000a    /* BeginMode */\u000a    const GLenum POINTS                         = 0x0000;\u000a    const GLenum LINES                          = 0x0001;\u000a    const GLenum LINE_LOOP                      = 0x0002;\u000a    const GLenum LINE_STRIP                     = 0x0003;\u000a    const GLenum TRIANGLES                      = 0x0004;\u000a    const GLenum TRIANGLE_STRIP                 = 0x0005;\u000a    const GLenum TRIANGLE_FAN                   = 0x0006;\u000a\u000a    /* AlphaFunction (not supported in ES20) */\u000a    /*      NEVER */\u000a    /*      LESS */\u000a    /*      EQUAL */\u000a    /*      LEQUAL */\u000a    /*      GREATER */\u000a    /*      NOTEQUAL */\u000a    /*      GEQUAL */\u000a    /*      ALWAYS */\u000a\u000a    /* BlendingFactorDest */\u000a    const GLenum ZERO                           = 0;\u000a    const GLenum ONE                            = 1;\u000a    const GLenum SRC_COLOR                      = 0x0300;\u000a    const GLenum ONE_MINUS_SRC_COLOR            = 0x0301;\u000a    const GLenum SRC_ALPHA                      = 0x0302;\u000a    const GLenum ONE_MINUS_SRC_ALPHA            = 0x0303;\u000a    const GLenum DST_ALPHA                      = 0x0304;\u000a    const GLenum ONE_MINUS_DST_ALPHA            = 0x0305;\u000a\u000a    /* BlendingFactorSrc */\u000a    /*      ZERO */\u000a    /*      ONE */\u000a    const GLenum DST_COLOR                      = 0x0306;\u000a    const GLenum ONE_MINUS_DST_COLOR            = 0x0307;\u000a    const GLenum SRC_ALPHA_SATURATE             = 0x0308;\u000a    /*      SRC_ALPHA */\u000a    /*      ONE_MINUS_SRC_ALPHA */\u000a    /*      DST_ALPHA */\u000a    /*      ONE_MINUS_DST_ALPHA */\u000a\u000a    /* BlendEquationSeparate */\u000a    const GLenum FUNC_ADD                       = 0x8006;\u000a    const GLenum BLEND_EQUATION                 = 0x8009;\u000a    const GLenum BLEND_EQUATION_RGB             = 0x8009;   /* same as BLEND_EQUATION */\u000a    const GLenum BLEND_EQUATION_ALPHA           = 0x883D;\u000a\u000a    /* BlendSubtract */\u000a    const GLenum FUNC_SUBTRACT                  = 0x800A;\u000a    const GLenum FUNC_REVERSE_SUBTRACT          = 0x800B;\u000a\u000a    /* Separate Blend Functions */\u000a    const GLenum BLEND_DST_RGB                  = 0x80C8;\u000a    const GLenum BLEND_SRC_RGB                  = 0x80C9;\u000a    const GLenum BLEND_DST_ALPHA                = 0x80CA;\u000a    const GLenum BLEND_SRC_ALPHA                = 0x80CB;\u000a    const GLenum CONSTANT_COLOR                 = 0x8001;\u000a    const GLenum ONE_MINUS_CONSTANT_COLOR       = 0x8002;\u000a    const GLenum CONSTANT_ALPHA                 = 0x8003;\u000a    const GLenum ONE_MINUS_CONSTANT_ALPHA       = 0x8004;\u000a    const GLenum BLEND_COLOR                    = 0x8005;\u000a\u000a    /* Buffer Objects */\u000a    const GLenum ARRAY_BUFFER                   = 0x8892;\u000a    const GLenum ELEMENT_ARRAY_BUFFER           = 0x8893;\u000a    const GLenum ARRAY_BUFFER_BINDING           = 0x8894;\u000a    const GLenum ELEMENT_ARRAY_BUFFER_BINDING   = 0x8895;\u000a\u000a    const GLenum STREAM_DRAW                    = 0x88E0;\u000a    const GLenum STATIC_DRAW                    = 0x88E4;\u000a    const GLenum DYNAMIC_DRAW                   = 0x88E8;\u000a\u000a    const GLenum BUFFER_SIZE                    = 0x8764;\u000a    const GLenum BUFFER_USAGE                   = 0x8765;\u000a\u000a    const GLenum CURRENT_VERTEX_ATTRIB          = 0x8626;\u000a\u000a    /* CullFaceMode */\u000a    const GLenum FRONT                          = 0x0404;\u000a    const GLenum BACK                           = 0x0405;\u000a    const GLenum FRONT_AND_BACK                 = 0x0408;\u000a\u000a    /* DepthFunction */\u000a    /*      NEVER */\u000a    /*      LESS */\u000a    /*      EQUAL */\u000a    /*      LEQUAL */\u000a    /*      GREATER */\u000a    /*      NOTEQUAL */\u000a    /*      GEQUAL */\u000a    /*      ALWAYS */\u000a\u000a    /* EnableCap */\u000a    /* TEXTURE_2D */\u000a    const GLenum CULL_FACE                      = 0x0B44;\u000a    const GLenum BLEND                          = 0x0BE2;\u000a    const GLenum DITHER                         = 0x0BD0;\u000a    const GLenum STENCIL_TEST                   = 0x0B90;\u000a    const GLenum DEPTH_TEST                     = 0x0B71;\u000a    const GLenum SCISSOR_TEST                   = 0x0C11;\u000a    const GLenum POLYGON_OFFSET_FILL            = 0x8037;\u000a    const GLenum SAMPLE_ALPHA_TO_COVERAGE       = 0x809E;\u000a    const GLenum SAMPLE_COVERAGE                = 0x80A0;\u000a\u000a    /* ErrorCode */\u000a    const GLenum NO_ERROR                       = 0;\u000a    const GLenum INVALID_ENUM                   = 0x0500;\u000a    const GLenum INVALID_VALUE                  = 0x0501;\u000a    const GLenum INVALID_OPERATION              = 0x0502;\u000a    const GLenum OUT_OF_MEMORY                  = 0x0505;\u000a\u000a    /* FrontFaceDirection */\u000a    const GLenum CW                             = 0x0900;\u000a    const GLenum CCW                            = 0x0901;\u000a\u000a    /* GetPName */\u000a    const GLenum LINE_WIDTH                     = 0x0B21;\u000a    const GLenum ALIASED_POINT_SIZE_RANGE       = 0x846D;\u000a    const GLenum ALIASED_LINE_WIDTH_RANGE       = 0x846E;\u000a    const GLenum CULL_FACE_MODE                 = 0x0B45;\u000a    const GLenum FRONT_FACE                     = 0x0B46;\u000a    const GLenum DEPTH_RANGE                    = 0x0B70;\u000a    const GLenum DEPTH_WRITEMASK                = 0x0B72;\u000a    const GLenum DEPTH_CLEAR_VALUE              = 0x0B73;\u000a    const GLenum DEPTH_FUNC                     = 0x0B74;\u000a    const GLenum STENCIL_CLEAR_VALUE            = 0x0B91;\u000a    const GLenum STENCIL_FUNC                   = 0x0B92;\u000a    const GLenum STENCIL_FAIL                   = 0x0B94;\u000a    const GLenum STENCIL_PASS_DEPTH_FAIL        = 0x0B95;\u000a    const GLenum STENCIL_PASS_DEPTH_PASS        = 0x0B96;\u000a    const GLenum STENCIL_REF                    = 0x0B97;\u000a    const GLenum STENCIL_VALUE_MASK             = 0x0B93;\u000a    const GLenum STENCIL_WRITEMASK              = 0x0B98;\u000a    const GLenum STENCIL_BACK_FUNC              = 0x8800;\u000a    const GLenum STENCIL_BACK_FAIL              = 0x8801;\u000a    const GLenum STENCIL_BACK_PASS_DEPTH_FAIL   = 0x8802;\u000a    const GLenum STENCIL_BACK_PASS_DEPTH_PASS   = 0x8803;\u000a    const GLenum STENCIL_BACK_REF               = 0x8CA3;\u000a    const GLenum STENCIL_BACK_VALUE_MASK        = 0x8CA4;\u000a    const GLenum STENCIL_BACK_WRITEMASK         = 0x8CA5;\u000a    const GLenum VIEWPORT                       = 0x0BA2;\u000a    const GLenum SCISSOR_BOX                    = 0x0C10;\u000a    /*      SCISSOR_TEST */\u000a    const GLenum COLOR_CLEAR_VALUE              = 0x0C22;\u000a    const GLenum COLOR_WRITEMASK                = 0x0C23;\u000a    const GLenum UNPACK_ALIGNMENT               = 0x0CF5;\u000a    const GLenum PACK_ALIGNMENT                 = 0x0D05;\u000a    const GLenum MAX_TEXTURE_SIZE               = 0x0D33;\u000a    const GLenum MAX_VIEWPORT_DIMS              = 0x0D3A;\u000a    const GLenum SUBPIXEL_BITS                  = 0x0D50;\u000a    const GLenum RED_BITS                       = 0x0D52;\u000a    const GLenum GREEN_BITS                     = 0x0D53;\u000a    const GLenum BLUE_BITS                      = 0x0D54;\u000a    const GLenum ALPHA_BITS                     = 0x0D55;\u000a    const GLenum DEPTH_BITS                     = 0x0D56;\u000a    const GLenum STENCIL_BITS                   = 0x0D57;\u000a    const GLenum POLYGON_OFFSET_UNITS           = 0x2A00;\u000a    /*      POLYGON_OFFSET_FILL */\u000a    const GLenum POLYGON_OFFSET_FACTOR          = 0x8038;\u000a    const GLenum TEXTURE_BINDING_2D             = 0x8069;\u000a    const GLenum SAMPLE_BUFFERS                 = 0x80A8;\u000a    const GLenum SAMPLES                        = 0x80A9;\u000a    const GLenum SAMPLE_COVERAGE_VALUE          = 0x80AA;\u000a    const GLenum SAMPLE_COVERAGE_INVERT         = 0x80AB;\u000a\u000a    /* GetTextureParameter */\u000a    /*      TEXTURE_MAG_FILTER */\u000a    /*      TEXTURE_MIN_FILTER */\u000a    /*      TEXTURE_WRAP_S */\u000a    /*      TEXTURE_WRAP_T */\u000a\u000a    const GLenum COMPRESSED_TEXTURE_FORMATS     = 0x86A3;\u000a\u000a    /* HintMode */\u000a    const GLenum DONT_CARE                      = 0x1100;\u000a    const GLenum FASTEST                        = 0x1101;\u000a    const GLenum NICEST                         = 0x1102;\u000a\u000a    /* HintTarget */\u000a    const GLenum GENERATE_MIPMAP_HINT            = 0x8192;\u000a\u000a    /* DataType */\u000a    const GLenum BYTE                           = 0x1400;\u000a    const GLenum UNSIGNED_BYTE                  = 0x1401;\u000a    const GLenum SHORT                          = 0x1402;\u000a    const GLenum UNSIGNED_SHORT                 = 0x1403;\u000a    const GLenum INT                            = 0x1404;\u000a    const GLenum UNSIGNED_INT                   = 0x1405;\u000a    const GLenum FLOAT                          = 0x1406;\u000a\u000a    /* PixelFormat */\u000a    const GLenum DEPTH_COMPONENT                = 0x1902;\u000a    const GLenum ALPHA                          = 0x1906;\u000a    const GLenum RGB                            = 0x1907;\u000a    const GLenum RGBA                           = 0x1908;\u000a    const GLenum LUMINANCE                      = 0x1909;\u000a    const GLenum LUMINANCE_ALPHA                = 0x190A;\u000a\u000a    /* PixelType */\u000a    /*      UNSIGNED_BYTE */\u000a    const GLenum UNSIGNED_SHORT_4_4_4_4         = 0x8033;\u000a    const GLenum UNSIGNED_SHORT_5_5_5_1         = 0x8034;\u000a    const GLenum UNSIGNED_SHORT_5_6_5           = 0x8363;\u000a\u000a    /* Shaders */\u000a    const GLenum FRAGMENT_SHADER                  = 0x8B30;\u000a    const GLenum VERTEX_SHADER                    = 0x8B31;\u000a    const GLenum MAX_VERTEX_ATTRIBS               = 0x8869;\u000a    const GLenum MAX_VERTEX_UNIFORM_VECTORS       = 0x8DFB;\u000a    const GLenum MAX_VARYING_VECTORS              = 0x8DFC;\u000a    const GLenum MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;\u000a    const GLenum MAX_VERTEX_TEXTURE_IMAGE_UNITS   = 0x8B4C;\u000a    const GLenum MAX_TEXTURE_IMAGE_UNITS          = 0x8872;\u000a    const GLenum MAX_FRAGMENT_UNIFORM_VECTORS     = 0x8DFD;\u000a    const GLenum SHADER_TYPE                      = 0x8B4F;\u000a    const GLenum DELETE_STATUS                    = 0x8B80;\u000a    const GLenum LINK_STATUS                      = 0x8B82;\u000a    const GLenum VALIDATE_STATUS                  = 0x8B83;\u000a    const GLenum ATTACHED_SHADERS                 = 0x8B85;\u000a    const GLenum ACTIVE_UNIFORMS                  = 0x8B86;\u000a    const GLenum ACTIVE_ATTRIBUTES                = 0x8B89;\u000a    const GLenum SHADING_LANGUAGE_VERSION         = 0x8B8C;\u000a    const GLenum CURRENT_PROGRAM                  = 0x8B8D;\u000a\u000a    /* StencilFunction */\u000a    const GLenum NEVER                          = 0x0200;\u000a    const GLenum LESS                           = 0x0201;\u000a    const GLenum EQUAL                          = 0x0202;\u000a    const GLenum LEQUAL                         = 0x0203;\u000a    const GLenum GREATER                        = 0x0204;\u000a    const GLenum NOTEQUAL                       = 0x0205;\u000a    const GLenum GEQUAL                         = 0x0206;\u000a    const GLenum ALWAYS                         = 0x0207;\u000a\u000a    /* StencilOp */\u000a    /*      ZERO */\u000a    const GLenum KEEP                           = 0x1E00;\u000a    const GLenum REPLACE                        = 0x1E01;\u000a    const GLenum INCR                           = 0x1E02;\u000a    const GLenum DECR                           = 0x1E03;\u000a    const GLenum INVERT                         = 0x150A;\u000a    const GLenum INCR_WRAP                      = 0x8507;\u000a    const GLenum DECR_WRAP                      = 0x8508;\u000a\u000a    /* StringName */\u000a    const GLenum VENDOR                         = 0x1F00;\u000a    const GLenum RENDERER                       = 0x1F01;\u000a    const GLenum VERSION                        = 0x1F02;\u000a\u000a    /* TextureMagFilter */\u000a    const GLenum NEAREST                        = 0x2600;\u000a    const GLenum LINEAR                         = 0x2601;\u000a\u000a    /* TextureMinFilter */\u000a    /*      NEAREST */\u000a    /*      LINEAR */\u000a    const GLenum NEAREST_MIPMAP_NEAREST         = 0x2700;\u000a    const GLenum LINEAR_MIPMAP_NEAREST          = 0x2701;\u000a    const GLenum NEAREST_MIPMAP_LINEAR          = 0x2702;\u000a    const GLenum LINEAR_MIPMAP_LINEAR           = 0x2703;\u000a\u000a    /* TextureParameterName */\u000a    const GLenum TEXTURE_MAG_FILTER             = 0x2800;\u000a    const GLenum TEXTURE_MIN_FILTER             = 0x2801;\u000a    const GLenum TEXTURE_WRAP_S                 = 0x2802;\u000a    const GLenum TEXTURE_WRAP_T                 = 0x2803;\u000a\u000a    /* TextureTarget */\u000a    const GLenum TEXTURE_2D                     = 0x0DE1;\u000a    const GLenum TEXTURE                        = 0x1702;\u000a\u000a    const GLenum TEXTURE_CUBE_MAP               = 0x8513;\u000a    const GLenum TEXTURE_BINDING_CUBE_MAP       = 0x8514;\u000a    const GLenum TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;\u000a    const GLenum TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;\u000a    const GLenum TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;\u000a    const GLenum TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;\u000a    const GLenum TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;\u000a    const GLenum TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851A;\u000a    const GLenum MAX_CUBE_MAP_TEXTURE_SIZE      = 0x851C;\u000a\u000a    /* TextureUnit */\u000a    const GLenum TEXTURE0                       = 0x84C0;\u000a    const GLenum TEXTURE1                       = 0x84C1;\u000a    const GLenum TEXTURE2                       = 0x84C2;\u000a    const GLenum TEXTURE3                       = 0x84C3;\u000a    const GLenum TEXTURE4                       = 0x84C4;\u000a    const GLenum TEXTURE5                       = 0x84C5;\u000a    const GLenum TEXTURE6                       = 0x84C6;\u000a    const GLenum TEXTURE7                       = 0x84C7;\u000a    const GLenum TEXTURE8                       = 0x84C8;\u000a    const GLenum TEXTURE9                       = 0x84C9;\u000a    const GLenum TEXTURE10                      = 0x84CA;\u000a    const GLenum TEXTURE11                      = 0x84CB;\u000a    const GLenum TEXTURE12                      = 0x84CC;\u000a    const GLenum TEXTURE13                      = 0x84CD;\u000a    const GLenum TEXTURE14                      = 0x84CE;\u000a    const GLenum TEXTURE15                      = 0x84CF;\u000a    const GLenum TEXTURE16                      = 0x84D0;\u000a    const GLenum TEXTURE17                      = 0x84D1;\u000a    const GLenum TEXTURE18                      = 0x84D2;\u000a    const GLenum TEXTURE19                      = 0x84D3;\u000a    const GLenum TEXTURE20                      = 0x84D4;\u000a    const GLenum TEXTURE21                      = 0x84D5;\u000a    const GLenum TEXTURE22                      = 0x84D6;\u000a    const GLenum TEXTURE23                      = 0x84D7;\u000a    const GLenum TEXTURE24                      = 0x84D8;\u000a    const GLenum TEXTURE25                      = 0x84D9;\u000a    const GLenum TEXTURE26                      = 0x84DA;\u000a    const GLenum TEXTURE27                      = 0x84DB;\u000a    const GLenum TEXTURE28                      = 0x84DC;\u000a    const GLenum TEXTURE29                      = 0x84DD;\u000a    const GLenum TEXTURE30                      = 0x84DE;\u000a    const GLenum TEXTURE31                      = 0x84DF;\u000a    const GLenum ACTIVE_TEXTURE                 = 0x84E0;\u000a\u000a    /* TextureWrapMode */\u000a    const GLenum REPEAT                         = 0x2901;\u000a    const GLenum CLAMP_TO_EDGE                  = 0x812F;\u000a    const GLenum MIRRORED_REPEAT                = 0x8370;\u000a\u000a    /* Uniform Types */\u000a    const GLenum FLOAT_VEC2                     = 0x8B50;\u000a    const GLenum FLOAT_VEC3                     = 0x8B51;\u000a    const GLenum FLOAT_VEC4                     = 0x8B52;\u000a    const GLenum INT_VEC2                       = 0x8B53;\u000a    const GLenum INT_VEC3                       = 0x8B54;\u000a    const GLenum INT_VEC4                       = 0x8B55;\u000a    const GLenum BOOL                           = 0x8B56;\u000a    const GLenum BOOL_VEC2                      = 0x8B57;\u000a    const GLenum BOOL_VEC3                      = 0x8B58;\u000a    const GLenum BOOL_VEC4                      = 0x8B59;\u000a    const GLenum FLOAT_MAT2                     = 0x8B5A;\u000a    const GLenum FLOAT_MAT3                     = 0x8B5B;\u000a    const GLenum FLOAT_MAT4                     = 0x8B5C;\u000a    const GLenum SAMPLER_2D                     = 0x8B5E;\u000a    const GLenum SAMPLER_CUBE                   = 0x8B60;\u000a\u000a    /* Vertex Arrays */\u000a    const GLenum VERTEX_ATTRIB_ARRAY_ENABLED        = 0x8622;\u000a    const GLenum VERTEX_ATTRIB_ARRAY_SIZE           = 0x8623;\u000a    const GLenum VERTEX_ATTRIB_ARRAY_STRIDE         = 0x8624;\u000a    const GLenum VERTEX_ATTRIB_ARRAY_TYPE           = 0x8625;\u000a    const GLenum VERTEX_ATTRIB_ARRAY_NORMALIZED     = 0x886A;\u000a    const GLenum VERTEX_ATTRIB_ARRAY_POINTER        = 0x8645;\u000a    const GLenum VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;\u000a\u000a    /* Read Format */\u000a    const GLenum IMPLEMENTATION_COLOR_READ_TYPE   = 0x8B9A;\u000a    const GLenum IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;\u000a\u000a    /* Shader Source */\u000a    const GLenum COMPILE_STATUS                 = 0x8B81;\u000a\u000a    /* Shader Precision-Specified Types */\u000a    const GLenum LOW_FLOAT                      = 0x8DF0;\u000a    const GLenum MEDIUM_FLOAT                   = 0x8DF1;\u000a    const GLenum HIGH_FLOAT                     = 0x8DF2;\u000a    const GLenum LOW_INT                        = 0x8DF3;\u000a    const GLenum MEDIUM_INT                     = 0x8DF4;\u000a    const GLenum HIGH_INT                       = 0x8DF5;\u000a\u000a    /* Framebuffer Object. */\u000a    const GLenum FRAMEBUFFER                    = 0x8D40;\u000a    const GLenum RENDERBUFFER                   = 0x8D41;\u000a\u000a    const GLenum RGBA4                          = 0x8056;\u000a    const GLenum RGB5_A1                        = 0x8057;\u000a    const GLenum RGB565                         = 0x8D62;\u000a    const GLenum DEPTH_COMPONENT16              = 0x81A5;\u000a    const GLenum STENCIL_INDEX8                 = 0x8D48;\u000a    const GLenum DEPTH_STENCIL                  = 0x84F9;\u000a\u000a    const GLenum RENDERBUFFER_WIDTH             = 0x8D42;\u000a    const GLenum RENDERBUFFER_HEIGHT            = 0x8D43;\u000a    const GLenum RENDERBUFFER_INTERNAL_FORMAT   = 0x8D44;\u000a    const GLenum RENDERBUFFER_RED_SIZE          = 0x8D50;\u000a    const GLenum RENDERBUFFER_GREEN_SIZE        = 0x8D51;\u000a    const GLenum RENDERBUFFER_BLUE_SIZE         = 0x8D52;\u000a    const GLenum RENDERBUFFER_ALPHA_SIZE        = 0x8D53;\u000a    const GLenum RENDERBUFFER_DEPTH_SIZE        = 0x8D54;\u000a    const GLenum RENDERBUFFER_STENCIL_SIZE      = 0x8D55;\u000a\u000a    const GLenum FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE           = 0x8CD0;\u000a    const GLenum FRAMEBUFFER_ATTACHMENT_OBJECT_NAME           = 0x8CD1;\u000a    const GLenum FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL         = 0x8CD2;\u000a    const GLenum FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;\u000a\u000a    const GLenum COLOR_ATTACHMENT0              = 0x8CE0;\u000a    const GLenum DEPTH_ATTACHMENT               = 0x8D00;\u000a    const GLenum STENCIL_ATTACHMENT             = 0x8D20;\u000a    const GLenum DEPTH_STENCIL_ATTACHMENT       = 0x821A;\u000a\u000a    const GLenum NONE                           = 0;\u000a\u000a    const GLenum FRAMEBUFFER_COMPLETE                      = 0x8CD5;\u000a    const GLenum FRAMEBUFFER_INCOMPLETE_ATTACHMENT         = 0x8CD6;\u000a    const GLenum FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;\u000a    const GLenum FRAMEBUFFER_INCOMPLETE_DIMENSIONS         = 0x8CD9;\u000a    const GLenum FRAMEBUFFER_UNSUPPORTED                   = 0x8CDD;\u000a\u000a    const GLenum FRAMEBUFFER_BINDING            = 0x8CA6;\u000a    const GLenum RENDERBUFFER_BINDING           = 0x8CA7;\u000a    const GLenum MAX_RENDERBUFFER_SIZE          = 0x84E8;\u000a\u000a    const GLenum INVALID_FRAMEBUFFER_OPERATION  = 0x0506;\u000a\u000a    /* WebGL-specific enums */\u000a    const GLenum UNPACK_FLIP_Y_WEBGL            = 0x9240;\u000a    const GLenum UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;\u000a    const GLenum CONTEXT_LOST_WEBGL             = 0x9242;\u000a    const GLenum UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\u000a    const GLenum BROWSER_DEFAULT_WEBGL          = 0x9244;\u000a\u000a    readonly attribute HTMLCanvasElement canvas;\u000a    readonly attribute GLsizei drawingBufferWidth;\u000a    readonly attribute GLsizei drawingBufferHeight;\u000a\u000a    [WebGLHandlesContextLoss] WebGLContextAttributes? getContextAttributes();\u000a    [WebGLHandlesContextLoss] boolean isContextLost();\u000a\u000a    sequence<DOMString>? getSupportedExtensions();\u000a    object? getExtension(DOMString name);\u000a\u000a    void activeTexture(GLenum texture);\u000a    void attachShader(WebGLProgram program, WebGLShader shader);\u000a    void bindAttribLocation(WebGLProgram program, GLuint index, DOMString name);\u000a    void bindBuffer(GLenum target, WebGLBuffer? buffer);\u000a    void bindFramebuffer(GLenum target, WebGLFramebuffer? framebuffer);\u000a    void bindRenderbuffer(GLenum target, WebGLRenderbuffer? renderbuffer);\u000a    void bindTexture(GLenum target, WebGLTexture? texture);\u000a    void blendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);\u000a    void blendEquation(GLenum mode);\u000a    void blendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);\u000a    void blendFunc(GLenum sfactor, GLenum dfactor);\u000a    void blendFuncSeparate(GLenum srcRGB, GLenum dstRGB,\u000a                           GLenum srcAlpha, GLenum dstAlpha);\u000a\u000a    void bufferData(GLenum target, GLsizeiptr size, GLenum usage);\u000a    void bufferData(GLenum target, [AllowShared] BufferSource? data, GLenum usage);\u000a    void bufferSubData(GLenum target, GLintptr offset, [AllowShared] BufferSource data);\u000a\u000a    [WebGLHandlesContextLoss] GLenum checkFramebufferStatus(GLenum target);\u000a    void clear(GLbitfield mask);\u000a    void clearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);\u000a    void clearDepth(GLclampf depth);\u000a    void clearStencil(GLint s);\u000a    void colorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);\u000a    void compileShader(WebGLShader shader);\u000a\u000a    void compressedTexImage2D(GLenum target, GLint level, GLenum internalformat,\u000a                              GLsizei width, GLsizei height, GLint border,\u000a                              [AllowShared] ArrayBufferView data);\u000a    void compressedTexSubImage2D(GLenum target, GLint level,\u000a                                 GLint xoffset, GLint yoffset,\u000a                                 GLsizei width, GLsizei height, GLenum format,\u000a                                 [AllowShared] ArrayBufferView data);\u000a\u000a    void copyTexImage2D(GLenum target, GLint level, GLenum internalformat,\u000a                        GLint x, GLint y, GLsizei width, GLsizei height,\u000a                        GLint border);\u000a    void copyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,\u000a                           GLint x, GLint y, GLsizei width, GLsizei height);\u000a\u000a    WebGLBuffer? createBuffer();\u000a    WebGLFramebuffer? createFramebuffer();\u000a    WebGLProgram? createProgram();\u000a    WebGLRenderbuffer? createRenderbuffer();\u000a    WebGLShader? createShader(GLenum type);\u000a    WebGLTexture? createTexture();\u000a\u000a    void cullFace(GLenum mode);\u000a\u000a    void deleteBuffer(WebGLBuffer? buffer);\u000a    void deleteFramebuffer(WebGLFramebuffer? framebuffer);\u000a    void deleteProgram(WebGLProgram? program);\u000a    void deleteRenderbuffer(WebGLRenderbuffer? renderbuffer);\u000a    void deleteShader(WebGLShader? shader);\u000a    void deleteTexture(WebGLTexture? texture);\u000a\u000a    void depthFunc(GLenum func);\u000a    void depthMask(GLboolean flag);\u000a    void depthRange(GLclampf zNear, GLclampf zFar);\u000a    void detachShader(WebGLProgram program, WebGLShader shader);\u000a    void disable(GLenum cap);\u000a    void disableVertexAttribArray(GLuint index);\u000a    void drawArrays(GLenum mode, GLint first, GLsizei count);\u000a    void drawElements(GLenum mode, GLsizei count, GLenum type, GLintptr offset);\u000a\u000a    void enable(GLenum cap);\u000a    void enableVertexAttribArray(GLuint index);\u000a    void finish();\u000a    void flush();\u000a    void framebufferRenderbuffer(GLenum target, GLenum attachment,\u000a                                 GLenum renderbuffertarget,\u000a                                 WebGLRenderbuffer? renderbuffer);\u000a    void framebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget,\u000a                              WebGLTexture? texture, GLint level);\u000a    void frontFace(GLenum mode);\u000a\u000a    void generateMipmap(GLenum target);\u000a\u000a    WebGLActiveInfo? getActiveAttrib(WebGLProgram program, GLuint index);\u000a    WebGLActiveInfo? getActiveUniform(WebGLProgram program, GLuint index);\u000a    sequence<WebGLShader>? getAttachedShaders(WebGLProgram program);\u000a\u000a    [WebGLHandlesContextLoss] GLint getAttribLocation(WebGLProgram program, DOMString name);\u000a\u000a    any getBufferParameter(GLenum target, GLenum pname);\u000a    any getParameter(GLenum pname);\u000a\u000a    [WebGLHandlesContextLoss] GLenum getError();\u000a\u000a    any getFramebufferAttachmentParameter(GLenum target, GLenum attachment,\u000a                                          GLenum pname);\u000a    any getProgramParameter(WebGLProgram program, GLenum pname);\u000a    DOMString? getProgramInfoLog(WebGLProgram program);\u000a    any getRenderbufferParameter(GLenum target, GLenum pname);\u000a    any getShaderParameter(WebGLShader shader, GLenum pname);\u000a    WebGLShaderPrecisionFormat? getShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype);\u000a    DOMString? getShaderInfoLog(WebGLShader shader);\u000a\u000a    DOMString? getShaderSource(WebGLShader shader);\u000a\u000a    any getTexParameter(GLenum target, GLenum pname);\u000a\u000a    any getUniform(WebGLProgram program, WebGLUniformLocation location);\u000a\u000a    WebGLUniformLocation? getUniformLocation(WebGLProgram program, DOMString name);\u000a\u000a    any getVertexAttrib(GLuint index, GLenum pname);\u000a\u000a    [WebGLHandlesContextLoss] GLintptr getVertexAttribOffset(GLuint index, GLenum pname);\u000a\u000a    void hint(GLenum target, GLenum mode);\u000a    [WebGLHandlesContextLoss] GLboolean isBuffer(WebGLBuffer? buffer);\u000a    [WebGLHandlesContextLoss] GLboolean isEnabled(GLenum cap);\u000a    [WebGLHandlesContextLoss] GLboolean isFramebuffer(WebGLFramebuffer? framebuffer);\u000a    [WebGLHandlesContextLoss] GLboolean isProgram(WebGLProgram? program);\u000a    [WebGLHandlesContextLoss] GLboolean isRenderbuffer(WebGLRenderbuffer? renderbuffer);\u000a    [WebGLHandlesContextLoss] GLboolean isShader(WebGLShader? shader);\u000a    [WebGLHandlesContextLoss] GLboolean isTexture(WebGLTexture? texture);\u000a    void lineWidth(GLfloat width);\u000a    void linkProgram(WebGLProgram program);\u000a    void pixelStorei(GLenum pname, GLint param);\u000a    void polygonOffset(GLfloat factor, GLfloat units);\u000a\u000a    void readPixels(GLint x, GLint y, GLsizei width, GLsizei height,\u000a                    GLenum format, GLenum type, [AllowShared] ArrayBufferView? pixels);\u000a\u000a    void renderbufferStorage(GLenum target, GLenum internalformat,\u000a                             GLsizei width, GLsizei height);\u000a    void sampleCoverage(GLclampf value, GLboolean invert);\u000a    void scissor(GLint x, GLint y, GLsizei width, GLsizei height);\u000a\u000a    void shaderSource(WebGLShader shader, DOMString source);\u000a\u000a    void stencilFunc(GLenum func, GLint ref, GLuint mask);\u000a    void stencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);\u000a    void stencilMask(GLuint mask);\u000a    void stencilMaskSeparate(GLenum face, GLuint mask);\u000a    void stencilOp(GLenum fail, GLenum zfail, GLenum zpass);\u000a    void stencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass);\u000a\u000a    void texImage2D(GLenum target, GLint level, GLint internalformat,\u000a                    GLsizei width, GLsizei height, GLint border, GLenum format,\u000a                    GLenum type, [AllowShared] ArrayBufferView? pixels);\u000a    void texImage2D(GLenum target, GLint level, GLint internalformat,\u000a                    GLenum format, GLenum type, TexImageSource source); // May throw DOMException\u000a\u000a    void texParameterf(GLenum target, GLenum pname, GLfloat param);\u000a    void texParameteri(GLenum target, GLenum pname, GLint param);\u000a\u000a    void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,\u000a                       GLsizei width, GLsizei height,\u000a                       GLenum format, GLenum type, [AllowShared] ArrayBufferView? pixels);\u000a    void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,\u000a                       GLenum format, GLenum type, TexImageSource source); // May throw DOMException\u000a\u000a    void uniform1f(WebGLUniformLocation? location, GLfloat x);\u000a    void uniform2f(WebGLUniformLocation? location, GLfloat x, GLfloat y);\u000a    void uniform3f(WebGLUniformLocation? location, GLfloat x, GLfloat y, GLfloat z);\u000a    void uniform4f(WebGLUniformLocation? location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);\u000a\u000a    void uniform1i(WebGLUniformLocation? location, GLint x);\u000a    void uniform2i(WebGLUniformLocation? location, GLint x, GLint y);\u000a    void uniform3i(WebGLUniformLocation? location, GLint x, GLint y, GLint z);\u000a    void uniform4i(WebGLUniformLocation? location, GLint x, GLint y, GLint z, GLint w);\u000a\u000a    void uniform1fv(WebGLUniformLocation? location, Float32List v);\u000a    void uniform2fv(WebGLUniformLocation? location, Float32List v);\u000a    void uniform3fv(WebGLUniformLocation? location, Float32List v);\u000a    void uniform4fv(WebGLUniformLocation? location, Float32List v);\u000a\u000a    void uniform1iv(WebGLUniformLocation? location, Int32List v);\u000a    void uniform2iv(WebGLUniformLocation? location, Int32List v);\u000a    void uniform3iv(WebGLUniformLocation? location, Int32List v);\u000a    void uniform4iv(WebGLUniformLocation? location, Int32List v);\u000a\u000a    void uniformMatrix2fv(WebGLUniformLocation? location, GLboolean transpose, Float32List value);\u000a    void uniformMatrix3fv(WebGLUniformLocation? location, GLboolean transpose, Float32List value);\u000a    void uniformMatrix4fv(WebGLUniformLocation? location, GLboolean transpose, Float32List value);\u000a\u000a    void useProgram(WebGLProgram? program);\u000a    void validateProgram(WebGLProgram program);\u000a\u000a    void vertexAttrib1f(GLuint index, GLfloat x);\u000a    void vertexAttrib2f(GLuint index, GLfloat x, GLfloat y);\u000a    void vertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);\u000a    void vertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);\u000a\u000a    void vertexAttrib1fv(GLuint index, Float32List values);\u000a    void vertexAttrib2fv(GLuint index, Float32List values);\u000a    void vertexAttrib3fv(GLuint index, Float32List values);\u000a    void vertexAttrib4fv(GLuint index, Float32List values);\u000a\u000a    void vertexAttribPointer(GLuint index, GLint size, GLenum type,\u000a                             GLboolean normalized, GLsizei stride, GLintptr offset);\u000a\u000a    void viewport(GLint x, GLint y, GLsizei width, GLsizei height);\u000a};\u000a\u000ainterface WebGLRenderingContext\u000a{\u000a};\u000aWebGLRenderingContext implements WebGLRenderingContextBase;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.khronos.org/registry/webgl/specs/latest/1.0",timestamp:1512969066224,contents:"\u000a[Constructor(DOMString type, optional WebGLContextEventInit eventInit)]\u000ainterface WebGLContextEvent : Event {\u000a    readonly attribute DOMString statusMessage;\u000a};\u000a\u000a// EventInit is defined in the DOM4 specification.\u000adictionary WebGLContextEventInit : EventInit {\u000a    DOMString statusMessage = \"\";\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/shape-detection-api",timestamp:1512969068186,contents:"[Exposed=(Window,Worker),\u000a Constructor(optional FaceDetectorOptions faceDetectorOptions)]\u000ainterface FaceDetector {\u000a  Promise<sequence<DetectedFace>> detect(ImageBitmapSource image);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/shape-detection-api",timestamp:1512969068186,contents:"dictionary FaceDetectorOptions {\u000a  unsigned short maxDetectedFaces;\u000a  boolean fastMode;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/shape-detection-api",timestamp:1512969068186,contents:"interface DetectedFace {\u000a  [SameObject] readonly attribute DOMRectReadOnly boundingBox;\u000a  [SameObject] readonly attribute FrozenArray<Landmark>? landmarks;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/shape-detection-api",timestamp:1512969068186,contents:"dictionary Landmark {\u000a  required Point2D location;\u000a  LandmarkType type;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/shape-detection-api",timestamp:1512969068186,contents:"enum LandmarkType {\u000a  \"mouth\",\u000a  \"eye\"\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/shape-detection-api",timestamp:1512969068186,contents:"[Exposed=(Window,Worker),\u000a Constructor(optional BarcodeDetectorOptions barcodeDetectorOptions)]\u000ainterface BarcodeDetector {\u000a  readonly attribute FrozenArray<BarcodeFormat> supportedFormats;\u000a\u000a  Promise<sequence<DetectedBarcode>> detect(ImageBitmapSource image);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/shape-detection-api",timestamp:1512969068186,contents:"dictionary BarcodeDetectorOptions {\u000a  sequence<BarcodeFormat> formats;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/shape-detection-api",timestamp:1512969068186,contents:"interface DetectedBarcode {\u000a  [SameObject] readonly attribute DOMRectReadOnly boundingBox;\u000a  [SameObject] readonly attribute DOMString rawValue;\u000a  [SameObject] readonly attribute BarcodeFormat format;\u000a  [SameObject] readonly attribute FrozenArray<Point2D> cornerPoints;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/shape-detection-api",timestamp:1512969068186,contents:"enum BarcodeFormat {\u000a  \"aztec\",\u000a  \"code_128\",\u000a  \"code_39\",\u000a  \"code_93\",\u000a  \"codabar\",\u000a  \"data_matrix\",\u000a  \"ean_13\",\u000a  \"ean_8\",\u000a  \"itf\",\u000a  \"pdf417\",\u000a  \"qr_code\",\u000a  \"unknown\",\u000a  \"upc_a\",\u000a  \"upc_e\"\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/entries-api",timestamp:1512969069459,contents:"partial interface File {\u000a    readonly attribute USVString webkitRelativePath;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/entries-api",timestamp:1512969069459,contents:"partial interface HTMLInputElement {\u000a    attribute boolean webkitdirectory;\u000a    readonly attribute FrozenArray<FileSystemEntry> webkitEntries;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/entries-api",timestamp:1512969069459,contents:"partial interface DataTransferItem {\u000a    FileSystemEntry? webkitGetAsEntry();\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/entries-api",timestamp:1512969069459,contents:"callback ErrorCallback = void (DOMException err);\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/entries-api",timestamp:1512969069459,contents:"interface FileSystemEntry {\u000a    readonly attribute boolean isFile;\u000a    readonly attribute boolean isDirectory;\u000a    readonly attribute USVString name;\u000a    readonly attribute USVString fullPath;\u000a    readonly attribute FileSystem filesystem;\u000a\u000a    void getParent(optional FileSystemEntryCallback successCallback,\u000a                   optional ErrorCallback errorCallback);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/entries-api",timestamp:1512969069459,contents:"interface FileSystemDirectoryEntry : FileSystemEntry {\u000a    FileSystemDirectoryReader createReader();\u000a    void getFile(optional USVString? path,\u000a                 optional FileSystemFlags options,\u000a                 optional FileSystemEntryCallback successCallback,\u000a                 optional ErrorCallback errorCallback);\u000a    void getDirectory(optional USVString? path,\u000a                      optional FileSystemFlags options,\u000a                      optional FileSystemEntryCallback successCallback,\u000a                      optional ErrorCallback errorCallback);\u000a};\u000a\u000adictionary FileSystemFlags {\u000a    boolean create = false;\u000a    boolean exclusive = false;\u000a};\u000a\u000acallback FileSystemEntryCallback = void (FileSystemEntry entry);\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/entries-api",timestamp:1512969069459,contents:"interface FileSystemDirectoryReader {\u000a    void readEntries(FileSystemEntriesCallback successCallback,\u000a                     optional ErrorCallback errorCallback);\u000a};\u000acallback FileSystemEntriesCallback = void (sequence<FileSystemEntry> entries);\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/entries-api",timestamp:1512969069459,contents:"interface FileSystemFileEntry : FileSystemEntry {\u000a    void file(FileCallback successCallback,\u000a              optional ErrorCallback errorCallback);\u000a};\u000acallback FileCallback = void (File file);\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/entries-api",timestamp:1512969069459,contents:"interface FileSystem {\u000a    readonly attribute USVString name;\u000a    readonly attribute FileSystemDirectoryEntry root;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ambient-light",timestamp:1512969071822,contents:"[Constructor(optional SensorOptions sensorOptions), SecureContext, Exposed=Window]\u000ainterface AmbientLightSensor : Sensor {\u000a  readonly attribute double? illuminance;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/magnetometer",timestamp:1512969073278,contents:"[Constructor(optional SensorOptions sensorOptions), SecureContext, Exposed=Window]\u000ainterface Magnetometer : Sensor {\u000a  readonly attribute double? x;\u000a  readonly attribute double? y;\u000a  readonly attribute double? z;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/magnetometer",timestamp:1512969073278,contents:"[Constructor(optional SensorOptions sensorOptions), SecureContext, Exposed=Window]\u000ainterface UncalibratedMagnetometer : Sensor {\u000a  readonly attribute double? x;\u000a  readonly attribute double? y;\u000a  readonly attribute double? z;\u000a  readonly attribute double? xBias;\u000a  readonly attribute double? yBias;\u000a  readonly attribute double? zBias;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/presentation-api",timestamp:1512969074309,contents:"\u000a          partial interface Navigator {\u000a            [SecureContext, SameObject] readonly attribute Presentation presentation;\u000a          };\u000a\u000a          [SecureContext, Exposed=Window]\u000a          interface Presentation {\u000a          };\u000a        \u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/presentation-api",timestamp:1512969074309,contents:"\u000a            partial interface Presentation {\u000a              attribute PresentationRequest? defaultRequest;\u000a            };\u000a          \u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/presentation-api",timestamp:1512969074309,contents:"\u000a            partial interface Presentation {\u000a              readonly attribute PresentationReceiver? receiver;\u000a            };\u000a          \u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/presentation-api",timestamp:1512969074309,contents:"\u000a          [Constructor(USVString url),\u000a           Constructor(sequence<USVString> urls),\u000a           SecureContext, Exposed=Window]\u000a          interface PresentationRequest : EventTarget {\u000a            Promise<PresentationConnection> start();\u000a            Promise<PresentationConnection> reconnect(USVString presentationId);\u000a            Promise<PresentationAvailability> getAvailability();\u000a\u000a            attribute EventHandler onconnectionavailable;\u000a          };\u000a\u000a\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/presentation-api",timestamp:1512969074309,contents:"\u000a          [SecureContext, Exposed=Window]\u000a          interface PresentationAvailability : EventTarget {\u000a            readonly attribute boolean value;\u000a\u000a            attribute EventHandler onchange;\u000a          };\u000a\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/presentation-api",timestamp:1512969074309,contents:"\u000a            [Constructor(DOMString type, PresentationConnectionAvailableEventInit eventInitDict),\u000a             SecureContext, Exposed=Window]\u000a            interface PresentationConnectionAvailableEvent : Event {\u000a              [SameObject] readonly attribute PresentationConnection connection;\u000a            };\u000a\u000a            dictionary PresentationConnectionAvailableEventInit : EventInit {\u000a              required PresentationConnection connection;\u000a            };\u000a\u000a\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/presentation-api",timestamp:1512969074309,contents:"\u000a          enum PresentationConnectionState { \"connecting\", \"connected\", \"closed\", \"terminated\" };\u000a          enum BinaryType { \"blob\", \"arraybuffer\" };\u000a\u000a          [SecureContext, Exposed=Window]\u000a          interface PresentationConnection : EventTarget {\u000a            readonly attribute USVString id;\u000a            readonly attribute USVString url;\u000a            readonly attribute PresentationConnectionState state;\u000a            void close();\u000a            void terminate();\u000a            attribute EventHandler onconnect;\u000a            attribute EventHandler onclose;\u000a            attribute EventHandler onterminate;\u000a\u000a            // Communication\u000a            attribute BinaryType binaryType;\u000a            attribute EventHandler onmessage;\u000a            void send (DOMString message);\u000a            void send (Blob data);\u000a            void send (ArrayBuffer data);\u000a            void send (ArrayBufferView data);\u000a          };\u000a\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/presentation-api",timestamp:1512969074309,contents:"\u000a            enum PresentationConnectionCloseReason { \"error\", \"closed\", \"wentaway\" };\u000a\u000a            [Constructor(DOMString type, PresentationConnectionCloseEventInit eventInitDict),\u000a             SecureContext, Exposed=Window]\u000a            interface PresentationConnectionCloseEvent : Event {\u000a              readonly attribute PresentationConnectionCloseReason reason;\u000a              readonly attribute DOMString message;\u000a            };\u000a\u000a            dictionary PresentationConnectionCloseEventInit : EventInit {\u000a              required PresentationConnectionCloseReason reason;\u000a              DOMString message = \"\";\u000a            };\u000a\u000a\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/presentation-api",timestamp:1512969074309,contents:"\u000a          [SecureContext, Exposed=Window]\u000a          interface PresentationReceiver {\u000a            readonly attribute Promise<PresentationConnectionList> connectionList;\u000a          };\u000a\u000a\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/presentation-api",timestamp:1512969074309,contents:"\u000a          [SecureContext, Exposed=Window]\u000a          interface PresentationConnectionList : EventTarget {\u000a            readonly attribute FrozenArray<PresentationConnection> connections;\u000a            attribute EventHandler onconnectionavailable;\u000a          };\u000a\u000a\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/mediasession",timestamp:1512969075866,contents:"[Exposed=Window]\u000apartial interface Navigator {\u000a  [SameObject] readonly attribute MediaSession mediaSession;\u000a};\u000a\u000aenum MediaSessionPlaybackState {\u000a  \"none\",\u000a  \"paused\",\u000a  \"playing\"\u000a};\u000a\u000aenum MediaSessionAction {\u000a  \"play\",\u000a  \"pause\",\u000a  \"seekbackward\",\u000a  \"seekforward\",\u000a  \"previoustrack\",\u000a  \"nexttrack\",\u000a};\u000a\u000acallback MediaSessionActionHandler = void();\u000a\u000a[Exposed=Window]\u000ainterface MediaSession {\u000a  attribute MediaMetadata? metadata;\u000a\u000a  attribute MediaSessionPlaybackState playbackState;\u000a\u000a  void setActionHandler(MediaSessionAction action, MediaSessionActionHandler? handler);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/mediasession",timestamp:1512969075866,contents:"[Constructor(optional MediaMetadataInit init), Exposed=Window]\u000ainterface MediaMetadata {\u000a  attribute DOMString title;\u000a  attribute DOMString artist;\u000a  attribute DOMString album;\u000a  attribute FrozenArray<MediaImage> artwork;\u000a};\u000a\u000adictionary MediaMetadataInit {\u000a  DOMString title = \"\";\u000a  DOMString artist = \"\";\u000a  DOMString album = \"\";\u000a  sequence<MediaImage> artwork = [];\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/mediasession",timestamp:1512969075866,contents:"dictionary MediaImage {\u000a  required USVString src;\u000a  DOMString sizes = \"\";\u000a  DOMString type = \"\";\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/screen-orientation",timestamp:1512969077860,contents:"\u000a          partial interface Screen {\u000a            [SameObject] readonly attribute ScreenOrientation orientation;\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/screen-orientation",timestamp:1512969077860,contents:"\u000a          [Exposed=Window]\u000a          interface ScreenOrientation : EventTarget {\u000a            Promise<void> lock(OrientationLockType orientation);\u000a            void unlock();\u000a            readonly attribute OrientationType type;\u000a            readonly attribute unsigned short angle;\u000a            attribute EventHandler onchange;\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/screen-orientation",timestamp:1512969077860,contents:"\u000a          enum OrientationType {\u000a            \"portrait-primary\",\u000a            \"portrait-secondary\",\u000a            \"landscape-primary\",\u000a            \"landscape-secondary\"\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/screen-orientation",timestamp:1512969077860,contents:"\u000a          enum OrientationLockType {\u000a            \"any\",\u000a            \"natural\",\u000a            \"landscape\",\u000a            \"portrait\",\u000a            \"portrait-primary\",\u000a            \"portrait-secondary\",\u000a            \"landscape-primary\",\u000a            \"landscape-secondary\"\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-depth",timestamp:1512969078239,contents:"          partial dictionary MediaTrackSupportedConstraints {\u000a              // Apply to both depth stream track and color stream track:\u000a              boolean videoKind = true;\u000a              boolean focalLengthX = false;\u000a              boolean focalLengthY = false;\u000a              boolean principalPointX = false;\u000a              boolean principalPointY = false;\u000a              boolean deprojectionDistortionCoefficients = false;\u000a              boolean projectionDistortionCoefficients = false;\u000a              // Apply to depth stream track:\u000a              boolean depthNear = false;\u000a              boolean depthFar = false;\u000a              boolean depthToVideoTransform = false;\u000a          };\u000a      \u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-depth",timestamp:1512969078239,contents:"          partial dictionary MediaTrackCapabilities {\u000a              // Apply to both depth stream track and color stream track:\u000a              DOMString videoKind;\u000a              (double or DoubleRange) focalLengthX;\u000a              (double or DoubleRange) focalLengthY;\u000a              (double or DoubleRange) principalPointX;\u000a              (double or DoubleRange) principalPointY;\u000a              boolean deprojectionDistortionCoefficients;\u000a              boolean projectionDistortionCoefficients;\u000a              // Apply to depth stream track:\u000a              (double or DoubleRange) depthNear;\u000a              (double or DoubleRange) depthFar;\u000a              boolean depthToVideoTransform;\u000a          };\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-depth",timestamp:1512969078239,contents:"          partial dictionary MediaTrackConstraintSet {\u000a              // Apply to both depth stream track and color stream track:\u000a              ConstrainDOMString videoKind;\u000a              ConstrainDouble focalLengthX;\u000a              ConstrainDouble focalLengthY;\u000a              ConstrainDouble principalPointX;\u000a              ConstrainDouble principalPointY;\u000a              ConstrainBoolean deprojectionDistortionCoefficients;\u000a              ConstrainBoolean projectionDistortionCoefficients;\u000a              // Apply to depth stream track:\u000a              ConstrainDouble depthNear;\u000a              ConstrainDouble depthFar;\u000a              ConstrainBoolean depthToVideoTransform;\u000a          };\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-depth",timestamp:1512969078239,contents:"          partial dictionary MediaTrackSettings {\u000a              // Apply to both depth stream track and color stream track:\u000a              DOMString           videoKind;\u000a              double              focalLengthX;\u000a              double              focalLengthY;\u000a              double              principalPointX;\u000a              double              principalPointY;\u000a              DistortionCoefficients deprojectionDistortionCoefficients;\u000a              DistortionCoefficients projectionDistortionCoefficients;\u000a              // Apply to depth stream track:\u000a              double              depthNear;\u000a              double              depthFar;\u000a              Transformation      depthToVideoTransform;\u000a          };\u000a        \u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-depth",timestamp:1512969078239,contents:"          dictionary DistortionCoefficients {\u000a              double              k1;\u000a              double              k2;\u000a              double              p1;\u000a              double              p2;\u000a              double              k3;\u000a          };\u000a        \u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-depth",timestamp:1512969078239,contents:"          dictionary Transformation {\u000a            Float32Array       transformationMatrix;\u000a            DOMString          videoDeviceId;\u000a          };\u000a        \u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-depth",timestamp:1512969078239,contents:"          enum VideoKindEnum {\u000a              \"color\",\u000a              \"depth\"\u000a          };\u000a          \u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/netinfo",timestamp:1512969079586,contents:"\u000a  enum ConnectionType {\u000a    \"bluetooth\",\u000a    \"cellular\",\u000a    \"ethernet\",\u000a    \"mixed\",\u000a    \"none\",\u000a    \"other\",\u000a    \"unknown\",\u000a    \"wifi\",\u000a    \"wimax\"\u000a  };\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/netinfo",timestamp:1512969079586,contents:"\u000a  enum EffectiveConnectionType {\u000a    \"2g\",\u000a    \"3g\",\u000a    \"4g\",\u000a    \"slow-2g\"\u000a  };\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/netinfo",timestamp:1512969079586,contents:"\u000a  [NoInterfaceObject, Exposed=(Window,Worker)]\u000a  interface NavigatorNetworkInformation {\u000a    readonly attribute NetworkInformation connection;\u000a  };\u000a\u000a  Navigator implements NavigatorNetworkInformation;\u000a  WorkerNavigator implements NavigatorNetworkInformation;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://wicg.github.io/netinfo",timestamp:1512969079586,contents:"\u000a  [Exposed=(Window,Worker)]\u000a  interface NetworkInformation : EventTarget {\u000a    readonly attribute ConnectionType type;\u000a    readonly attribute EffectiveConnectionType effectiveType;\u000a    readonly attribute Megabit downlinkMax;\u000a    readonly attribute Megabit downlink;\u000a    readonly attribute Millisecond rtt;\u000a    readonly attribute boolean saveData;\u000a    attribute EventHandler onchange;\u000a  };\u000a\u000a  typedef unrestricted double Megabit;\u000a  typedef unsigned long long Millisecond;\u000a  "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000aenum AudioContextState {\u000a    \"suspended\",\u000a    \"running\",\u000a    \"closed\"\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000acallback DecodeErrorCallback = void (DOMException error);\u000a\u000acallback DecodeSuccessCallback = void (AudioBuffer decodedData);\u000a\u000a[Exposed=Window]\u000ainterface BaseAudioContext : EventTarget {\u000a    readonly        attribute AudioDestinationNode destination;\u000a    readonly        attribute float                sampleRate;\u000a    readonly        attribute double               currentTime;\u000a    readonly        attribute AudioListener        listener;\u000a    readonly        attribute AudioContextState    state;\u000a    [SameObject, SecureContext]\u000a    readonly        attribute AudioWorklet         audioWorklet;\u000a    Promise<void>          resume ();\u000a                    attribute EventHandler         onstatechange;\u000a    AudioBuffer            createBuffer (unsigned long numberOfChannels, unsigned long length, float sampleRate);\u000a    Promise<AudioBuffer>   decodeAudioData (ArrayBuffer audioData, optional DecodeSuccessCallback successCallback, optional DecodeErrorCallback errorCallback);\u000a    AudioBufferSourceNode  createBufferSource ();\u000a    ConstantSourceNode     createConstantSource ();\u000a    ScriptProcessorNode    createScriptProcessor (optional unsigned long bufferSize = 0\u000a              , optional unsigned long numberOfInputChannels = 2\u000a              , optional unsigned long numberOfOutputChannels = 2\u000a              );\u000a    AnalyserNode           createAnalyser ();\u000a    GainNode               createGain ();\u000a    DelayNode              createDelay (optional double maxDelayTime = 1.0\u000a              );\u000a    BiquadFilterNode       createBiquadFilter ();\u000a    IIRFilterNode          createIIRFilter (sequence<double> feedforward, sequence<double> feedback);\u000a    WaveShaperNode         createWaveShaper ();\u000a    PannerNode             createPanner ();\u000a    StereoPannerNode       createStereoPanner ();\u000a    ConvolverNode          createConvolver ();\u000a    ChannelSplitterNode    createChannelSplitter (optional unsigned long numberOfOutputs = 6\u000a              );\u000a    ChannelMergerNode      createChannelMerger (optional unsigned long numberOfInputs = 6\u000a              );\u000a    DynamicsCompressorNode createDynamicsCompressor ();\u000a    OscillatorNode         createOscillator ();\u000a    PeriodicWave           createPeriodicWave (sequence<float> real, sequence<float> imag, optional PeriodicWaveConstraints constraints);\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window]\u000aenum AudioContextLatencyCategory {\u000a    \"balanced\",\u000a    \"interactive\",\u000a    \"playback\"\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (optional AudioContextOptions contextOptions)]\u000ainterface AudioContext : BaseAudioContext {\u000a    readonly        attribute double baseLatency;\u000a    readonly        attribute double outputLatency;\u000a    AudioTimestamp                  getOutputTimestamp ();\u000a    Promise<void>                   suspend ();\u000a    Promise<void>                   close ();\u000a    MediaElementAudioSourceNode     createMediaElementSource (HTMLMediaElement mediaElement);\u000a    MediaStreamAudioSourceNode      createMediaStreamSource (MediaStream mediaStream);\u000a    MediaStreamTrackAudioSourceNode createMediaStreamTrackSource (MediaStreamTrack mediaStreamTrack);\u000a    MediaStreamAudioDestinationNode createMediaStreamDestination ();\u000a};              \u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window]\u000adictionary AudioContextOptions {\u000a             (AudioContextLatencyCategory or double) latencyHint = \"interactive\";\u000a             float                                   sampleRate;\u000a};\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window]\u000adictionary AudioTimestamp {\u000a             double              contextTime;\u000a             DOMHighResTimeStamp performanceTime;\u000a};\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (OfflineAudioContextOptions contextOptions),\u000a Constructor (unsigned long numberOfChannels, unsigned long length, float sampleRate)]\u000ainterface OfflineAudioContext : BaseAudioContext {\u000a    Promise<AudioBuffer> startRendering ();\u000a    Promise<void>        suspend (double suspendTime);\u000a    readonly        attribute unsigned long length;\u000a                    attribute EventHandler  oncomplete;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window]\u000adictionary OfflineAudioContextOptions {\u000a             unsigned long numberOfChannels = 1;\u000a    required unsigned long length;\u000a    required float         sampleRate;\u000a};\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (DOMString type, OfflineAudioCompletionEventInit eventInitDict)]\u000ainterface OfflineAudioCompletionEvent : Event {\u000a    readonly        attribute AudioBuffer renderedBuffer;\u000a};\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window]\u000adictionary OfflineAudioCompletionEventInit : EventInit {\u000a    required AudioBuffer renderedBuffer;\u000a};\u000a            "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (AudioBufferOptions options)]\u000ainterface AudioBuffer {\u000a    readonly        attribute float         sampleRate;\u000a    readonly        attribute unsigned long length;\u000a    readonly        attribute double        duration;\u000a    readonly        attribute unsigned long numberOfChannels;\u000a    Float32Array getChannelData (unsigned long channel);\u000a    void         copyFromChannel (Float32Array destination, unsigned long channelNumber, optional unsigned long startInChannel = 0);\u000a    void         copyToChannel (Float32Array source, unsigned long channelNumber, optional unsigned long startInChannel = 0);\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary AudioBufferOptions {\u000a             unsigned long numberOfChannels = 1;\u000a    required unsigned long length;\u000a    required float         sampleRate;\u000a};\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window]\u000aenum ChannelCountMode {\u000a    \"max\",\u000a    \"clamped-max\",\u000a    \"explicit\"\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window]\u000aenum ChannelInterpretation {\u000a    \"speakers\",\u000a    \"discrete\"\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window]\u000ainterface AudioNode : EventTarget {\u000a    AudioNode connect (AudioNode destination, optional unsigned long output = 0\u000a              , optional unsigned long input = 0\u000a              );\u000a    void      connect (AudioParam destination, optional unsigned long output = 0\u000a              );\u000a    void      disconnect ();\u000a    void      disconnect (unsigned long output);\u000a    void      disconnect (AudioNode destination);\u000a    void      disconnect (AudioNode destination, unsigned long output);\u000a    void      disconnect (AudioNode destination, unsigned long output, unsigned long input);\u000a    void      disconnect (AudioParam destination);\u000a    void      disconnect (AudioParam destination, unsigned long output);\u000a    readonly        attribute BaseAudioContext      context;\u000a    readonly        attribute unsigned long         numberOfInputs;\u000a    readonly        attribute unsigned long         numberOfOutputs;\u000a                    attribute unsigned long         channelCount;\u000a                    attribute ChannelCountMode      channelCountMode;\u000a                    attribute ChannelInterpretation channelInterpretation;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary AudioNodeOptions {\u000a             unsigned long         channelCount;\u000a             ChannelCountMode      channelCountMode;\u000a             ChannelInterpretation channelInterpretation;\u000a};\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window]\u000ainterface AudioParam {\u000a                    attribute float value;\u000a    readonly        attribute float defaultValue;\u000a    readonly        attribute float minValue;\u000a    readonly        attribute float maxValue;\u000a    AudioParam setValueAtTime (float value, double startTime);\u000a    AudioParam linearRampToValueAtTime (float value, double endTime);\u000a    AudioParam exponentialRampToValueAtTime (float value, double endTime);\u000a    AudioParam setTargetAtTime (float target, double startTime, float timeConstant);\u000a    AudioParam setValueCurveAtTime (sequence<float> values, double startTime, double duration);\u000a    AudioParam cancelScheduledValues (double cancelTime);\u000a    AudioParam cancelAndHoldAtTime (double cancelTime);\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window]\u000ainterface AudioScheduledSourceNode : AudioNode {\u000a                    attribute EventHandler onended;\u000a    void start (optional double when = 0);\u000a    void stop (optional double when = 0);\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (BaseAudioContext context, optional AnalyserOptions options)]\u000ainterface AnalyserNode : AudioNode {\u000a    void getFloatFrequencyData (Float32Array array);\u000a    void getByteFrequencyData (Uint8Array array);\u000a    void getFloatTimeDomainData (Float32Array array);\u000a    void getByteTimeDomainData (Uint8Array array);\u000a                    attribute unsigned long fftSize;\u000a    readonly        attribute unsigned long frequencyBinCount;\u000a                    attribute double        minDecibels;\u000a                    attribute double        maxDecibels;\u000a                    attribute double        smoothingTimeConstant;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary AnalyserOptions : AudioNodeOptions {\u000a             unsigned long fftSize = 2048;\u000a             double        maxDecibels = -30;\u000a             double        minDecibels = -100;\u000a             double        smoothingTimeConstant = 0.8;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (BaseAudioContext context, optional AudioBufferSourceOptions options)]\u000ainterface AudioBufferSourceNode : AudioScheduledSourceNode {\u000a                    attribute AudioBuffer? buffer;\u000a    readonly        attribute AudioParam   playbackRate;\u000a    readonly        attribute AudioParam   detune;\u000a                    attribute boolean      loop;\u000a                    attribute double       loopStart;\u000a                    attribute double       loopEnd;\u000a    void start (optional double when = 0\u000a              , optional double offset, optional double duration);\u000a    void stop (optional double when = 0\u000a              );\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary AudioBufferSourceOptions {\u000a             AudioBuffer? buffer;\u000a             float        detune = 0;\u000a             boolean      loop = false;\u000a             double       loopEnd = 0;\u000a             double       loopStart = 0;\u000a             float        playbackRate = 1;\u000a};\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window]\u000ainterface AudioDestinationNode : AudioNode {\u000a    readonly        attribute unsigned long maxChannelCount;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window]\u000ainterface AudioListener {\u000a    readonly        attribute AudioParam positionX;\u000a    readonly        attribute AudioParam positionY;\u000a    readonly        attribute AudioParam positionZ;\u000a    readonly        attribute AudioParam forwardX;\u000a    readonly        attribute AudioParam forwardY;\u000a    readonly        attribute AudioParam forwardZ;\u000a    readonly        attribute AudioParam upX;\u000a    readonly        attribute AudioParam upY;\u000a    readonly        attribute AudioParam upZ;\u000a    void setPosition (float x, float y, float z);\u000a    void setOrientation (float x, float y, float z, float xUp, float yUp, float zUp);\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (DOMString type, AudioProcessingEventInit eventInitDict)]\u000ainterface AudioProcessingEvent : Event {\u000a    readonly        attribute double      playbackTime;\u000a    readonly        attribute AudioBuffer inputBuffer;\u000a    readonly        attribute AudioBuffer outputBuffer;\u000a};\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary AudioProcessingEventInit : EventInit {\u000a    required double      playbackTime;\u000a    required AudioBuffer inputBuffer;\u000a    required AudioBuffer outputBuffer;\u000a};\u000a            "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000aenum BiquadFilterType {\u000a    \"lowpass\",\u000a    \"highpass\",\u000a    \"bandpass\",\u000a    \"lowshelf\",\u000a    \"highshelf\",\u000a    \"peaking\",\u000a    \"notch\",\u000a    \"allpass\"\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (BaseAudioContext context, optional BiquadFilterOptions options)]\u000ainterface BiquadFilterNode : AudioNode {\u000a                    attribute BiquadFilterType type;\u000a    readonly        attribute AudioParam       frequency;\u000a    readonly        attribute AudioParam       detune;\u000a    readonly        attribute AudioParam       Q;\u000a    readonly        attribute AudioParam       gain;\u000a    void getFrequencyResponse (Float32Array frequencyHz, Float32Array magResponse, Float32Array phaseResponse);\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary BiquadFilterOptions : AudioNodeOptions {\u000a             BiquadFilterType type = \"lowpass\";\u000a             float            Q = 1;\u000a             float            detune = 0;\u000a             float            frequency = 350;\u000a             float            gain = 0;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (BaseAudioContext context, optional ChannelMergerOptions options)]\u000ainterface ChannelMergerNode : AudioNode {\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary ChannelMergerOptions : AudioNodeOptions {\u000a             unsigned long numberOfInputs = 6;\u000a};\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (BaseAudioContext context, optional ChannelSplitterNode options)]\u000ainterface ChannelSplitterNode : AudioNode {\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary ChannelSplitterOptions : AudioNodeOptions {\u000a             unsigned long numberOfOutputs = 6;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (BaseAudioContext context, optional ConstantSourceOptions options)]\u000ainterface ConstantSourceNode : AudioScheduledSourceNode {\u000a    readonly        attribute AudioParam offset;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary ConstantSourceOptions {\u000a             float offset = 1;\u000a};\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (BaseAudioContext context, optional ConvolverOptions options)]\u000ainterface ConvolverNode : AudioNode {\u000a                    attribute AudioBuffer? buffer;\u000a                    attribute boolean      normalize;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary ConvolverOptions : AudioNodeOptions {\u000a             AudioBuffer? buffer;\u000a             boolean      disableNormalization = false;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (BaseAudioContext context, optional DelayOptions options)]\u000ainterface DelayNode : AudioNode {\u000a    readonly        attribute AudioParam delayTime;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary DelayOptions : AudioNodeOptions {\u000a             double maxDelayTime = 1;\u000a             double delayTime = 0;\u000a};\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (BaseAudioContext context, optional DynamicsCompressorOptions options)]\u000ainterface DynamicsCompressorNode : AudioNode {\u000a    readonly        attribute AudioParam threshold;\u000a    readonly        attribute AudioParam knee;\u000a    readonly        attribute AudioParam ratio;\u000a    readonly        attribute float      reduction;\u000a    readonly        attribute AudioParam attack;\u000a    readonly        attribute AudioParam release;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary DynamicsCompressorOptions : AudioNodeOptions {\u000a             float attack = 0.003;\u000a             float knee = 30;\u000a             float ratio = 12;\u000a             float release = 0.25;\u000a             float threshold = -24;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (BaseAudioContext context, optional GainOptions options)]\u000ainterface GainNode : AudioNode {\u000a    readonly        attribute AudioParam gain;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary GainOptions : AudioNodeOptions {\u000a             float gain = 1.0;\u000a};\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (BaseAudioContext context, IIRFilterOptions options)]\u000ainterface IIRFilterNode : AudioNode {\u000a    void getFrequencyResponse (Float32Array frequencyHz, Float32Array magResponse, Float32Array phaseResponse);\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary IIRFilterOptions : AudioNodeOptions {\u000a    required sequence<double> feedforward;\u000a    required sequence<double> feedback;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (BaseAudioContext context, MediaElementAudioSourceOptions options)]\u000ainterface MediaElementAudioSourceNode : AudioNode {\u000a    [SameObject]\u000a    readonly        attribute HTMLMediaElement mediaElement;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary MediaElementAudioSourceOptions {\u000a    required HTMLMediaElement mediaElement;\u000a};\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (BaseAudioContext context, optional AudioNodeOptions options)]\u000ainterface MediaStreamAudioDestinationNode : AudioNode {\u000a    readonly        attribute MediaStream stream;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (BaseAudioContext context, MediaStreamAudioSourceOptions options)]\u000ainterface MediaStreamAudioSourceNode : AudioNode {\u000a    [SameObject] readonly        attribute MediaStream mediaStream;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary MediaStreamAudioSourceOptions {\u000a    required MediaStream mediaStream;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (AudioContext context, MediaStreamTrackAudioSourceOptions options)]\u000ainterface MediaStreamTrackAudioSourceNode : AudioNode {\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary MediaStreamTrackAudioSourceOptions {\u000a    required MediaStreamTrack mediaStreamTrack;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000aenum OscillatorType {\u000a    \"sine\",\u000a    \"square\",\u000a    \"sawtooth\",\u000a    \"triangle\",\u000a    \"custom\"\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (BaseAudioContext context, optional OscillatorOptions options)]\u000ainterface OscillatorNode : AudioScheduledSourceNode {\u000a                    attribute OscillatorType type;\u000a    readonly        attribute AudioParam     frequency;\u000a    readonly        attribute AudioParam     detune;\u000a    void setPeriodicWave (PeriodicWave periodicWave);\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary OscillatorOptions : AudioNodeOptions {\u000a             OscillatorType type = \"sine\";\u000a             float          frequency = 440;\u000a             float          detune = 0;\u000a             PeriodicWave   periodicWave;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000aenum PanningModelType {\u000a    \"equalpower\",\u000a    \"HRTF\"\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000aenum DistanceModelType {\u000a    \"linear\",\u000a    \"inverse\",\u000a    \"exponential\"\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (BaseAudioContext context, optional PannerOptions options)]\u000ainterface PannerNode : AudioNode {\u000a                    attribute PanningModelType  panningModel;\u000a    readonly        attribute AudioParam        positionX;\u000a    readonly        attribute AudioParam        positionY;\u000a    readonly        attribute AudioParam        positionZ;\u000a    readonly        attribute AudioParam        orientationX;\u000a    readonly        attribute AudioParam        orientationY;\u000a    readonly        attribute AudioParam        orientationZ;\u000a                    attribute DistanceModelType distanceModel;\u000a                    attribute double            refDistance;\u000a                    attribute double            maxDistance;\u000a                    attribute double            rolloffFactor;\u000a                    attribute double            coneInnerAngle;\u000a                    attribute double            coneOuterAngle;\u000a                    attribute double            coneOuterGain;\u000a    void setPosition (float x, float y, float z);\u000a    void setOrientation (float x, float y, float z);\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary PannerOptions : AudioNodeOptions {\u000a             PanningModelType  panningModel = \"equalpower\";\u000a             DistanceModelType distanceModel = \"inverse\";\u000a             float             positionX = 0;\u000a             float             positionY = 0;\u000a             float             positionZ = 0;\u000a             float             orientationX = 1;\u000a             float             orientationY = 0;\u000a             float             orientationZ = 0;\u000a             double            refDistance = 1;\u000a             double            maxDistance = 10000;\u000a             double            rolloffFactor = 1;\u000a             double            coneInnerAngle = 360;\u000a             double            coneOuterAngle = 360;\u000a             double            coneOuterGain = 0;\u000a};\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (BaseAudioContext context, optional PeriodicWaveOptions options)]\u000ainterface PeriodicWave {\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary PeriodicWaveConstraints {\u000a             boolean disableNormalization = false;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary PeriodicWaveOptions : PeriodicWaveConstraints {\u000a             sequence<float> real;\u000a             sequence<float> imag;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window]\u000ainterface ScriptProcessorNode : AudioNode {\u000a                    attribute EventHandler onaudioprocess;\u000a    readonly        attribute long         bufferSize;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (BaseAudioContext context, optional StereoPannerOptions options)]\u000ainterface StereoPannerNode : AudioNode {\u000a    readonly        attribute AudioParam pan;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary StereoPannerOptions : AudioNodeOptions {\u000a             float pan = 0;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000aenum OverSampleType {\u000a    \"none\",\u000a    \"2x\",\u000a    \"4x\"\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window,\u000a Constructor (BaseAudioContext context, optional WaveShaperOptions options)]\u000ainterface WaveShaperNode : AudioNode {\u000a                    attribute Float32Array?  curve;\u000a                    attribute OverSampleType oversample;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary WaveShaperOptions : AudioNodeOptions {\u000a             sequence<float> curve;\u000a             OverSampleType  oversample = \"none\";\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window, SecureContext]\u000ainterface AudioWorklet : Worklet {\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Global=(Worklet, AudioWorklet), Exposed=AudioWorklet]\u000ainterface AudioWorkletGlobalScope : WorkletGlobalScope {\u000a    void registerProcessor (DOMString name, VoidFunction processorCtor);\u000a    readonly attribute double currentTime;\u000a    readonly attribute float  sampleRate;\u000a};\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window]\u000ainterface AudioParamMap {\u000a    readonly maplike<DOMString, AudioParam>;\u000a};\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000aenum AudioWorkletProcessorState {\u000a    \"pending\",\u000a    \"running\",\u000a    \"stopped\",\u000a    \"error\"\u000a};\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=Window, SecureContext,\u000a Constructor (BaseAudioContext context, optional AudioWorkletOptions options)]\u000ainterface AudioWorkletNode : AudioNode {\u000a    readonly        attribute AudioParamMap              parameters;\u000a    readonly        attribute MessagePort                port;\u000a    readonly        attribute AudioWorkletProcessorState processorState;\u000a                    attribute EventHandler               onprocessorstatechange;\u000a};\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary AudioWorkletNodeOptions : AudioNodeOptions {\u000a             unsigned long             numberOfInputs = 1;\u000a             unsigned long             numberOfOutputs = 1;\u000a             sequence<unsigned long>    outputChannelCount;\u000a             record<DOMString, double>  parameterData;\u000a};\u000a            "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000a[Exposed=AudioWorklet,\u000a Constructor (optional AudioWorkletOptions options)]\u000ainterface AudioWorkletProcessor {\u000a    readonly        attribute MessagePort port;\u000a};\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webaudio.github.io/web-audio-api",timestamp:1512969079816,contents:"\u000adictionary AudioParamDescriptor {\u000a    required DOMString name;\u000a             float     defaultValue = 0;\u000a             float     minValue = -3.4028235e38;\u000a             float     maxValue = 3.4028235e38;\u000a};\u000a            "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webappsec-csp",timestamp:1512969088316,contents:"enum SecurityPolicyViolationEventDisposition {\u000a  \"enforce\", \"report\"\u000a};\u000a\u000a[Constructor(DOMString type, optional SecurityPolicyViolationEventInit eventInitDict)]\u000ainterface SecurityPolicyViolationEvent : Event {\u000a    readonly    attribute DOMString      documentURI;\u000a    readonly    attribute DOMString      referrer;\u000a    readonly    attribute DOMString      blockedURI;\u000a    readonly    attribute DOMString      violatedDirective;\u000a    readonly    attribute DOMString      effectiveDirective;\u000a    readonly    attribute DOMString      originalPolicy;\u000a    readonly    attribute DOMString      sourceFile;\u000a    readonly    attribute DOMString      sample;\u000a    readonly    attribute SecurityPolicyViolationEventDisposition      disposition;\u000a    readonly    attribute unsigned short statusCode;\u000a    readonly    attribute long           lineNumber;\u000a    readonly    attribute long           columnNumber;\u000a};\u000a\u000adictionary SecurityPolicyViolationEventInit : EventInit {\u000a    DOMString      documentURI;\u000a    DOMString      referrer;\u000a    DOMString      blockedURI;\u000a    DOMString      violatedDirective;\u000a    DOMString      effectiveDirective;\u000a    DOMString      originalPolicy;\u000a    DOMString      sourceFile;\u000a    DOMString      sample;\u000a    SecurityPolicyViolationEventDisposition      disposition;\u000a    unsigned short statusCode;\u000a    long           lineNumber;\u000a    long           columnNumber;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webvtt",timestamp:1512969095613,contents:"enum AutoKeyword { \"auto\" };\u000atypedef (double or AutoKeyword) LineAndPositionSetting;\u000aenum DirectionSetting { \"\" /* horizontal */, \"rl\", \"lr\" };\u000aenum LineAlignSetting { \"start\", \"center\", \"end\" };\u000aenum PositionAlignSetting { \"line-left\", \"center\", \"line-right\", \"auto\" };\u000aenum AlignSetting { \"start\", \"center\", \"end\", \"left\", \"right\" };\u000a[Exposed=Window,\u000a Constructor(double startTime, double endTime, DOMString text)]\u000ainterface VTTCue : TextTrackCue {\u000a  attribute VTTRegion? region;\u000a  attribute DirectionSetting vertical;\u000a  attribute boolean snapToLines;\u000a  attribute LineAndPositionSetting line;\u000a  attribute LineAlignSetting lineAlign;\u000a  attribute LineAndPositionSetting position;\u000a  attribute PositionAlignSetting positionAlign;\u000a  attribute double size;\u000a  attribute AlignSetting align;\u000a  attribute DOMString text;\u000a  DocumentFragment getCueAsHTML();\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webvtt",timestamp:1512969095613,contents:"enum ScrollSetting { \"\" /* none */, \"up\" };\u000a[Exposed=Window,\u000a Constructor]\u000ainterface VTTRegion {\u000a  attribute DOMString id;\u000a  attribute double width;\u000a  attribute unsigned long lines;\u000a  attribute double regionAnchorX;\u000a  attribute double regionAnchorY;\u000a  attribute double viewportAnchorX;\u000a  attribute double viewportAnchorY;\u000a  attribute ScrollSetting scroll;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webbluetoothcg.github.io/web-bluetooth",timestamp:1512969102089,contents:"dictionary BluetoothDataFilterInit {\u000a  BufferSource dataPrefix;\u000a  BufferSource mask;\u000a};\u000adictionary BluetoothLEScanFilterInit {\u000a  sequence<BluetoothServiceUUID> services;\u000a  DOMString name;\u000a  DOMString namePrefix;\u000a  // Maps unsigned shorts to BluetoothDataFilters.\u000a  object manufacturerData;\u000a  // Maps BluetoothServiceUUIDs to BluetoothDataFilters.\u000a  object serviceData;\u000a};\u000a\u000adictionary RequestDeviceOptions {\u000a  sequence<BluetoothLEScanFilterInit> filters;\u000a  sequence<BluetoothServiceUUID> optionalServices = [];\u000a  boolean acceptAllDevices = false;\u000a};\u000a\u000ainterface Bluetooth : EventTarget {\u000a  [SecureContext]\u000a  Promise<boolean> getAvailability();\u000a  [SecureContext]\u000a  attribute EventHandler onavailabilitychanged;\u000a  [SecureContext, SameObject]\u000a  readonly attribute BluetoothDevice? referringDevice;\u000a  [SecureContext]\u000a  Promise<BluetoothDevice> requestDevice(optional RequestDeviceOptions options);\u000a};\u000aBluetooth implements BluetoothDeviceEventHandlers;\u000aBluetooth implements CharacteristicEventHandlers;\u000aBluetooth implements ServiceEventHandlers;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webbluetoothcg.github.io/web-bluetooth",timestamp:1512969102089,contents:"dictionary BluetoothPermissionDescriptor : PermissionDescriptor {\u000a  DOMString deviceId;\u000a  // These match RequestDeviceOptions.\u000a  sequence<BluetoothLEScanFilterInit> filters;\u000a  sequence<BluetoothServiceUUID> optionalServices = [];\u000a  boolean acceptAllDevices = false;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webbluetoothcg.github.io/web-bluetooth",timestamp:1512969102089,contents:"dictionary AllowedBluetoothDevice {\u000a  required DOMString deviceId;\u000a  required boolean mayUseGATT;\u000a  // An allowedServices of \"all\" means all services are allowed.\u000a  required (DOMString or sequence<UUID>) allowedServices;\u000a};\u000adictionary BluetoothPermissionData {\u000a  required sequence<AllowedBluetoothDevice> allowedDevices = [];\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webbluetoothcg.github.io/web-bluetooth",timestamp:1512969102089,contents:"interface BluetoothPermissionResult : PermissionStatus {\u000a  attribute FrozenArray<BluetoothDevice> devices;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webbluetoothcg.github.io/web-bluetooth",timestamp:1512969102089,contents:"[Constructor(DOMString type, optional ValueEventInit initDict)]\u000ainterface ValueEvent : Event {\u000a  readonly attribute any value;\u000a};\u000a\u000adictionary ValueEventInit : EventInit {\u000a  any value = null;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webbluetoothcg.github.io/web-bluetooth",timestamp:1512969102089,contents:"interface BluetoothDevice {\u000a  readonly attribute DOMString id;\u000a  readonly attribute DOMString? name;\u000a  readonly attribute BluetoothRemoteGATTServer? gatt;\u000a\u000a  Promise<void> watchAdvertisements();\u000a  void unwatchAdvertisements();\u000a  readonly attribute boolean watchingAdvertisements;\u000a};\u000aBluetoothDevice implements EventTarget;\u000aBluetoothDevice implements BluetoothDeviceEventHandlers;\u000aBluetoothDevice implements CharacteristicEventHandlers;\u000aBluetoothDevice implements ServiceEventHandlers;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webbluetoothcg.github.io/web-bluetooth",timestamp:1512969102089,contents:"interface BluetoothManufacturerDataMap {\u000a  readonly maplike<unsigned short, DataView>;\u000a};\u000ainterface BluetoothServiceDataMap {\u000a  readonly maplike<UUID, DataView>;\u000a};\u000a[Constructor(DOMString type, BluetoothAdvertisingEventInit init)]\u000ainterface BluetoothAdvertisingEvent : Event {\u000a  [SameObject]\u000a  readonly attribute BluetoothDevice device;\u000a  readonly attribute FrozenArray<UUID> uuids;\u000a  readonly attribute DOMString? name;\u000a  readonly attribute unsigned short? appearance;\u000a  readonly attribute byte? txPower;\u000a  readonly attribute byte? rssi;\u000a  [SameObject]\u000a  readonly attribute BluetoothManufacturerDataMap manufacturerData;\u000a  [SameObject]\u000a  readonly attribute BluetoothServiceDataMap serviceData;\u000a};\u000adictionary BluetoothAdvertisingEventInit : EventInit {\u000a  required BluetoothDevice device;\u000a  sequence<(DOMString or unsigned long)> uuids;\u000a  DOMString name;\u000a  unsigned short appearance;\u000a  byte txPower;\u000a  byte rssi;\u000a  Map manufacturerData;\u000a  Map serviceData;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webbluetoothcg.github.io/web-bluetooth",timestamp:1512969102089,contents:"interface BluetoothRemoteGATTServer {\u000a  [SameObject]\u000a  readonly attribute BluetoothDevice device;\u000a  readonly attribute boolean connected;\u000a  Promise<BluetoothRemoteGATTServer> connect();\u000a  void disconnect();\u000a  Promise<BluetoothRemoteGATTService> getPrimaryService(BluetoothServiceUUID service);\u000a  Promise<sequence<BluetoothRemoteGATTService>>\u000a    getPrimaryServices(optional BluetoothServiceUUID service);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webbluetoothcg.github.io/web-bluetooth",timestamp:1512969102089,contents:"interface BluetoothRemoteGATTService {\u000a  [SameObject]\u000a  readonly attribute BluetoothDevice device;\u000a  readonly attribute UUID uuid;\u000a  readonly attribute boolean isPrimary;\u000a  Promise<BluetoothRemoteGATTCharacteristic>\u000a    getCharacteristic(BluetoothCharacteristicUUID characteristic);\u000a  Promise<sequence<BluetoothRemoteGATTCharacteristic>>\u000a    getCharacteristics(optional BluetoothCharacteristicUUID characteristic);\u000a  Promise<BluetoothRemoteGATTService>\u000a    getIncludedService(BluetoothServiceUUID service);\u000a  Promise<sequence<BluetoothRemoteGATTService>>\u000a    getIncludedServices(optional BluetoothServiceUUID service);\u000a};\u000aBluetoothRemoteGATTService implements EventTarget;\u000aBluetoothRemoteGATTService implements CharacteristicEventHandlers;\u000aBluetoothRemoteGATTService implements ServiceEventHandlers;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webbluetoothcg.github.io/web-bluetooth",timestamp:1512969102089,contents:"interface BluetoothRemoteGATTCharacteristic {\u000a  [SameObject]\u000a  readonly attribute BluetoothRemoteGATTService service;\u000a  readonly attribute UUID uuid;\u000a  readonly attribute BluetoothCharacteristicProperties properties;\u000a  readonly attribute DataView? value;\u000a  Promise<BluetoothRemoteGATTDescriptor> getDescriptor(BluetoothDescriptorUUID descriptor);\u000a  Promise<sequence<BluetoothRemoteGATTDescriptor>>\u000a    getDescriptors(optional BluetoothDescriptorUUID descriptor);\u000a  Promise<DataView> readValue();\u000a  Promise<void> writeValue(BufferSource value);\u000a  Promise<BluetoothRemoteGATTCharacteristic> startNotifications();\u000a  Promise<BluetoothRemoteGATTCharacteristic> stopNotifications();\u000a};\u000aBluetoothRemoteGATTCharacteristic implements EventTarget;\u000aBluetoothRemoteGATTCharacteristic implements CharacteristicEventHandlers;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webbluetoothcg.github.io/web-bluetooth",timestamp:1512969102089,contents:"interface BluetoothCharacteristicProperties {\u000a  readonly attribute boolean broadcast;\u000a  readonly attribute boolean read;\u000a  readonly attribute boolean writeWithoutResponse;\u000a  readonly attribute boolean write;\u000a  readonly attribute boolean notify;\u000a  readonly attribute boolean indicate;\u000a  readonly attribute boolean authenticatedSignedWrites;\u000a  readonly attribute boolean reliableWrite;\u000a  readonly attribute boolean writableAuxiliaries;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webbluetoothcg.github.io/web-bluetooth",timestamp:1512969102089,contents:"interface BluetoothRemoteGATTDescriptor {\u000a  [SameObject]\u000a  readonly attribute BluetoothRemoteGATTCharacteristic characteristic;\u000a  readonly attribute UUID uuid;\u000a  readonly attribute DataView? value;\u000a  Promise<DataView> readValue();\u000a  Promise<void> writeValue(BufferSource value);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webbluetoothcg.github.io/web-bluetooth",timestamp:1512969102089,contents:"[NoInterfaceObject]\u000ainterface CharacteristicEventHandlers {\u000a  attribute EventHandler oncharacteristicvaluechanged;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webbluetoothcg.github.io/web-bluetooth",timestamp:1512969102089,contents:"[NoInterfaceObject]\u000ainterface BluetoothDeviceEventHandlers {\u000a  attribute EventHandler ongattserverdisconnected;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webbluetoothcg.github.io/web-bluetooth",timestamp:1512969102089,contents:"[NoInterfaceObject]\u000ainterface ServiceEventHandlers {\u000a  attribute EventHandler onserviceadded;\u000a  attribute EventHandler onservicechanged;\u000a  attribute EventHandler onserviceremoved;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webbluetoothcg.github.io/web-bluetooth",timestamp:1512969102089,contents:"typedef DOMString UUID;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webbluetoothcg.github.io/web-bluetooth",timestamp:1512969102089,contents:"interface BluetoothUUID {\u000a  static UUID getService((DOMString or unsigned long) name);\u000a  static UUID getCharacteristic((DOMString or unsigned long) name);\u000a  static UUID getDescriptor((DOMString or unsigned long) name);\u000a\u000a  static UUID canonicalUUID([EnforceRange] unsigned long alias);\u000a};\u000a\u000atypedef (DOMString or unsigned long) BluetoothServiceUUID;\u000atypedef (DOMString or unsigned long) BluetoothCharacteristicUUID;\u000atypedef (DOMString or unsigned long) BluetoothDescriptorUUID;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://webbluetoothcg.github.io/web-bluetooth",timestamp:1512969102089,contents:"partial interface Navigator {\u000a  [SameObject]\u000a  readonly attribute Bluetooth bluetooth;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/media-source",timestamp:1512969109663,contents:"enum ReadyState {\u000a    \"closed\",\u000a    \"open\",\u000a    \"ended\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/media-source",timestamp:1512969109663,contents:"enum EndOfStreamError {\u000a    \"network\",\u000a    \"decode\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/media-source",timestamp:1512969109663,contents:"[Constructor]\u000ainterface MediaSource : EventTarget {\u000a    readonly attribute SourceBufferList    sourceBuffers;\u000a    readonly attribute SourceBufferList    activeSourceBuffers;\u000a    readonly attribute ReadyState          readyState;\u000a             attribute unrestricted double duration;\u000a             attribute EventHandler        onsourceopen;\u000a             attribute EventHandler        onsourceended;\u000a             attribute EventHandler        onsourceclose;\u000a    SourceBuffer addSourceBuffer(DOMString type);\u000a    void         removeSourceBuffer(SourceBuffer sourceBuffer);\u000a    void         endOfStream(optional EndOfStreamError error);\u000a    void         setLiveSeekableRange(double start, double end);\u000a    void         clearLiveSeekableRange();\u000a    static boolean isTypeSupported(DOMString type);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/media-source",timestamp:1512969109663,contents:"enum AppendMode {\u000a    \"segments\",\u000a    \"sequence\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/media-source",timestamp:1512969109663,contents:"interface SourceBuffer : EventTarget {\u000a             attribute AppendMode          mode;\u000a    readonly attribute boolean             updating;\u000a    readonly attribute TimeRanges          buffered;\u000a             attribute double              timestampOffset;\u000a    readonly attribute AudioTrackList      audioTracks;\u000a    readonly attribute VideoTrackList      videoTracks;\u000a    readonly attribute TextTrackList       textTracks;\u000a             attribute double              appendWindowStart;\u000a             attribute unrestricted double appendWindowEnd;\u000a             attribute EventHandler        onupdatestart;\u000a             attribute EventHandler        onupdate;\u000a             attribute EventHandler        onupdateend;\u000a             attribute EventHandler        onerror;\u000a             attribute EventHandler        onabort;\u000a    void appendBuffer(BufferSource data);\u000a    void abort();\u000a    void remove(double start, unrestricted double end);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/media-source",timestamp:1512969109663,contents:"interface SourceBufferList : EventTarget {\u000a    readonly attribute unsigned long length;\u000a             attribute EventHandler  onaddsourcebuffer;\u000a             attribute EventHandler  onremovesourcebuffer;\u000a    getter SourceBuffer (unsigned long index);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/media-source",timestamp:1512969109663,contents:"[Exposed=Window]\u000apartial interface URL {\u000a    static DOMString createObjectURL(MediaSource mediaSource);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/media-source",timestamp:1512969109663,contents:"partial interface AudioTrack {\u000a    readonly attribute SourceBuffer? sourceBuffer;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/media-source",timestamp:1512969109663,contents:"partial interface VideoTrack {\u000a    readonly attribute SourceBuffer? sourceBuffer;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/media-source",timestamp:1512969109663,contents:"partial interface TextTrack {\u000a    readonly attribute SourceBuffer? sourceBuffer;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/sensors",timestamp:1512969113179,contents:"[SecureContext, Exposed=Window]\u000ainterface Sensor : EventTarget {\u000a  readonly attribute boolean activated;\u000a  readonly attribute boolean hasReading;\u000a  readonly attribute DOMHighResTimeStamp? timestamp;\u000a  void start();\u000a  void stop();\u000a  attribute EventHandler onreading;\u000a  attribute EventHandler onactivate;\u000a  attribute EventHandler onerror;\u000a};\u000a\u000adictionary SensorOptions {\u000a  double frequency;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/sensors",timestamp:1512969113179,contents:"[Constructor(DOMString type, SensorErrorEventInit errorEventInitDict),\u000a SecureContext, Exposed=Window]\u000ainterface SensorErrorEvent : Event {\u000a  readonly attribute DOMException error;\u000a};\u000a\u000adictionary SensorErrorEventInit : EventInit {\u000a  required DOMException error;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.khronos.org/registry/webgl/specs/latest/2.0",timestamp:1512969116077,contents:"\u000atypedef long long GLint64;\u000atypedef unsigned long long GLuint64;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.khronos.org/registry/webgl/specs/latest/2.0",timestamp:1512969116077,contents:"interface WebGLQuery : WebGLObject {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.khronos.org/registry/webgl/specs/latest/2.0",timestamp:1512969116077,contents:"interface WebGLSampler : WebGLObject {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.khronos.org/registry/webgl/specs/latest/2.0",timestamp:1512969116077,contents:"interface WebGLSync : WebGLObject {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.khronos.org/registry/webgl/specs/latest/2.0",timestamp:1512969116077,contents:"interface WebGLTransformFeedback : WebGLObject {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.khronos.org/registry/webgl/specs/latest/2.0",timestamp:1512969116077,contents:"interface WebGLVertexArrayObject : WebGLObject {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://www.khronos.org/registry/webgl/specs/latest/2.0",timestamp:1512969116077,contents:"\u000atypedef ([AllowShared] Uint32Array or sequence<GLuint>) Uint32List;\u000a\u000a[NoInterfaceObject]\u000ainterface WebGL2RenderingContextBase\u000a{\u000a  const GLenum READ_BUFFER                                   = 0x0C02;\u000a  const GLenum UNPACK_ROW_LENGTH                             = 0x0CF2;\u000a  const GLenum UNPACK_SKIP_ROWS                              = 0x0CF3;\u000a  const GLenum UNPACK_SKIP_PIXELS                            = 0x0CF4;\u000a  const GLenum PACK_ROW_LENGTH                               = 0x0D02;\u000a  const GLenum PACK_SKIP_ROWS                                = 0x0D03;\u000a  const GLenum PACK_SKIP_PIXELS                              = 0x0D04;\u000a  const GLenum COLOR                                         = 0x1800;\u000a  const GLenum DEPTH                                         = 0x1801;\u000a  const GLenum STENCIL                                       = 0x1802;\u000a  const GLenum RED                                           = 0x1903;\u000a  const GLenum RGB8                                          = 0x8051;\u000a  const GLenum RGBA8                                         = 0x8058;\u000a  const GLenum RGB10_A2                                      = 0x8059;\u000a  const GLenum TEXTURE_BINDING_3D                            = 0x806A;\u000a  const GLenum UNPACK_SKIP_IMAGES                            = 0x806D;\u000a  const GLenum UNPACK_IMAGE_HEIGHT                           = 0x806E;\u000a  const GLenum TEXTURE_3D                                    = 0x806F;\u000a  const GLenum TEXTURE_WRAP_R                                = 0x8072;\u000a  const GLenum MAX_3D_TEXTURE_SIZE                           = 0x8073;\u000a  const GLenum UNSIGNED_INT_2_10_10_10_REV                   = 0x8368;\u000a  const GLenum MAX_ELEMENTS_VERTICES                         = 0x80E8;\u000a  const GLenum MAX_ELEMENTS_INDICES                          = 0x80E9;\u000a  const GLenum TEXTURE_MIN_LOD                               = 0x813A;\u000a  const GLenum TEXTURE_MAX_LOD                               = 0x813B;\u000a  const GLenum TEXTURE_BASE_LEVEL                            = 0x813C;\u000a  const GLenum TEXTURE_MAX_LEVEL                             = 0x813D;\u000a  const GLenum MIN                                           = 0x8007;\u000a  const GLenum MAX                                           = 0x8008;\u000a  const GLenum DEPTH_COMPONENT24                             = 0x81A6;\u000a  const GLenum MAX_TEXTURE_LOD_BIAS                          = 0x84FD;\u000a  const GLenum TEXTURE_COMPARE_MODE                          = 0x884C;\u000a  const GLenum TEXTURE_COMPARE_FUNC                          = 0x884D;\u000a  const GLenum CURRENT_QUERY                                 = 0x8865;\u000a  const GLenum QUERY_RESULT                                  = 0x8866;\u000a  const GLenum QUERY_RESULT_AVAILABLE                        = 0x8867;\u000a  const GLenum STREAM_READ                                   = 0x88E1;\u000a  const GLenum STREAM_COPY                                   = 0x88E2;\u000a  const GLenum STATIC_READ                                   = 0x88E5;\u000a  const GLenum STATIC_COPY                                   = 0x88E6;\u000a  const GLenum DYNAMIC_READ                                  = 0x88E9;\u000a  const GLenum DYNAMIC_COPY                                  = 0x88EA;\u000a  const GLenum MAX_DRAW_BUFFERS                              = 0x8824;\u000a  const GLenum DRAW_BUFFER0                                  = 0x8825;\u000a  const GLenum DRAW_BUFFER1                                  = 0x8826;\u000a  const GLenum DRAW_BUFFER2                                  = 0x8827;\u000a  const GLenum DRAW_BUFFER3                                  = 0x8828;\u000a  const GLenum DRAW_BUFFER4                                  = 0x8829;\u000a  const GLenum DRAW_BUFFER5                                  = 0x882A;\u000a  const GLenum DRAW_BUFFER6                                  = 0x882B;\u000a  const GLenum DRAW_BUFFER7                                  = 0x882C;\u000a  const GLenum DRAW_BUFFER8                                  = 0x882D;\u000a  const GLenum DRAW_BUFFER9                                  = 0x882E;\u000a  const GLenum DRAW_BUFFER10                                 = 0x882F;\u000a  const GLenum DRAW_BUFFER11                                 = 0x8830;\u000a  const GLenum DRAW_BUFFER12                                 = 0x8831;\u000a  const GLenum DRAW_BUFFER13                                 = 0x8832;\u000a  const GLenum DRAW_BUFFER14                                 = 0x8833;\u000a  const GLenum DRAW_BUFFER15                                 = 0x8834;\u000a  const GLenum MAX_FRAGMENT_UNIFORM_COMPONENTS               = 0x8B49;\u000a  const GLenum MAX_VERTEX_UNIFORM_COMPONENTS                 = 0x8B4A;\u000a  const GLenum SAMPLER_3D                                    = 0x8B5F;\u000a  const GLenum SAMPLER_2D_SHADOW                             = 0x8B62;\u000a  const GLenum FRAGMENT_SHADER_DERIVATIVE_HINT               = 0x8B8B;\u000a  const GLenum PIXEL_PACK_BUFFER                             = 0x88EB;\u000a  const GLenum PIXEL_UNPACK_BUFFER                           = 0x88EC;\u000a  const GLenum PIXEL_PACK_BUFFER_BINDING                     = 0x88ED;\u000a  const GLenum PIXEL_UNPACK_BUFFER_BINDING                   = 0x88EF;\u000a  const GLenum FLOAT_MAT2x3                                  = 0x8B65;\u000a  const GLenum FLOAT_MAT2x4                                  = 0x8B66;\u000a  const GLenum FLOAT_MAT3x2                                  = 0x8B67;\u000a  const GLenum FLOAT_MAT3x4                                  = 0x8B68;\u000a  const GLenum FLOAT_MAT4x2                                  = 0x8B69;\u000a  const GLenum FLOAT_MAT4x3                                  = 0x8B6A;\u000a  const GLenum SRGB                                          = 0x8C40;\u000a  const GLenum SRGB8                                         = 0x8C41;\u000a  const GLenum SRGB8_ALPHA8                                  = 0x8C43;\u000a  const GLenum COMPARE_REF_TO_TEXTURE                        = 0x884E;\u000a  const GLenum RGBA32F                                       = 0x8814;\u000a  const GLenum RGB32F                                        = 0x8815;\u000a  const GLenum RGBA16F                                       = 0x881A;\u000a  const GLenum RGB16F                                        = 0x881B;\u000a  const GLenum VERTEX_ATTRIB_ARRAY_INTEGER                   = 0x88FD;\u000a  const GLenum MAX_ARRAY_TEXTURE_LAYERS                      = 0x88FF;\u000a  const GLenum MIN_PROGRAM_TEXEL_OFFSET                      = 0x8904;\u000a  const GLenum MAX_PROGRAM_TEXEL_OFFSET                      = 0x8905;\u000a  const GLenum MAX_VARYING_COMPONENTS                        = 0x8B4B;\u000a  const GLenum TEXTURE_2D_ARRAY                              = 0x8C1A;\u000a  const GLenum TEXTURE_BINDING_2D_ARRAY                      = 0x8C1D;\u000a  const GLenum R11F_G11F_B10F                                = 0x8C3A;\u000a  const GLenum UNSIGNED_INT_10F_11F_11F_REV                  = 0x8C3B;\u000a  const GLenum RGB9_E5                                       = 0x8C3D;\u000a  const GLenum UNSIGNED_INT_5_9_9_9_REV                      = 0x8C3E;\u000a  const GLenum TRANSFORM_FEEDBACK_BUFFER_MODE                = 0x8C7F;\u000a  const GLenum MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS    = 0x8C80;\u000a  const GLenum TRANSFORM_FEEDBACK_VARYINGS                   = 0x8C83;\u000a  const GLenum TRANSFORM_FEEDBACK_BUFFER_START               = 0x8C84;\u000a  const GLenum TRANSFORM_FEEDBACK_BUFFER_SIZE                = 0x8C85;\u000a  const GLenum TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN         = 0x8C88;\u000a  const GLenum RASTERIZER_DISCARD                            = 0x8C89;\u000a  const GLenum MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;\u000a  const GLenum MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS       = 0x8C8B;\u000a  const GLenum INTERLEAVED_ATTRIBS                           = 0x8C8C;\u000a  const GLenum SEPARATE_ATTRIBS                              = 0x8C8D;\u000a  const GLenum TRANSFORM_FEEDBACK_BUFFER                     = 0x8C8E;\u000a  const GLenum TRANSFORM_FEEDBACK_BUFFER_BINDING             = 0x8C8F;\u000a  const GLenum RGBA32UI                                      = 0x8D70;\u000a  const GLenum RGB32UI                                       = 0x8D71;\u000a  const GLenum RGBA16UI                                      = 0x8D76;\u000a  const GLenum RGB16UI                                       = 0x8D77;\u000a  const GLenum RGBA8UI                                       = 0x8D7C;\u000a  const GLenum RGB8UI                                        = 0x8D7D;\u000a  const GLenum RGBA32I                                       = 0x8D82;\u000a  const GLenum RGB32I                                        = 0x8D83;\u000a  const GLenum RGBA16I                                       = 0x8D88;\u000a  const GLenum RGB16I                                        = 0x8D89;\u000a  const GLenum RGBA8I                                        = 0x8D8E;\u000a  const GLenum RGB8I                                         = 0x8D8F;\u000a  const GLenum RED_INTEGER                                   = 0x8D94;\u000a  const GLenum RGB_INTEGER                                   = 0x8D98;\u000a  const GLenum RGBA_INTEGER                                  = 0x8D99;\u000a  const GLenum SAMPLER_2D_ARRAY                              = 0x8DC1;\u000a  const GLenum SAMPLER_2D_ARRAY_SHADOW                       = 0x8DC4;\u000a  const GLenum SAMPLER_CUBE_SHADOW                           = 0x8DC5;\u000a  const GLenum UNSIGNED_INT_VEC2                             = 0x8DC6;\u000a  const GLenum UNSIGNED_INT_VEC3                             = 0x8DC7;\u000a  const GLenum UNSIGNED_INT_VEC4                             = 0x8DC8;\u000a  const GLenum INT_SAMPLER_2D                                = 0x8DCA;\u000a  const GLenum INT_SAMPLER_3D                                = 0x8DCB;\u000a  const GLenum INT_SAMPLER_CUBE                              = 0x8DCC;\u000a  const GLenum INT_SAMPLER_2D_ARRAY                          = 0x8DCF;\u000a  const GLenum UNSIGNED_INT_SAMPLER_2D                       = 0x8DD2;\u000a  const GLenum UNSIGNED_INT_SAMPLER_3D                       = 0x8DD3;\u000a  const GLenum UNSIGNED_INT_SAMPLER_CUBE                     = 0x8DD4;\u000a  const GLenum UNSIGNED_INT_SAMPLER_2D_ARRAY                 = 0x8DD7;\u000a  const GLenum DEPTH_COMPONENT32F                            = 0x8CAC;\u000a  const GLenum DEPTH32F_STENCIL8                             = 0x8CAD;\u000a  const GLenum FLOAT_32_UNSIGNED_INT_24_8_REV                = 0x8DAD;\u000a  const GLenum FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING         = 0x8210;\u000a  const GLenum FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE         = 0x8211;\u000a  const GLenum FRAMEBUFFER_ATTACHMENT_RED_SIZE               = 0x8212;\u000a  const GLenum FRAMEBUFFER_ATTACHMENT_GREEN_SIZE             = 0x8213;\u000a  const GLenum FRAMEBUFFER_ATTACHMENT_BLUE_SIZE              = 0x8214;\u000a  const GLenum FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE             = 0x8215;\u000a  const GLenum FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE             = 0x8216;\u000a  const GLenum FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE           = 0x8217;\u000a  const GLenum FRAMEBUFFER_DEFAULT                           = 0x8218;\u000a  const GLenum DEPTH_STENCIL_ATTACHMENT                      = 0x821A;\u000a  const GLenum DEPTH_STENCIL                                 = 0x84F9;\u000a  const GLenum UNSIGNED_INT_24_8                             = 0x84FA;\u000a  const GLenum DEPTH24_STENCIL8                              = 0x88F0;\u000a  const GLenum UNSIGNED_NORMALIZED                           = 0x8C17;\u000a  const GLenum DRAW_FRAMEBUFFER_BINDING                      = 0x8CA6; /* Same as FRAMEBUFFER_BINDING */\u000a  const GLenum READ_FRAMEBUFFER                              = 0x8CA8;\u000a  const GLenum DRAW_FRAMEBUFFER                              = 0x8CA9;\u000a  const GLenum READ_FRAMEBUFFER_BINDING                      = 0x8CAA;\u000a  const GLenum RENDERBUFFER_SAMPLES                          = 0x8CAB;\u000a  const GLenum FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER          = 0x8CD4;\u000a  const GLenum MAX_COLOR_ATTACHMENTS                         = 0x8CDF;\u000a  const GLenum COLOR_ATTACHMENT1                             = 0x8CE1;\u000a  const GLenum COLOR_ATTACHMENT2                             = 0x8CE2;\u000a  const GLenum COLOR_ATTACHMENT3                             = 0x8CE3;\u000a  const GLenum COLOR_ATTACHMENT4                             = 0x8CE4;\u000a  const GLenum COLOR_ATTACHMENT5                             = 0x8CE5;\u000a  const GLenum COLOR_ATTACHMENT6                             = 0x8CE6;\u000a  const GLenum COLOR_ATTACHMENT7                             = 0x8CE7;\u000a  const GLenum COLOR_ATTACHMENT8                             = 0x8CE8;\u000a  const GLenum COLOR_ATTACHMENT9                             = 0x8CE9;\u000a  const GLenum COLOR_ATTACHMENT10                            = 0x8CEA;\u000a  const GLenum COLOR_ATTACHMENT11                            = 0x8CEB;\u000a  const GLenum COLOR_ATTACHMENT12                            = 0x8CEC;\u000a  const GLenum COLOR_ATTACHMENT13                            = 0x8CED;\u000a  const GLenum COLOR_ATTACHMENT14                            = 0x8CEE;\u000a  const GLenum COLOR_ATTACHMENT15                            = 0x8CEF;\u000a  const GLenum FRAMEBUFFER_INCOMPLETE_MULTISAMPLE            = 0x8D56;\u000a  const GLenum MAX_SAMPLES                                   = 0x8D57;\u000a  const GLenum HALF_FLOAT                                    = 0x140B;\u000a  const GLenum RG                                            = 0x8227;\u000a  const GLenum RG_INTEGER                                    = 0x8228;\u000a  const GLenum R8                                            = 0x8229;\u000a  const GLenum RG8                                           = 0x822B;\u000a  const GLenum R16F                                          = 0x822D;\u000a  const GLenum R32F                                          = 0x822E;\u000a  const GLenum RG16F                                         = 0x822F;\u000a  const GLenum RG32F                                         = 0x8230;\u000a  const GLenum R8I                                           = 0x8231;\u000a  const GLenum R8UI                                          = 0x8232;\u000a  const GLenum R16I                                          = 0x8233;\u000a  const GLenum R16UI                                         = 0x8234;\u000a  const GLenum R32I                                          = 0x8235;\u000a  const GLenum R32UI                                         = 0x8236;\u000a  const GLenum RG8I                                          = 0x8237;\u000a  const GLenum RG8UI                                         = 0x8238;\u000a  const GLenum RG16I                                         = 0x8239;\u000a  const GLenum RG16UI                                        = 0x823A;\u000a  const GLenum RG32I                                         = 0x823B;\u000a  const GLenum RG32UI                                        = 0x823C;\u000a  const GLenum VERTEX_ARRAY_BINDING                          = 0x85B5;\u000a  const GLenum R8_SNORM                                      = 0x8F94;\u000a  const GLenum RG8_SNORM                                     = 0x8F95;\u000a  const GLenum RGB8_SNORM                                    = 0x8F96;\u000a  const GLenum RGBA8_SNORM                                   = 0x8F97;\u000a  const GLenum SIGNED_NORMALIZED                             = 0x8F9C;\u000a  const GLenum COPY_READ_BUFFER                              = 0x8F36;\u000a  const GLenum COPY_WRITE_BUFFER                             = 0x8F37;\u000a  const GLenum COPY_READ_BUFFER_BINDING                      = 0x8F36; /* Same as COPY_READ_BUFFER */\u000a  const GLenum COPY_WRITE_BUFFER_BINDING                     = 0x8F37; /* Same as COPY_WRITE_BUFFER */\u000a  const GLenum UNIFORM_BUFFER                                = 0x8A11;\u000a  const GLenum UNIFORM_BUFFER_BINDING                        = 0x8A28;\u000a  const GLenum UNIFORM_BUFFER_START                          = 0x8A29;\u000a  const GLenum UNIFORM_BUFFER_SIZE                           = 0x8A2A;\u000a  const GLenum MAX_VERTEX_UNIFORM_BLOCKS                     = 0x8A2B;\u000a  const GLenum MAX_FRAGMENT_UNIFORM_BLOCKS                   = 0x8A2D;\u000a  const GLenum MAX_COMBINED_UNIFORM_BLOCKS                   = 0x8A2E;\u000a  const GLenum MAX_UNIFORM_BUFFER_BINDINGS                   = 0x8A2F;\u000a  const GLenum MAX_UNIFORM_BLOCK_SIZE                        = 0x8A30;\u000a  const GLenum MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS        = 0x8A31;\u000a  const GLenum MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS      = 0x8A33;\u000a  const GLenum UNIFORM_BUFFER_OFFSET_ALIGNMENT               = 0x8A34;\u000a  const GLenum ACTIVE_UNIFORM_BLOCKS                         = 0x8A36;\u000a  const GLenum UNIFORM_TYPE                                  = 0x8A37;\u000a  const GLenum UNIFORM_SIZE                                  = 0x8A38;\u000a  const GLenum UNIFORM_BLOCK_INDEX                           = 0x8A3A;\u000a  const GLenum UNIFORM_OFFSET                                = 0x8A3B;\u000a  const GLenum UNIFORM_ARRAY_STRIDE                          = 0x8A3C;\u000a  const GLenum UNIFORM_MATRIX_STRIDE                         = 0x8A3D;\u000a  const GLenum UNIFORM_IS_ROW_MAJOR                          = 0x8A3E;\u000a  const GLenum UNIFORM_BLOCK_BINDING                         = 0x8A3F;\u000a  const GLenum UNIFORM_BLOCK_DATA_SIZE                       = 0x8A40;\u000a  const GLenum UNIFORM_BLOCK_ACTIVE_UNIFORMS                 = 0x8A42;\u000a  const GLenum UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES          = 0x8A43;\u000a  const GLenum UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER     = 0x8A44;\u000a  const GLenum UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER   = 0x8A46;\u000a  const GLenum INVALID_INDEX                                 = 0xFFFFFFFF;\u000a  const GLenum MAX_VERTEX_OUTPUT_COMPONENTS                  = 0x9122;\u000a  const GLenum MAX_FRAGMENT_INPUT_COMPONENTS                 = 0x9125;\u000a  const GLenum MAX_SERVER_WAIT_TIMEOUT                       = 0x9111;\u000a  const GLenum OBJECT_TYPE                                   = 0x9112;\u000a  const GLenum SYNC_CONDITION                                = 0x9113;\u000a  const GLenum SYNC_STATUS                                   = 0x9114;\u000a  const GLenum SYNC_FLAGS                                    = 0x9115;\u000a  const GLenum SYNC_FENCE                                    = 0x9116;\u000a  const GLenum SYNC_GPU_COMMANDS_COMPLETE                    = 0x9117;\u000a  const GLenum UNSIGNALED                                    = 0x9118;\u000a  const GLenum SIGNALED                                      = 0x9119;\u000a  const GLenum ALREADY_SIGNALED                              = 0x911A;\u000a  const GLenum TIMEOUT_EXPIRED                               = 0x911B;\u000a  const GLenum CONDITION_SATISFIED                           = 0x911C;\u000a  const GLenum WAIT_FAILED                                   = 0x911D;\u000a  const GLenum SYNC_FLUSH_COMMANDS_BIT                       = 0x00000001;\u000a  const GLenum VERTEX_ATTRIB_ARRAY_DIVISOR                   = 0x88FE;\u000a  const GLenum ANY_SAMPLES_PASSED                            = 0x8C2F;\u000a  const GLenum ANY_SAMPLES_PASSED_CONSERVATIVE               = 0x8D6A;\u000a  const GLenum SAMPLER_BINDING                               = 0x8919;\u000a  const GLenum RGB10_A2UI                                    = 0x906F;\u000a  const GLenum INT_2_10_10_10_REV                            = 0x8D9F;\u000a  const GLenum TRANSFORM_FEEDBACK                            = 0x8E22;\u000a  const GLenum TRANSFORM_FEEDBACK_PAUSED                     = 0x8E23;\u000a  const GLenum TRANSFORM_FEEDBACK_ACTIVE                     = 0x8E24;\u000a  const GLenum TRANSFORM_FEEDBACK_BINDING                    = 0x8E25;\u000a  const GLenum TEXTURE_IMMUTABLE_FORMAT                      = 0x912F;\u000a  const GLenum MAX_ELEMENT_INDEX                             = 0x8D6B;\u000a  const GLenum TEXTURE_IMMUTABLE_LEVELS                      = 0x82DF;\u000a\u000a  const GLint64 TIMEOUT_IGNORED                              = -1;\u000a\u000a  /* WebGL-specific enums */\u000a  const GLenum MAX_CLIENT_WAIT_TIMEOUT_WEBGL                 = 0x9247;\u000a\u000a  /* Buffer objects */\u000a  // WebGL1:\u000a  void bufferData(GLenum target, GLsizeiptr size, GLenum usage);\u000a  void bufferData(GLenum target, [AllowShared] BufferSource? srcData, GLenum usage);\u000a  void bufferSubData(GLenum target, GLintptr dstByteOffset, [AllowShared] BufferSource srcData);\u000a  // WebGL2:\u000a  void bufferData(GLenum target, [AllowShared] ArrayBufferView srcData, GLenum usage, GLuint srcOffset,\u000a                  optional GLuint length = 0);\u000a  void bufferSubData(GLenum target, GLintptr dstByteOffset, [AllowShared] ArrayBufferView srcData,\u000a                     GLuint srcOffset, optional GLuint length = 0);\u000a\u000a  void copyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset,\u000a                         GLintptr writeOffset, GLsizeiptr size);\u000a  // MapBufferRange, in particular its read-only and write-only modes,\u000a  // can not be exposed safely to JavaScript. GetBufferSubData\u000a  // replaces it for the purpose of fetching data back from the GPU.\u000a  void getBufferSubData(GLenum target, GLintptr srcByteOffset, [AllowShared] ArrayBufferView dstBuffer,\u000a                        optional GLuint dstOffset = 0, optional GLuint length = 0);\u000a\u000a  /* Framebuffer objects */\u000a  void blitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0,\u000a                       GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);\u000a  void framebufferTextureLayer(GLenum target, GLenum attachment, WebGLTexture? texture, GLint level,\u000a                               GLint layer);\u000a  void invalidateFramebuffer(GLenum target, sequence<GLenum> attachments);\u000a  void invalidateSubFramebuffer(GLenum target, sequence<GLenum> attachments,\u000a                                GLint x, GLint y, GLsizei width, GLsizei height);\u000a  void readBuffer(GLenum src);\u000a\u000a  /* Renderbuffer objects */\u000a  any getInternalformatParameter(GLenum target, GLenum internalformat, GLenum pname);\u000a  void renderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat,\u000a                                      GLsizei width, GLsizei height);\u000a\u000a  /* Texture objects */\u000a  void texStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width,\u000a                    GLsizei height);\u000a  void texStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width,\u000a                    GLsizei height, GLsizei depth);\u000a\u000a  // WebGL1 legacy entrypoints:\u000a  void texImage2D(GLenum target, GLint level, GLint internalformat,\u000a                  GLsizei width, GLsizei height, GLint border, GLenum format,\u000a                  GLenum type, [AllowShared] ArrayBufferView? pixels);\u000a  void texImage2D(GLenum target, GLint level, GLint internalformat,\u000a                  GLenum format, GLenum type, TexImageSource source); // May throw DOMException\u000a\u000a  void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,\u000a                     GLsizei width, GLsizei height,\u000a                     GLenum format, GLenum type, [AllowShared] ArrayBufferView? pixels);\u000a  void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,\u000a                     GLenum format, GLenum type, TexImageSource source); // May throw DOMException\u000a\u000a  // WebGL2 entrypoints:\u000a  void texImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height,\u000a                  GLint border, GLenum format, GLenum type, GLintptr pboOffset);\u000a  void texImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height,\u000a                  GLint border, GLenum format, GLenum type,\u000a                  TexImageSource source); // May throw DOMException\u000a  void texImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height,\u000a                  GLint border, GLenum format, GLenum type, [AllowShared] ArrayBufferView srcData,\u000a                  GLuint srcOffset);\u000a\u000a  void texImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height,\u000a                  GLsizei depth, GLint border, GLenum format, GLenum type, GLintptr pboOffset);\u000a  void texImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height,\u000a                  GLsizei depth, GLint border, GLenum format, GLenum type,\u000a                  TexImageSource source); // May throw DOMException\u000a  void texImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height,\u000a                  GLsizei depth, GLint border, GLenum format, GLenum type, [AllowShared] ArrayBufferView? srcData);\u000a  void texImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height,\u000a                  GLsizei depth, GLint border, GLenum format, GLenum type, [AllowShared] ArrayBufferView srcData,\u000a                  GLuint srcOffset);\u000a\u000a  void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width,\u000a                     GLsizei height, GLenum format, GLenum type, GLintptr pboOffset);\u000a  void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width,\u000a                     GLsizei height, GLenum format, GLenum type,\u000a                     TexImageSource source); // May throw DOMException\u000a  void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width,\u000a                     GLsizei height, GLenum format, GLenum type, [AllowShared] ArrayBufferView srcData,\u000a                     GLuint srcOffset);\u000a\u000a  void texSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset,\u000a                     GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type,\u000a                     GLintptr pboOffset);\u000a  void texSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset,\u000a                     GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type,\u000a                     TexImageSource source); // May throw DOMException\u000a  void texSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset,\u000a                     GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type,\u000a                     [AllowShared] ArrayBufferView? srcData, optional GLuint srcOffset = 0);\u000a\u000a  void copyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset,\u000a                         GLint x, GLint y, GLsizei width, GLsizei height);\u000a\u000a  void compressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width,\u000a                            GLsizei height, GLint border, GLsizei imageSize, GLintptr offset);\u000a  void compressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width,\u000a                            GLsizei height, GLint border, [AllowShared] ArrayBufferView srcData,\u000a                            optional GLuint srcOffset = 0, optional GLuint srcLengthOverride = 0);\u000a\u000a  void compressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width,\u000a                            GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, GLintptr offset);\u000a  void compressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width,\u000a                            GLsizei height, GLsizei depth, GLint border, [AllowShared] ArrayBufferView srcData,\u000a                            optional GLuint srcOffset = 0, optional GLuint srcLengthOverride = 0);\u000a\u000a  void compressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,\u000a                               GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, GLintptr offset);\u000a  void compressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,\u000a                               GLsizei width, GLsizei height, GLenum format,\u000a                               [AllowShared] ArrayBufferView srcData,\u000a                               optional GLuint srcOffset = 0,\u000a                               optional GLuint srcLengthOverride = 0);\u000a\u000a  void compressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset,\u000a                               GLint zoffset, GLsizei width, GLsizei height, GLsizei depth,\u000a                               GLenum format, GLsizei imageSize, GLintptr offset);\u000a  void compressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset,\u000a                               GLint zoffset, GLsizei width, GLsizei height, GLsizei depth,\u000a                               GLenum format, [AllowShared] ArrayBufferView srcData,\u000a                               optional GLuint srcOffset = 0,\u000a                               optional GLuint srcLengthOverride = 0);\u000a\u000a  /* Programs and shaders */\u000a  [WebGLHandlesContextLoss] GLint getFragDataLocation(WebGLProgram program, DOMString name);\u000a\u000a  /* Uniforms */\u000a  void uniform1ui(WebGLUniformLocation? location, GLuint v0);\u000a  void uniform2ui(WebGLUniformLocation? location, GLuint v0, GLuint v1);\u000a  void uniform3ui(WebGLUniformLocation? location, GLuint v0, GLuint v1, GLuint v2);\u000a  void uniform4ui(WebGLUniformLocation? location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);\u000a\u000a  void uniform1fv(WebGLUniformLocation? location, Float32List data, optional GLuint srcOffset = 0,\u000a                  optional GLuint srcLength = 0);\u000a  void uniform2fv(WebGLUniformLocation? location, Float32List data, optional GLuint srcOffset = 0,\u000a                  optional GLuint srcLength = 0);\u000a  void uniform3fv(WebGLUniformLocation? location, Float32List data, optional GLuint srcOffset = 0,\u000a                  optional GLuint srcLength = 0);\u000a  void uniform4fv(WebGLUniformLocation? location, Float32List data, optional GLuint srcOffset = 0,\u000a                  optional GLuint srcLength = 0);\u000a\u000a  void uniform1iv(WebGLUniformLocation? location, Int32List data, optional GLuint srcOffset = 0,\u000a                  optional GLuint srcLength = 0);\u000a  void uniform2iv(WebGLUniformLocation? location, Int32List data, optional GLuint srcOffset = 0,\u000a                  optional GLuint srcLength = 0);\u000a  void uniform3iv(WebGLUniformLocation? location, Int32List data, optional GLuint srcOffset = 0,\u000a                  optional GLuint srcLength = 0);\u000a  void uniform4iv(WebGLUniformLocation? location, Int32List data, optional GLuint srcOffset = 0,\u000a                  optional GLuint srcLength = 0);\u000a\u000a  void uniform1uiv(WebGLUniformLocation? location, Uint32List data, optional GLuint srcOffset = 0,\u000a                  optional GLuint srcLength = 0);\u000a  void uniform2uiv(WebGLUniformLocation? location, Uint32List data, optional GLuint srcOffset = 0,\u000a                  optional GLuint srcLength = 0);\u000a  void uniform3uiv(WebGLUniformLocation? location, Uint32List data, optional GLuint srcOffset = 0,\u000a                  optional GLuint srcLength = 0);\u000a  void uniform4uiv(WebGLUniformLocation? location, Uint32List data, optional GLuint srcOffset = 0,\u000a                  optional GLuint srcLength = 0);\u000a\u000a  void uniformMatrix2fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data,\u000a                        optional GLuint srcOffset = 0, optional GLuint srcLength = 0);\u000a  void uniformMatrix3x2fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data,\u000a                          optional GLuint srcOffset = 0, optional GLuint srcLength = 0);\u000a  void uniformMatrix4x2fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data,\u000a                          optional GLuint srcOffset = 0, optional GLuint srcLength = 0);\u000a\u000a  void uniformMatrix2x3fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data,\u000a                          optional GLuint srcOffset = 0, optional GLuint srcLength = 0);\u000a  void uniformMatrix3fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data,\u000a                        optional GLuint srcOffset = 0, optional GLuint srcLength = 0);\u000a  void uniformMatrix4x3fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data,\u000a                          optional GLuint srcOffset = 0, optional GLuint srcLength = 0);\u000a\u000a  void uniformMatrix2x4fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data,\u000a                          optional GLuint srcOffset = 0, optional GLuint srcLength = 0);\u000a  void uniformMatrix3x4fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data,\u000a                          optional GLuint srcOffset = 0, optional GLuint srcLength = 0);\u000a  void uniformMatrix4fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data,\u000a                        optional GLuint srcOffset = 0, optional GLuint srcLength = 0);\u000a\u000a  /* Vertex attribs */\u000a  void vertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);\u000a  void vertexAttribI4iv(GLuint index, Int32List values);\u000a  void vertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);\u000a  void vertexAttribI4uiv(GLuint index, Uint32List values);\u000a  void vertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);\u000a\u000a  /* Writing to the drawing buffer */\u000a  void vertexAttribDivisor(GLuint index, GLuint divisor);\u000a  void drawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instanceCount);\u000a  void drawElementsInstanced(GLenum mode, GLsizei count, GLenum type, GLintptr offset, GLsizei instanceCount);\u000a  void drawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLintptr offset);\u000a\u000a  /* Reading back pixels */\u000a  // WebGL1:\u000a  void readPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type,\u000a                  [AllowShared] ArrayBufferView? dstData);\u000a  // WebGL2:\u000a  void readPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type,\u000a                  GLintptr offset);\u000a  void readPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type,\u000a                  [AllowShared] ArrayBufferView dstData, GLuint dstOffset);\u000a\u000a  /* Multiple Render Targets */\u000a  void drawBuffers(sequence<GLenum> buffers);\u000a\u000a  void clearBufferfv(GLenum buffer, GLint drawbuffer, Float32List values,\u000a                     optional GLuint srcOffset = 0);\u000a  void clearBufferiv(GLenum buffer, GLint drawbuffer, Int32List values,\u000a                     optional GLuint srcOffset = 0);\u000a  void clearBufferuiv(GLenum buffer, GLint drawbuffer, Uint32List values,\u000a                      optional GLuint srcOffset = 0);\u000a\u000a  void clearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);\u000a\u000a  /* Query Objects */\u000a  WebGLQuery? createQuery();\u000a  void deleteQuery(WebGLQuery? query);\u000a  [WebGLHandlesContextLoss] GLboolean isQuery(WebGLQuery? query);\u000a  void beginQuery(GLenum target, WebGLQuery query);\u000a  void endQuery(GLenum target);\u000a  WebGLQuery? getQuery(GLenum target, GLenum pname);\u000a  any getQueryParameter(WebGLQuery query, GLenum pname);\u000a\u000a  /* Sampler Objects */\u000a  WebGLSampler? createSampler();\u000a  void deleteSampler(WebGLSampler? sampler);\u000a  [WebGLHandlesContextLoss] GLboolean isSampler(WebGLSampler? sampler);\u000a  void bindSampler(GLuint unit, WebGLSampler? sampler);\u000a  void samplerParameteri(WebGLSampler sampler, GLenum pname, GLint param);\u000a  void samplerParameterf(WebGLSampler sampler, GLenum pname, GLfloat param);\u000a  any getSamplerParameter(WebGLSampler sampler, GLenum pname);\u000a\u000a  /* Sync objects */\u000a  WebGLSync? fenceSync(GLenum condition, GLbitfield flags);\u000a  [WebGLHandlesContextLoss] GLboolean isSync(WebGLSync? sync);\u000a  void deleteSync(WebGLSync? sync);\u000a  GLenum clientWaitSync(WebGLSync sync, GLbitfield flags, GLuint64 timeout);\u000a  void waitSync(WebGLSync sync, GLbitfield flags, GLint64 timeout);\u000a  any getSyncParameter(WebGLSync sync, GLenum pname);\u000a\u000a  /* Transform Feedback */\u000a  WebGLTransformFeedback? createTransformFeedback();\u000a  void deleteTransformFeedback(WebGLTransformFeedback? tf);\u000a  [WebGLHandlesContextLoss] GLboolean isTransformFeedback(WebGLTransformFeedback? tf);\u000a  void bindTransformFeedback (GLenum target, WebGLTransformFeedback? tf);\u000a  void beginTransformFeedback(GLenum primitiveMode);\u000a  void endTransformFeedback();\u000a  void transformFeedbackVaryings(WebGLProgram program, sequence<DOMString> varyings, GLenum bufferMode);\u000a  WebGLActiveInfo? getTransformFeedbackVarying(WebGLProgram program, GLuint index);\u000a  void pauseTransformFeedback();\u000a  void resumeTransformFeedback();\u000a\u000a  /* Uniform Buffer Objects and Transform Feedback Buffers */\u000a  void bindBufferBase(GLenum target, GLuint index, WebGLBuffer? buffer);\u000a  void bindBufferRange(GLenum target, GLuint index, WebGLBuffer? buffer, GLintptr offset, GLsizeiptr size);\u000a  any getIndexedParameter(GLenum target, GLuint index);\u000a  sequence<GLuint>? getUniformIndices(WebGLProgram program, sequence<DOMString> uniformNames);\u000a  any getActiveUniforms(WebGLProgram program, sequence<GLuint> uniformIndices, GLenum pname);\u000a  GLuint getUniformBlockIndex(WebGLProgram program, DOMString uniformBlockName);\u000a  any getActiveUniformBlockParameter(WebGLProgram program, GLuint uniformBlockIndex, GLenum pname);\u000a  DOMString? getActiveUniformBlockName(WebGLProgram program, GLuint uniformBlockIndex);\u000a  void uniformBlockBinding(WebGLProgram program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);\u000a\u000a  /* Vertex Array Objects */\u000a  WebGLVertexArrayObject? createVertexArray();\u000a  void deleteVertexArray(WebGLVertexArrayObject? vertexArray);\u000a  [WebGLHandlesContextLoss] GLboolean isVertexArray(WebGLVertexArrayObject? vertexArray);\u000a  void bindVertexArray(WebGLVertexArrayObject? array);\u000a};\u000aWebGL2RenderingContextBase implements WebGLRenderingContextBase;\u000a\u000ainterface WebGL2RenderingContext\u000a{\u000a};\u000aWebGL2RenderingContext implements WebGL2RenderingContextBase;\u000a\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/permissions",timestamp:1512969118478,contents:"dictionary PermissionDescriptor {\u000a  required PermissionName name;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/permissions",timestamp:1512969118478,contents:"enum PermissionState {\u000a  \"granted\",\u000a  \"denied\",\u000a  \"prompt\",\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/permissions",timestamp:1512969118478,contents:"[Exposed=(Window,Worker)]\u000ainterface PermissionStatus : EventTarget {\u000a  readonly attribute PermissionState state;\u000a  attribute EventHandler onchange;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/permissions",timestamp:1512969118478,contents:"[Exposed=(Window)]\u000apartial interface Navigator {\u000a  readonly attribute Permissions permissions;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/permissions",timestamp:1512969118478,contents:"[Exposed=(Worker)]\u000apartial interface WorkerNavigator {\u000a  readonly attribute Permissions permissions;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/permissions",timestamp:1512969118478,contents:"[Exposed=(Window,Worker)]\u000ainterface Permissions {\u000a  Promise<PermissionStatus> query(object permissionDesc);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/permissions",timestamp:1512969118478,contents:"dictionary PushPermissionDescriptor : PermissionDescriptor {\u000a  boolean userVisibleOnly = false;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/permissions",timestamp:1512969118478,contents:"dictionary MidiPermissionDescriptor : PermissionDescriptor {\u000a  boolean sysex = false;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/permissions",timestamp:1512969118478,contents:"dictionary DevicePermissionDescriptor : PermissionDescriptor {\u000a  DOMString deviceId;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/push-api",timestamp:1512969120090,contents:"\u000a        [SecureContext]\u000a        partial interface ServiceWorkerRegistration {\u000a          readonly attribute PushManager pushManager;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/push-api",timestamp:1512969120090,contents:"\u000a        [Exposed=(Window,Worker), SecureContext]\u000a        interface PushManager {\u000a          [SameObject] static readonly attribute FrozenArray<DOMString> supportedContentEncodings;\u000a\u000a          Promise<PushSubscription> subscribe(optional PushSubscriptionOptionsInit options);\u000a          Promise<PushSubscription?> getSubscription();\u000a          Promise<PushPermissionState> permissionState(optional PushSubscriptionOptionsInit options);\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/push-api",timestamp:1512969120090,contents:"\u000a          dictionary PushSubscriptionOptionsInit {\u000a            boolean userVisibleOnly = false;\u000a            (BufferSource or DOMString)? applicationServerKey = null;\u000a          };\u000a\u000a          [Exposed=(Window,Worker), SecureContext]\u000a          interface PushSubscriptionOptions {\u000a            readonly attribute boolean userVisibleOnly;\u000a            [SameObject] readonly attribute ArrayBuffer? applicationServerKey;\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/push-api",timestamp:1512969120090,contents:"\u000a        [Exposed=(Window,Worker), SecureContext]\u000a        interface PushSubscription {\u000a          readonly attribute USVString endpoint;\u000a          readonly attribute DOMTimeStamp? expirationTime;\u000a          [SameObject] readonly attribute PushSubscriptionOptions options;\u000a          ArrayBuffer? getKey(PushEncryptionKeyName name);\u000a          Promise<boolean> unsubscribe();\u000a\u000a          PushSubscriptionJSON toJSON();\u000a        };\u000a\u000a        dictionary PushSubscriptionJSON {\u000a          USVString endpoint;\u000a          DOMTimeStamp? expirationTime;\u000a          record<DOMString, USVString> keys;\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/push-api",timestamp:1512969120090,contents:"\u000a          enum PushEncryptionKeyName {\u000a            \"p256dh\",\u000a            \"auth\"\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/push-api",timestamp:1512969120090,contents:"\u000a        [Exposed=ServiceWorker, SecureContext]\u000a        interface PushMessageData {\u000a          ArrayBuffer arrayBuffer();\u000a          Blob blob();\u000a          any json();\u000a          USVString text();\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/push-api",timestamp:1512969120090,contents:"\u000a          [Exposed=ServiceWorker, SecureContext]\u000a          partial interface ServiceWorkerGlobalScope {\u000a            attribute EventHandler onpush;\u000a            attribute EventHandler onpushsubscriptionchange;\u000a          };\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/push-api",timestamp:1512969120090,contents:"\u000a            typedef (BufferSource or USVString) PushMessageDataInit;\u000a\u000a            dictionary PushEventInit : ExtendableEventInit {\u000a              PushMessageDataInit data;\u000a            };\u000a\u000a            [Constructor(DOMString type, optional PushEventInit eventInitDict), Exposed=ServiceWorker, SecureContext]\u000a            interface PushEvent : ExtendableEvent {\u000a              readonly attribute PushMessageData? data;\u000a            };\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/push-api",timestamp:1512969120090,contents:"\u000a            dictionary PushSubscriptionChangeInit : ExtendableEventInit {\u000a              PushSubscription newSubscription = null;\u000a              PushSubscription oldSubscription = null;\u000a            };\u000a\u000a            [Constructor(DOMString type, optional PushSubscriptionChangeInit eventInitDict), Exposed=ServiceWorker, SecureContext]\u000a            interface PushSubscriptionChangeEvent : ExtendableEvent {\u000a              readonly attribute PushSubscription? newSubscription;\u000a              readonly attribute PushSubscription? oldSubscription;\u000a            };\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/push-api",timestamp:1512969120090,contents:"\u000a        enum PushPermissionState {\u000a          \"denied\",\u000a          \"granted\",\u000a          \"prompt\",\u000a        };\u000a      "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/uievents",timestamp:1512969120844,contents:"[Constructor(DOMString type, optional UIEventInit eventInitDict), Exposed=Window]\u000ainterface UIEvent : Event {\u000a  readonly attribute Window? view;\u000a  readonly attribute long detail;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/uievents",timestamp:1512969120844,contents:"dictionary UIEventInit : EventInit {\u000a  Window? view = null;\u000a  long detail = 0;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/uievents",timestamp:1512969120844,contents:"[Constructor(DOMString type, optional FocusEventInit eventInitDict), Exposed=Window]\u000ainterface FocusEvent : UIEvent {\u000a  readonly attribute EventTarget? relatedTarget;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/uievents",timestamp:1512969120844,contents:"dictionary FocusEventInit : UIEventInit {\u000a  EventTarget? relatedTarget = null;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/uievents",timestamp:1512969120844,contents:"[Constructor(DOMString type, optional MouseEventInit eventInitDict), Exposed=Window]\u000ainterface MouseEvent : UIEvent {\u000a  readonly attribute long screenX;\u000a  readonly attribute long screenY;\u000a  readonly attribute long clientX;\u000a  readonly attribute long clientY;\u000a\u000a  readonly attribute boolean ctrlKey;\u000a  readonly attribute boolean shiftKey;\u000a  readonly attribute boolean altKey;\u000a  readonly attribute boolean metaKey;\u000a\u000a  readonly attribute short button;\u000a  readonly attribute unsigned short buttons;\u000a\u000a  readonly attribute EventTarget? relatedTarget;\u000a\u000a  boolean getModifierState(DOMString keyArg);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/uievents",timestamp:1512969120844,contents:"dictionary MouseEventInit : EventModifierInit {\u000a  long screenX = 0;\u000a  long screenY = 0;\u000a  long clientX = 0;\u000a  long clientY = 0;\u000a\u000a  short button = 0;\u000a  unsigned short buttons = 0;\u000a  EventTarget? relatedTarget = null;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/uievents",timestamp:1512969120844,contents:"dictionary EventModifierInit : UIEventInit {\u000a  boolean ctrlKey = false;\u000a  boolean shiftKey = false;\u000a  boolean altKey = false;\u000a  boolean metaKey = false;\u000a\u000a  boolean modifierAltGraph = false;\u000a  boolean modifierCapsLock = false;\u000a  boolean modifierFn = false;\u000a  boolean modifierFnLock = false;\u000a  boolean modifierHyper = false;\u000a  boolean modifierNumLock = false;\u000a  boolean modifierScrollLock = false;\u000a  boolean modifierSuper = false;\u000a  boolean modifierSymbol = false;\u000a  boolean modifierSymbolLock = false;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/uievents",timestamp:1512969120844,contents:"[Constructor(DOMString type, optional WheelEventInit eventInitDict), Exposed=Window]\u000ainterface WheelEvent : MouseEvent {\u000a  // DeltaModeCode\u000a  const unsigned long DOM_DELTA_PIXEL = 0x00;\u000a  const unsigned long DOM_DELTA_LINE  = 0x01;\u000a  const unsigned long DOM_DELTA_PAGE  = 0x02;\u000a\u000a  readonly attribute double deltaX;\u000a  readonly attribute double deltaY;\u000a  readonly attribute double deltaZ;\u000a  readonly attribute unsigned long deltaMode;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/uievents",timestamp:1512969120844,contents:"dictionary WheelEventInit : MouseEventInit {\u000a  double deltaX = 0.0;\u000a  double deltaY = 0.0;\u000a  double deltaZ = 0.0;\u000a  unsigned long deltaMode = 0;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/uievents",timestamp:1512969120844,contents:"[Constructor(DOMString type, optional InputEventInit eventInitDict), Exposed=Window]\u000ainterface InputEvent : UIEvent {\u000a  readonly attribute DOMString? data;\u000a  readonly attribute boolean isComposing;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/uievents",timestamp:1512969120844,contents:"dictionary InputEventInit : UIEventInit {\u000a  DOMString? data = \"\";\u000a  boolean isComposing = false;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/uievents",timestamp:1512969120844,contents:"[Constructor(DOMString type, optional KeyboardEventInit eventInitDict), Exposed=Window]\u000ainterface KeyboardEvent : UIEvent {\u000a  // KeyLocationCode\u000a  const unsigned long DOM_KEY_LOCATION_STANDARD = 0x00;\u000a  const unsigned long DOM_KEY_LOCATION_LEFT = 0x01;\u000a  const unsigned long DOM_KEY_LOCATION_RIGHT = 0x02;\u000a  const unsigned long DOM_KEY_LOCATION_NUMPAD = 0x03;\u000a\u000a  readonly attribute DOMString key;\u000a  readonly attribute DOMString code;\u000a  readonly attribute unsigned long location;\u000a\u000a  readonly attribute boolean ctrlKey;\u000a  readonly attribute boolean shiftKey;\u000a  readonly attribute boolean altKey;\u000a  readonly attribute boolean metaKey;\u000a\u000a  readonly attribute boolean repeat;\u000a  readonly attribute boolean isComposing;\u000a\u000a  boolean getModifierState(DOMString keyArg);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/uievents",timestamp:1512969120844,contents:"dictionary KeyboardEventInit : EventModifierInit {\u000a  DOMString key = \"\";\u000a  DOMString code = \"\";\u000a  unsigned long location = 0;\u000a  boolean repeat = false;\u000a  boolean isComposing = false;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/uievents",timestamp:1512969120844,contents:"[Constructor(DOMString type, optional CompositionEventInit eventInitDict), Exposed=Window]\u000ainterface CompositionEvent : UIEvent {\u000a  readonly attribute DOMString data;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/uievents",timestamp:1512969120844,contents:"dictionary CompositionEventInit : UIEventInit {\u000a  DOMString data = \"\";\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/uievents",timestamp:1512969120844,contents:"partial interface UIEvent {\u000a  // The following support legacy user agents\u000a  readonly attribute unsigned long which;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/uievents",timestamp:1512969120844,contents:"partial interface KeyboardEvent {\u000a  // The following support legacy user agents\u000a  readonly attribute unsigned long charCode;\u000a  readonly attribute unsigned long keyCode;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"[SecureContext, Exposed=Window]\u000ainterface PublicKeyCredential : Credential {\u000a    [SameObject] readonly attribute ArrayBuffer              rawId;\u000a    [SameObject] readonly attribute AuthenticatorResponse    response;\u000a    AuthenticationExtensions getClientExtensionResults();\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"partial dictionary CredentialCreationOptions {\u000a    MakePublicKeyCredentialOptions      publicKey;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"partial dictionary CredentialRequestOptions {\u000a    PublicKeyCredentialRequestOptions      publicKey;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"partial interface PublicKeyCredential {\u000a    static Promise < boolean > isUserVerifyingPlatformAuthenticatorAvailable();\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"[SecureContext, Exposed=Window]\u000ainterface AuthenticatorResponse {\u000a    [SameObject] readonly attribute ArrayBuffer      clientDataJSON;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"[SecureContext, Exposed=Window]\u000ainterface AuthenticatorAttestationResponse : AuthenticatorResponse {\u000a    [SameObject] readonly attribute ArrayBuffer      attestationObject;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"[SecureContext, Exposed=Window]\u000ainterface AuthenticatorAssertionResponse : AuthenticatorResponse {\u000a    [SameObject] readonly attribute ArrayBuffer      authenticatorData;\u000a    [SameObject] readonly attribute ArrayBuffer      signature;\u000a    [SameObject] readonly attribute ArrayBuffer      userHandle;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"dictionary PublicKeyCredentialParameters {\u000a    required PublicKeyCredentialType      type;\u000a    required COSEAlgorithmIdentifier      alg;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"dictionary MakePublicKeyCredentialOptions {\u000a    required PublicKeyCredentialRpEntity         rp;\u000a    required PublicKeyCredentialUserEntity       user;\u000a\u000a    required BufferSource                             challenge;\u000a    required sequence<PublicKeyCredentialParameters>  pubKeyCredParams;\u000a\u000a    unsigned long                                timeout;\u000a    sequence<PublicKeyCredentialDescriptor>      excludeCredentials = [];\u000a    AuthenticatorSelectionCriteria               authenticatorSelection;\u000a    AttestationConveyancePreference              attestation = \"none\";\u000a    AuthenticationExtensions                     extensions;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"dictionary PublicKeyCredentialEntity {\u000a    required DOMString    name;\u000a    USVString             icon;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"dictionary PublicKeyCredentialRpEntity : PublicKeyCredentialEntity {\u000a    DOMString      id;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"dictionary PublicKeyCredentialUserEntity : PublicKeyCredentialEntity {\u000a    required BufferSource   id;\u000a    required DOMString      displayName;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"dictionary AuthenticatorSelectionCriteria {\u000a    AuthenticatorAttachment      authenticatorAttachment;\u000a    boolean                      requireResidentKey = false;\u000a    UserVerificationRequirement  userVerification = \"preferred\";\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"enum AuthenticatorAttachment {\u000a    \"platform\",       // Platform attachment\u000a    \"cross-platform\"  // Cross-platform attachment\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"enum AttestationConveyancePreference {\u000a    \"none\",\u000a    \"indirect\",\u000a    \"direct\"\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"dictionary PublicKeyCredentialRequestOptions {\u000a    required BufferSource                challenge;\u000a    unsigned long                        timeout;\u000a    USVString                            rpId;\u000a    sequence<PublicKeyCredentialDescriptor> allowCredentials = [];\u000a    UserVerificationRequirement          userVerification = \"preferred\";\u000a    AuthenticationExtensions             extensions;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"typedef record<DOMString, any>       AuthenticationExtensions;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"dictionary CollectedClientData {\u000a    required DOMString           type;\u000a    required DOMString           challenge;\u000a    required DOMString           origin;\u000a    required DOMString           hashAlgorithm;\u000a    DOMString                    tokenBindingId;\u000a    AuthenticationExtensions     clientExtensions;\u000a    AuthenticationExtensions     authenticatorExtensions;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"enum PublicKeyCredentialType {\u000a    \"public-key\"\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"dictionary PublicKeyCredentialDescriptor {\u000a    required PublicKeyCredentialType      type;\u000a    required BufferSource                 id;\u000a    sequence<AuthenticatorTransport>      transports;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"enum AuthenticatorTransport {\u000a    \"usb\",\u000a    \"nfc\",\u000a    \"ble\"\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"typedef long COSEAlgorithmIdentifier;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"enum UserVerificationRequirement {\u000a    \"required\",\u000a    \"preferred\",\u000a    \"discouraged\"\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"typedef sequence<AAGUID>      AuthenticatorSelectionList;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webauthn",timestamp:1512969131579,contents:"typedef BufferSource      AAGUID;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/encrypted-media",timestamp:1512969140148,contents:"partial interface Navigator {\u000a    [SecureContext] Promise<MediaKeySystemAccess> requestMediaKeySystemAccess(DOMString keySystem,\u000a                                                                              sequence<MediaKeySystemConfiguration> supportedConfigurations);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/encrypted-media",timestamp:1512969140148,contents:"enum MediaKeysRequirement {\u000a    \"required\",\u000a    \"optional\",\u000a    \"not-allowed\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/encrypted-media",timestamp:1512969140148,contents:"dictionary MediaKeySystemConfiguration {\u000a    DOMString                               label = \"\";\u000a    sequence<DOMString>                     initDataTypes = [];\u000a    sequence<MediaKeySystemMediaCapability> audioCapabilities = [];\u000a    sequence<MediaKeySystemMediaCapability> videoCapabilities = [];\u000a    MediaKeysRequirement                    distinctiveIdentifier = \"optional\";\u000a    MediaKeysRequirement                    persistentState = \"optional\";\u000a    sequence<DOMString>                     sessionTypes;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/encrypted-media",timestamp:1512969140148,contents:"dictionary MediaKeySystemMediaCapability {\u000a    DOMString contentType = \"\";\u000a    DOMString robustness = \"\";\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/encrypted-media",timestamp:1512969140148,contents:"[SecureContext]\u000ainterface MediaKeySystemAccess {\u000a    readonly attribute DOMString keySystem;\u000a    MediaKeySystemConfiguration getConfiguration();\u000a    Promise<MediaKeys>          createMediaKeys();\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/encrypted-media",timestamp:1512969140148,contents:"enum MediaKeySessionType {\u000a    \"temporary\",\u000a    \"persistent-license\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/encrypted-media",timestamp:1512969140148,contents:"[SecureContext]\u000ainterface MediaKeys {\u000a    MediaKeySession  createSession(optional MediaKeySessionType sessionType = \"temporary\");\u000a    Promise<boolean> setServerCertificate(BufferSource serverCertificate);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/encrypted-media",timestamp:1512969140148,contents:"[SecureContext]\u000ainterface MediaKeySession : EventTarget {\u000a    readonly attribute DOMString           sessionId;\u000a    readonly attribute unrestricted double expiration;\u000a    readonly attribute Promise<void>       closed;\u000a    readonly attribute MediaKeyStatusMap   keyStatuses;\u000a             attribute EventHandler        onkeystatuseschange;\u000a             attribute EventHandler        onmessage;\u000a    Promise<void>    generateRequest(DOMString initDataType,\u000a                                     BufferSource initData);\u000a    Promise<boolean> load(DOMString sessionId);\u000a    Promise<void>    update(BufferSource response);\u000a    Promise<void>    close();\u000a    Promise<void>    remove();\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/encrypted-media",timestamp:1512969140148,contents:"[SecureContext]\u000ainterface MediaKeyStatusMap {\u000a    iterable<BufferSource, MediaKeyStatus>;\u000a    readonly attribute unsigned long size;\u000a    boolean has(BufferSource keyId);\u000a    any     get(BufferSource keyId);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/encrypted-media",timestamp:1512969140148,contents:"enum MediaKeyStatus {\u000a    \"usable\",\u000a    \"expired\",\u000a    \"released\",\u000a    \"output-restricted\",\u000a    \"output-downscaled\",\u000a    \"status-pending\",\u000a    \"internal-error\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/encrypted-media",timestamp:1512969140148,contents:"enum MediaKeyMessageType {\u000a    \"license-request\",\u000a    \"license-renewal\",\u000a    \"license-release\",\u000a    \"individualization-request\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/encrypted-media",timestamp:1512969140148,contents:"[SecureContext,\u000a Constructor(DOMString type, MediaKeyMessageEventInit eventInitDict)]\u000ainterface MediaKeyMessageEvent : Event {\u000a    readonly attribute MediaKeyMessageType messageType;\u000a    readonly attribute ArrayBuffer         message;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/encrypted-media",timestamp:1512969140148,contents:"dictionary MediaKeyMessageEventInit : EventInit {\u000a    required MediaKeyMessageType messageType;\u000a    required ArrayBuffer         message;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/encrypted-media",timestamp:1512969140148,contents:"partial interface HTMLMediaElement {\u000a    [SecureContext]\u000a    readonly attribute MediaKeys?   mediaKeys;\u000a             attribute EventHandler onencrypted;\u000a             attribute EventHandler onwaitingforkey;\u000a    [SecureContext] Promise<void> setMediaKeys(MediaKeys? mediaKeys);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/encrypted-media",timestamp:1512969140148,contents:"[Constructor(DOMString type, optional MediaEncryptedEventInit eventInitDict)]\u000ainterface MediaEncryptedEvent : Event {\u000a    readonly attribute DOMString    initDataType;\u000a    readonly attribute ArrayBuffer? initData;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/encrypted-media",timestamp:1512969140148,contents:"dictionary MediaEncryptedEventInit : EventInit {\u000a    DOMString    initDataType = \"\";\u000a    ArrayBuffer? initData = null;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCConfiguration {\u000a             sequence<RTCIceServer>   iceServers;\u000a             RTCIceTransportPolicy    iceTransportPolicy = \"all\";\u000a             RTCBundlePolicy          bundlePolicy = \"balanced\";\u000a             RTCRtcpMuxPolicy         rtcpMuxPolicy = \"require\";\u000a             DOMString                peerIdentity;\u000a             sequence<RTCCertificate> certificates;\u000a             [EnforceRange]\u000a             octet                    iceCandidatePoolSize = 0;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCIceCredentialType {\u000a    \"password\",\u000a    \"oauth\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCOAuthCredential {\u000a    required DOMString        macKey;\u000a    required DOMString        accessToken;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCIceServer {\u000a    required (DOMString or sequence<DOMString>) urls;\u000a             DOMString                          username;\u000a             (DOMString or RTCOAuthCredential)     credential;\u000a             RTCIceCredentialType               credentialType = \"password\";\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCIceTransportPolicy {\u000a    \"relay\",\u000a    \"all\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCBundlePolicy {\u000a    \"balanced\",\u000a    \"max-compat\",\u000a    \"max-bundle\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCRtcpMuxPolicy {\u000a    // At risk due to lack of implementers' interest.\u000a    \"negotiate\",\u000a    \"require\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCOfferAnswerOptions {\u000a             boolean voiceActivityDetection = true;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCOfferOptions : RTCOfferAnswerOptions {\u000a             boolean iceRestart = false;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"\u000a          dictionary RTCAnswerOptions : RTCOfferAnswerOptions {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCSignalingState {\u000a    \"stable\",\u000a    \"have-local-offer\",\u000a    \"have-remote-offer\",\u000a    \"have-local-pranswer\",\u000a    \"have-remote-pranswer\",\u000a    \"closed\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCIceGatheringState {\u000a    \"new\",\u000a    \"gathering\",\u000a    \"complete\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCPeerConnectionState {\u000a    \"new\",\u000a    \"connecting\",\u000a    \"connected\",\u000a    \"disconnected\",\u000a    \"failed\",\u000a    \"closed\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCIceConnectionState {\u000a    \"new\",\u000a    \"checking\",\u000a    \"connected\",\u000a    \"completed\",\u000a    \"failed\",\u000a    \"disconnected\",\u000a    \"closed\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"\u000a          [ Constructor (optional RTCConfiguration configuration), Exposed=Window]\u000ainterface RTCPeerConnection : EventTarget  {\u000a    Promise<RTCSessionDescriptionInit> createOffer (optional RTCOfferOptions options);\u000a    Promise<RTCSessionDescriptionInit> createAnswer (optional RTCAnswerOptions options);\u000a    Promise<void>                      setLocalDescription (RTCSessionDescriptionInit description);\u000a    readonly        attribute RTCSessionDescription?    localDescription;\u000a    readonly        attribute RTCSessionDescription?    currentLocalDescription;\u000a    readonly        attribute RTCSessionDescription?    pendingLocalDescription;\u000a    Promise<void>                      setRemoteDescription (RTCSessionDescriptionInit description);\u000a    readonly        attribute RTCSessionDescription?    remoteDescription;\u000a    readonly        attribute RTCSessionDescription?    currentRemoteDescription;\u000a    readonly        attribute RTCSessionDescription?    pendingRemoteDescription;\u000a    Promise<void>                      addIceCandidate ((RTCIceCandidateInit or RTCIceCandidate) candidate);\u000a    readonly        attribute RTCSignalingState         signalingState;\u000a    readonly        attribute RTCIceGatheringState      iceGatheringState;\u000a    readonly        attribute RTCIceConnectionState     iceConnectionState;\u000a    readonly        attribute RTCPeerConnectionState    connectionState;\u000a    readonly        attribute boolean?                  canTrickleIceCandidates;\u000a    static sequence<RTCIceServer>      getDefaultIceServers ();\u000a    RTCConfiguration                   getConfiguration ();\u000a    void                               setConfiguration (RTCConfiguration configuration);\u000a    void                               close ();\u000a                    attribute EventHandler              onnegotiationneeded;\u000a                    attribute EventHandler              onicecandidate;\u000a                    attribute EventHandler              onicecandidateerror;\u000a                    attribute EventHandler              onsignalingstatechange;\u000a                    attribute EventHandler              oniceconnectionstatechange;\u000a                    attribute EventHandler              onicegatheringstatechange;\u000a                    attribute EventHandler              onconnectionstatechange;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"partial interface RTCPeerConnection {\u000a    Promise<void> createOffer (RTCSessionDescriptionCallback successCallback, RTCPeerConnectionErrorCallback failureCallback, optional RTCOfferOptions options);\u000a    Promise<void> setLocalDescription (RTCSessionDescriptionInit description, VoidFunction successCallback, RTCPeerConnectionErrorCallback failureCallback);\u000a    Promise<void> createAnswer (RTCSessionDescriptionCallback successCallback, RTCPeerConnectionErrorCallback failureCallback);\u000a    Promise<void> setRemoteDescription (RTCSessionDescriptionInit description, VoidFunction successCallback, RTCPeerConnectionErrorCallback failureCallback);\u000a    Promise<void> addIceCandidate ((RTCIceCandidateInit or RTCIceCandidate) candidate, VoidFunction successCallback, RTCPeerConnectionErrorCallback failureCallback);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"\u000a                callback RTCPeerConnectionErrorCallback = void (DOMException error);"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"\u000a                callback RTCSessionDescriptionCallback = void (RTCSessionDescriptionInit description);"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"partial dictionary RTCOfferOptions {\u000a            boolean offerToReceiveAudio;\u000a            boolean offerToReceiveVideo;\u000a          };\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCSdpType {\u000a    \"offer\",\u000a    \"pranswer\",\u000a    \"answer\",\u000a    \"rollback\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"\u000a          [ Constructor (RTCSessionDescriptionInit descriptionInitDict), Exposed=Window]\u000ainterface RTCSessionDescription {\u000a    readonly        attribute RTCSdpType type;\u000a    readonly        attribute DOMString  sdp;\u000a    [Default] object toJSON();\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCSessionDescriptionInit {\u000a    required RTCSdpType type;\u000a             DOMString  sdp = \"\";\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"\u000a          [ Constructor (optional RTCIceCandidateInit candidateInitDict), Exposed=Window]\u000ainterface RTCIceCandidate {\u000a    readonly        attribute DOMString               candidate;\u000a    readonly        attribute DOMString?              sdpMid;\u000a    readonly        attribute unsigned short?         sdpMLineIndex;\u000a    readonly        attribute DOMString?              foundation;\u000a    readonly        attribute RTCIceComponent?        component;\u000a    readonly        attribute unsigned long?          priority;\u000a    readonly        attribute DOMString?              ip;\u000a    readonly        attribute RTCIceProtocol?         protocol;\u000a    readonly        attribute unsigned short?         port;\u000a    readonly        attribute RTCIceCandidateType?    type;\u000a    readonly        attribute RTCIceTcpCandidateType? tcpType;\u000a    readonly        attribute DOMString?              relatedAddress;\u000a    readonly        attribute unsigned short?         relatedPort;\u000a    readonly        attribute DOMString?              usernameFragment;\u000a    RTCIceCandidateInit toJSON();\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCIceCandidateInit {\u000a             DOMString       candidate = \"\";\u000a             DOMString?      sdpMid = null;\u000a             unsigned short? sdpMLineIndex = null;\u000a             DOMString       usernameFragment;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCIceProtocol {\u000a    \"udp\",\u000a    \"tcp\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCIceTcpCandidateType {\u000a    \"active\",\u000a    \"passive\",\u000a    \"so\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCIceCandidateType {\u000a    \"host\",\u000a    \"srflx\",\u000a    \"prflx\",\u000a    \"relay\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"\u000a          [ Constructor (DOMString type, optional RTCPeerConnectionIceEventInit eventInitDict), Exposed=Window]\u000ainterface RTCPeerConnectionIceEvent : Event {\u000a    readonly        attribute RTCIceCandidate? candidate;\u000a    readonly        attribute DOMString?       url;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"\u000a          dictionary RTCPeerConnectionIceEventInit : EventInit {\u000a             RTCIceCandidate? candidate;\u000a             DOMString?       url;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"\u000a          [ Constructor (DOMString type, RTCPeerConnectionIceErrorEventInit eventInitDict), Exposed=Window]\u000ainterface RTCPeerConnectionIceErrorEvent : Event {\u000a    readonly        attribute DOMString      hostCandidate;\u000a    readonly        attribute DOMString      url;\u000a    readonly        attribute unsigned short errorCode;\u000a    readonly        attribute USVString      errorText;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"\u000a          dictionary RTCPeerConnectionIceErrorEventInit : EventInit {\u000a             DOMString      hostCandidate;\u000a             DOMString      url;\u000a             required unsigned short errorCode;\u000a             USVString      statusText;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCPriorityType {\u000a    \"very-low\",\u000a    \"low\",\u000a    \"medium\",\u000a    \"high\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"partial interface RTCPeerConnection {\u000a    static Promise<RTCCertificate> generateCertificate (AlgorithmIdentifier keygenAlgorithm);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCCertificateExpiration {\u000a    [EnforceRange]\u000a    DOMTimeStamp expires;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"[Exposed=Window] interface RTCCertificate {\u000a    readonly        attribute DOMTimeStamp expires;\u000a    static sequence<AlgorithmIdentifier> getSupportedAlgorithms();\u000a    sequence<RTCDtlsFingerprint> getFingerprints ();\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"partial interface RTCPeerConnection {\u000a    sequence<RTCRtpSender>      getSenders ();\u000a    sequence<RTCRtpReceiver>    getReceivers ();\u000a    sequence<RTCRtpTransceiver> getTransceivers ();\u000a    RTCRtpSender                addTrack (MediaStreamTrack track, MediaStream... streams);\u000a    void                        removeTrack (RTCRtpSender sender);\u000a    RTCRtpTransceiver           addTransceiver ((MediaStreamTrack or DOMString) trackOrKind, optional RTCRtpTransceiverInit init);\u000a                    attribute EventHandler ontrack;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCRtpTransceiverInit {\u000a             RTCRtpTransceiverDirection         direction = \"sendrecv\";\u000a             sequence<MediaStream>              streams = [];\u000a             sequence<RTCRtpEncodingParameters> sendEncodings = [];\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCRtpTransceiverDirection {\u000a    \"sendrecv\",\u000a    \"sendonly\",\u000a    \"recvonly\",\u000a    \"inactive\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"[Exposed=Window] interface RTCRtpSender {\u000a    readonly        attribute MediaStreamTrack? track;\u000a    readonly        attribute RTCDtlsTransport?  transport;\u000a    readonly        attribute RTCDtlsTransport? rtcpTransport;\u000a    static RTCRtpCapabilities getCapabilities (DOMString kind);\u000a    Promise<void>             setParameters (optional RTCRtpParameters parameters);\u000a    RTCRtpParameters          getParameters ();\u000a    Promise<void>             replaceTrack (MediaStreamTrack? withTrack);\u000a    Promise<RTCStatsReport>   getStats();\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCRtpParameters {\u000a             DOMString                                 transactionId;\u000a             sequence<RTCRtpEncodingParameters>        encodings;\u000a             sequence<RTCRtpHeaderExtensionParameters> headerExtensions;\u000a             RTCRtcpParameters                         rtcp;\u000a             sequence<RTCRtpCodecParameters>           codecs;\u000a             RTCDegradationPreference                  degradationPreference;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCRtpEncodingParameters {\u000a             octet               codecPayloadType;\u000a             RTCDtxStatus        dtx;\u000a             boolean             active = true;\u000a             RTCPriorityType     priority = \"low\";\u000a             unsigned long       ptime;\u000a             unsigned long       maxBitrate;\u000a             double              maxFramerate;\u000a             DOMString           rid;\u000a             double              scaleResolutionDownBy;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCDtxStatus {\u000a         \"disabled\",\u000a         \"enabled\"\u000a         };"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCDegradationPreference {\u000a    \"maintain-framerate\",\u000a    \"maintain-resolution\",\u000a    \"balanced\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCRtcpParameters {\u000a             DOMString cname;\u000a             boolean   reducedSize;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCRtpHeaderExtensionParameters {\u000a             DOMString      uri;\u000a             unsigned short id;\u000a             boolean        encrypted;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCRtpCodecParameters {\u000a             octet          payloadType;\u000a             DOMString      mimeType;\u000a             unsigned long  clockRate;\u000a             unsigned short channels;\u000a             DOMString      sdpFmtpLine;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCRtpCapabilities {\u000a             sequence<RTCRtpCodecCapability>           codecs;\u000a             sequence<RTCRtpHeaderExtensionCapability> headerExtensions;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCRtpCodecCapability {\u000a             DOMString mimeType;\u000a             unsigned long  clockRate;\u000a             unsigned short channels;\u000a             DOMString      sdpFmtpLine;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCRtpHeaderExtensionCapability {\u000a             DOMString uri;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"[Exposed=Window] interface RTCRtpReceiver {\u000a    readonly        attribute MediaStreamTrack  track;\u000a    readonly        attribute RTCDtlsTransport? transport;\u000a    readonly        attribute RTCDtlsTransport? rtcpTransport;\u000a    static RTCRtpCapabilities          getCapabilities (DOMString kind);\u000a    RTCRtpParameters                   getParameters ();\u000a    sequence<RTCRtpContributingSource>    getContributingSources ();\u000a    sequence<RTCRtpSynchronizationSource> getSynchronizationSources ();\u000a    Promise<RTCStatsReport>   getStats();\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCRtpContributingSource {\u000a    required DOMHighResTimeStamp timestamp;\u000a    required unsigned long       source;\u000a    required byte?     audioLevel;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCRtpSynchronizationSource : RTCRtpContributingSource {\u000a    required boolean?  voiceActivityFlag;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"[Exposed=Window] interface RTCRtpTransceiver {\u000a    readonly        attribute DOMString?                  mid;\u000a    [SameObject]\u000a    readonly        attribute RTCRtpSender                sender;\u000a    [SameObject]\u000a    readonly        attribute RTCRtpReceiver              receiver;\u000a    readonly        attribute boolean                     stopped;\u000a                    attribute RTCRtpTransceiverDirection  direction;\u000a    readonly        attribute RTCRtpTransceiverDirection? currentDirection;\u000a    void stop ();\u000a    void setCodecPreferences (sequence<RTCRtpCodecCapability> codecs);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"[Exposed=Window] interface RTCDtlsTransport : EventTarget {\u000a    readonly        attribute RTCIceTransport       transport;\u000a    readonly        attribute RTCDtlsTransportState state;\u000a    sequence<ArrayBuffer> getRemoteCertificates ();\u000a                    attribute EventHandler          onstatechange;\u000a                    attribute EventHandler          onerror;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCDtlsTransportState {\u000a    \"new\",\u000a    \"connecting\",\u000a    \"connected\",\u000a    \"closed\",\u000a    \"failed\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCDtlsFingerprint {\u000a             DOMString algorithm;\u000a             DOMString value;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"[Exposed=Window] interface RTCIceTransport : EventTarget {\u000a    readonly        attribute RTCIceRole           role;\u000a    readonly        attribute RTCIceComponent      component;\u000a    readonly        attribute RTCIceTransportState state;\u000a    readonly        attribute RTCIceGathererState gatheringState;\u000a    sequence<RTCIceCandidate> getLocalCandidates ();\u000a    sequence<RTCIceCandidate> getRemoteCandidates ();\u000a    RTCIceCandidatePair?      getSelectedCandidatePair ();\u000a    RTCIceParameters?         getLocalParameters ();\u000a    RTCIceParameters?         getRemoteParameters ();\u000a                    attribute EventHandler         onstatechange;\u000a                    attribute EventHandler         ongatheringstatechange;\u000a                    attribute EventHandler         onselectedcandidatepairchange;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCIceParameters {\u000a             DOMString usernameFragment;\u000a             DOMString password;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCIceCandidatePair {\u000a             RTCIceCandidate local;\u000a             RTCIceCandidate remote;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCIceGathererState {\u000a    \"new\",\u000a    \"gathering\",\u000a    \"complete\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCIceTransportState {\u000a    \"new\",\u000a    \"checking\",\u000a    \"connected\",\u000a    \"completed\",\u000a    \"failed\",\u000a    \"disconnected\",\u000a    \"closed\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCIceRole {\u000a    \"controlling\",\u000a    \"controlled\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCIceComponent {\u000a    \"rtp\",\u000a    \"rtcp\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"\u000a        [ Constructor (DOMString type, RTCTrackEventInit eventInitDict), Exposed=Window]\u000ainterface RTCTrackEvent : Event {\u000a    readonly        attribute RTCRtpReceiver           receiver;\u000a    readonly        attribute MediaStreamTrack         track;\u000a    [SameObject]\u000a    readonly        attribute FrozenArray<MediaStream> streams;\u000a    readonly        attribute RTCRtpTransceiver        transceiver;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCTrackEventInit : EventInit {\u000a    required RTCRtpReceiver        receiver;\u000a    required MediaStreamTrack      track;\u000a             sequence<MediaStream> streams = [];\u000a    required RTCRtpTransceiver     transceiver;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"partial interface RTCPeerConnection {\u000a    readonly        attribute RTCSctpTransport? sctp;\u000a    RTCDataChannel createDataChannel (USVString label, optional RTCDataChannelInit dataChannelDict);\u000a                    attribute EventHandler      ondatachannel;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"[Exposed=Window] interface RTCSctpTransport {\u000a    readonly        attribute RTCDtlsTransport transport;\u000a    readonly        attribute RTCSctpTransportState state;\u000a    readonly        attribute unrestricted double maxMessageSize;\u000a                    attribute EventHandler     onstatechange;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCSctpTransportState {\u000a    \"new\",\u000a    \"connecting\",\u000a    \"connected\",\u000a    \"closed\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"[Exposed=Window] interface RTCDataChannel : EventTarget {\u000a    readonly        attribute USVString           label;\u000a    readonly        attribute boolean             ordered;\u000a    readonly        attribute unsigned short?     maxPacketLifeTime;\u000a    readonly        attribute unsigned short?     maxRetransmits;\u000a    readonly        attribute USVString           protocol;\u000a    readonly        attribute boolean             negotiated;\u000a    readonly        attribute unsigned short?     id;\u000a    readonly        attribute RTCPriorityType     priority;\u000a    readonly        attribute RTCDataChannelState readyState;\u000a    readonly        attribute unsigned long       bufferedAmount;\u000a                    attribute unsigned long       bufferedAmountLowThreshold;\u000a                    attribute EventHandler        onopen;\u000a                    attribute EventHandler        onbufferedamountlow;\u000a                    attribute EventHandler        onerror;\u000a                    attribute EventHandler        onclose;\u000a    void close ();\u000a                    attribute EventHandler        onmessage;\u000a                    attribute DOMString           binaryType;\u000a    void send (USVString data);\u000a    void send (Blob data);\u000a    void send (ArrayBuffer data);\u000a    void send (ArrayBufferView data);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCDataChannelInit {\u000a             boolean         ordered = true;\u000a             unsigned short  maxPacketLifeTime;\u000a             unsigned short  maxRetransmits;\u000a             USVString       protocol = \"\";\u000a             boolean         negotiated = false;\u000a             [EnforceRange]\u000a             unsigned short  id;\u000a             RTCPriorityType priority = \"low\";\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCDataChannelState {\u000a    \"connecting\",\u000a    \"open\",\u000a    \"closing\",\u000a    \"closed\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"\u000a        [ Constructor (DOMString type, RTCDataChannelEventInit eventInitDict), Exposed=Window]\u000ainterface RTCDataChannelEvent : Event {\u000a    readonly        attribute RTCDataChannel channel;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCDataChannelEventInit : EventInit {\u000a             required RTCDataChannel channel;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"partial interface RTCRtpSender {\u000a    readonly        attribute RTCDTMFSender? dtmf;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"\u000a[Exposed=Window] interface RTCDTMFSender : EventTarget {\u000a    void insertDTMF (DOMString tones, optional unsigned long duration = 100, optional unsigned long interToneGap = 70);\u000a                    attribute EventHandler ontonechange;\u000a    readonly        attribute boolean      canInsertDTMF;\u000a    readonly        attribute DOMString    toneBuffer;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"\u000a        [ Constructor (DOMString type, RTCDTMFToneChangeEventInit eventInitDict), Exposed=Window]\u000ainterface RTCDTMFToneChangeEvent : Event {\u000a    readonly        attribute DOMString tone;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCDTMFToneChangeEventInit : EventInit {\u000a             required DOMString tone;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"partial interface RTCPeerConnection {\u000a    Promise<RTCStatsReport> getStats (optional MediaStreamTrack? selector = null);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"[Exposed=Window] interface RTCStatsReport {\u000a    readonly maplike<DOMString, object>;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCStats {\u000a             required DOMHighResTimeStamp timestamp;\u000a             required RTCStatsType        type;\u000a             required DOMString           id;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"[Global, Exposed=RTCIdentityProviderGlobalScope]\u000ainterface RTCIdentityProviderGlobalScope : WorkerGlobalScope {\u000a    readonly        attribute RTCIdentityProviderRegistrar rtcIdentityProvider;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"[Exposed=RTCIdentityProviderGlobalScope]\u000ainterface RTCIdentityProviderRegistrar {\u000a    void register (RTCIdentityProvider idp);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCIdentityProvider {\u000a    required GenerateAssertionCallback generateAssertion;\u000a    required ValidateAssertionCallback validateAssertion;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"\u000a          callback GenerateAssertionCallback = Promise<RTCIdentityAssertionResult>\u000a          (DOMString contents, DOMString origin, RTCIdentityProviderOptions options);\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"\u000a          callback ValidateAssertionCallback = Promise<RTCIdentityValidationResult>\u000a          (DOMString assertion, DOMString origin);\u000a          "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCIdentityAssertionResult {\u000a    required RTCIdentityProviderDetails idp;\u000a    required DOMString                  assertion;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCIdentityProviderDetails {\u000a    required DOMString domain;\u000a             DOMString protocol = \"default\";\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCIdentityValidationResult {\u000a    required DOMString identity;\u000a    required DOMString contents;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"partial interface RTCPeerConnection {\u000a    void               setIdentityProvider (DOMString provider, optional RTCIdentityProviderOptions options);\u000a    Promise<DOMString> getIdentityAssertion ();\u000a    readonly        attribute Promise<RTCIdentityAssertion> peerIdentity;\u000a    readonly        attribute DOMString?                    idpLoginUrl;\u000a    readonly        attribute DOMString?                    idpErrorInfo;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCIdentityProviderOptions {\u000a    DOMString protocol = \"default\";\u000a    DOMString usernameHint;\u000a    DOMString peerIdentity;\u000a};\u000a        "}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"[Constructor(DOMString idp, DOMString name), Exposed=Window]\u000ainterface RTCIdentityAssertion {\u000a    attribute DOMString idp;\u000a    attribute DOMString name;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"partial dictionary MediaStreamConstraints {\u000a             DOMString peerIdentity;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"partial interface MediaStreamTrack {\u000a    readonly        attribute boolean      isolated;\u000a                    attribute EventHandler onisolationchange;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"enum RTCErrorDetailType {\u000a              \"data-channel-failure\",\u000a              \"dtls-failure\",\u000a              \"fingerprint-failure\",\u000a              \"idp-bad-script-failure\",\u000a              \"idp-execution-failure\",\u000a              \"idp-load-failure\",\u000a              \"idp-need-login\",\u000a              \"idp-timeout\",\u000a              \"idp-tls-failure\",\u000a              \"idp-token-expired\",\u000a              \"idp-token-invalid\",\u000a              \"sctp-failure\",\u000a              \"sdp-syntax-error\",\u000a              \"hardware-encoder-not-available\",\u000a              \"hardware-encoder-error\"\u000a          };"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"[Exposed=Window,\u000a Constructor (DOMString type, RTCErrorEventInit eventInitDict)]\u000ainterface RTCErrorEvent : Event {\u000a    readonly        attribute RTCError? error;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webrtc-pc",timestamp:1512969145879,contents:"dictionary RTCErrorEventInit : EventInit {\u000a             RTCError? error = null;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webappsec-csp/embedded",timestamp:1512969153059,contents:"partial interface HTMLIFrameElement {\u000a  [CEReactions] attribute DOMString csp;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/webappsec/specs/powerfulfeatures",timestamp:1512969155310,contents:"partial interface Window {\u000a  readonly attribute boolean isSecureContext;\u000a};\u000a\u000apartial interface WorkerGlobalScope {\u000a  readonly attribute boolean isSecureContext;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/IndexedDB",timestamp:1512969156376,contents:"[Exposed=(Window,Worker)]\u000ainterface IDBRequest : EventTarget {\u000a  readonly attribute any result;\u000a  readonly attribute DOMException? error;\u000a  readonly attribute (IDBObjectStore or IDBIndex or IDBCursor)? source;\u000a  readonly attribute IDBTransaction? transaction;\u000a  readonly attribute IDBRequestReadyState readyState;\u000a\u000a  // Event handlers:\u000a  attribute EventHandler onsuccess;\u000a  attribute EventHandler onerror;\u000a};\u000a\u000aenum IDBRequestReadyState {\u000a  \"pending\",\u000a  \"done\"\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/IndexedDB",timestamp:1512969156376,contents:"[Exposed=(Window,Worker)]\u000ainterface IDBOpenDBRequest : IDBRequest {\u000a  // Event handlers:\u000a  attribute EventHandler onblocked;\u000a  attribute EventHandler onupgradeneeded;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/IndexedDB",timestamp:1512969156376,contents:"[Exposed=(Window,Worker),\u000a Constructor(DOMString type, optional IDBVersionChangeEventInit eventInitDict)]\u000ainterface IDBVersionChangeEvent : Event {\u000a  readonly attribute unsigned long long oldVersion;\u000a  readonly attribute unsigned long long? newVersion;\u000a};\u000a\u000adictionary IDBVersionChangeEventInit : EventInit {\u000a  unsigned long long oldVersion = 0;\u000a  unsigned long long? newVersion = null;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/IndexedDB",timestamp:1512969156376,contents:"partial interface WindowOrWorkerGlobalScope {\u000a  [SameObject] readonly attribute IDBFactory indexedDB;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/IndexedDB",timestamp:1512969156376,contents:"[Exposed=(Window,Worker)]\u000ainterface IDBFactory {\u000a  [NewObject] IDBOpenDBRequest open(DOMString name,\u000a                                    optional [EnforceRange] unsigned long long version);\u000a  [NewObject] IDBOpenDBRequest deleteDatabase(DOMString name);\u000a\u000a  short cmp(any first, any second);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/IndexedDB",timestamp:1512969156376,contents:"[Exposed=(Window,Worker)]\u000ainterface IDBDatabase : EventTarget {\u000a  readonly attribute DOMString name;\u000a  readonly attribute unsigned long long version;\u000a  readonly attribute DOMStringList objectStoreNames;\u000a\u000a  [NewObject] IDBTransaction transaction((DOMString or sequence<DOMString>) storeNames,\u000a                                         optional IDBTransactionMode mode = \"readonly\");\u000a  void close();\u000a\u000a  [NewObject] IDBObjectStore createObjectStore(DOMString name,\u000a                                               optional IDBObjectStoreParameters options);\u000a  void deleteObjectStore(DOMString name);\u000a\u000a  // Event handlers:\u000a  attribute EventHandler onabort;\u000a  attribute EventHandler onclose;\u000a  attribute EventHandler onerror;\u000a  attribute EventHandler onversionchange;\u000a};\u000a\u000adictionary IDBObjectStoreParameters {\u000a  (DOMString or sequence<DOMString>)? keyPath = null;\u000a  boolean autoIncrement = false;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/IndexedDB",timestamp:1512969156376,contents:"[Exposed=(Window,Worker)]\u000ainterface IDBObjectStore {\u000a  attribute DOMString name;\u000a  readonly attribute any keyPath;\u000a  readonly attribute DOMStringList indexNames;\u000a  [SameObject] readonly attribute IDBTransaction transaction;\u000a  readonly attribute boolean autoIncrement;\u000a\u000a  [NewObject] IDBRequest put(any value, optional any key);\u000a  [NewObject] IDBRequest add(any value, optional any key);\u000a  [NewObject] IDBRequest delete(any query);\u000a  [NewObject] IDBRequest clear();\u000a  [NewObject] IDBRequest get(any query);\u000a  [NewObject] IDBRequest getKey(any query);\u000a  [NewObject] IDBRequest getAll(optional any query,\u000a                                optional [EnforceRange] unsigned long count);\u000a  [NewObject] IDBRequest getAllKeys(optional any query,\u000a                                    optional [EnforceRange] unsigned long count);\u000a  [NewObject] IDBRequest count(optional any query);\u000a\u000a  [NewObject] IDBRequest openCursor(optional any query,\u000a                                    optional IDBCursorDirection direction = \"next\");\u000a  [NewObject] IDBRequest openKeyCursor(optional any query,\u000a                                       optional IDBCursorDirection direction = \"next\");\u000a\u000a  IDBIndex index(DOMString name);\u000a\u000a  [NewObject] IDBIndex createIndex(DOMString name,\u000a                                   (DOMString or sequence<DOMString>) keyPath,\u000a                                   optional IDBIndexParameters options);\u000a  void deleteIndex(DOMString name);\u000a};\u000a\u000adictionary IDBIndexParameters {\u000a  boolean unique = false;\u000a  boolean multiEntry = false;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/IndexedDB",timestamp:1512969156376,contents:"[Exposed=(Window,Worker)]\u000ainterface IDBIndex {\u000a  attribute DOMString name;\u000a  [SameObject] readonly attribute IDBObjectStore objectStore;\u000a  readonly attribute any keyPath;\u000a  readonly attribute boolean multiEntry;\u000a  readonly attribute boolean unique;\u000a\u000a  [NewObject] IDBRequest get(any query);\u000a  [NewObject] IDBRequest getKey(any query);\u000a  [NewObject] IDBRequest getAll(optional any query,\u000a                                optional [EnforceRange] unsigned long count);\u000a  [NewObject] IDBRequest getAllKeys(optional any query,\u000a                                    optional [EnforceRange] unsigned long count);\u000a  [NewObject] IDBRequest count(optional any query);\u000a\u000a  [NewObject] IDBRequest openCursor(optional any query,\u000a                                    optional IDBCursorDirection direction = \"next\");\u000a  [NewObject] IDBRequest openKeyCursor(optional any query,\u000a                                       optional IDBCursorDirection direction = \"next\");\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/IndexedDB",timestamp:1512969156376,contents:"[Exposed=(Window,Worker)]\u000ainterface IDBKeyRange {\u000a  readonly attribute any lower;\u000a  readonly attribute any upper;\u000a  readonly attribute boolean lowerOpen;\u000a  readonly attribute boolean upperOpen;\u000a\u000a  // Static construction methods:\u000a  [NewObject] static IDBKeyRange only(any value);\u000a  [NewObject] static IDBKeyRange lowerBound(any lower, optional boolean open = false);\u000a  [NewObject] static IDBKeyRange upperBound(any upper, optional boolean open = false);\u000a  [NewObject] static IDBKeyRange bound(any lower,\u000a                                       any upper,\u000a                                       optional boolean lowerOpen = false,\u000a                                       optional boolean upperOpen = false);\u000a\u000a  boolean includes(any key);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/IndexedDB",timestamp:1512969156376,contents:"[Exposed=(Window,Worker)]\u000ainterface IDBCursor {\u000a  readonly attribute (IDBObjectStore or IDBIndex) source;\u000a  readonly attribute IDBCursorDirection direction;\u000a  readonly attribute any key;\u000a  readonly attribute any primaryKey;\u000a\u000a  void advance([EnforceRange] unsigned long count);\u000a  void continue(optional any key);\u000a  void continuePrimaryKey(any key, any primaryKey);\u000a\u000a  [NewObject] IDBRequest update(any value);\u000a  [NewObject] IDBRequest delete();\u000a};\u000a\u000aenum IDBCursorDirection {\u000a  \"next\",\u000a  \"nextunique\",\u000a  \"prev\",\u000a  \"prevunique\"\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/IndexedDB",timestamp:1512969156376,contents:"[Exposed=(Window,Worker)]\u000ainterface IDBCursorWithValue : IDBCursor {\u000a  readonly attribute any value;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/IndexedDB",timestamp:1512969156376,contents:"[Exposed=(Window,Worker)]\u000ainterface IDBTransaction : EventTarget {\u000a  readonly attribute DOMStringList objectStoreNames;\u000a  readonly attribute IDBTransactionMode mode;\u000a  [SameObject] readonly attribute IDBDatabase db;\u000a  readonly attribute DOMException error;\u000a\u000a  IDBObjectStore objectStore(DOMString name);\u000a  void abort();\u000a\u000a  // Event handlers:\u000a  attribute EventHandler onabort;\u000a  attribute EventHandler oncomplete;\u000a  attribute EventHandler onerror;\u000a};\u000a\u000aenum IDBTransactionMode {\u000a  \"readonly\",\u000a  \"readwrite\",\u000a  \"versionchange\"\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"[SecureContext, Exposed=(Window,Worker)]\u000ainterface ServiceWorker : EventTarget {\u000a  readonly attribute USVString scriptURL;\u000a  readonly attribute ServiceWorkerState state;\u000a  void postMessage(any message, optional sequence<object> transfer = []);\u000a\u000a  // event\u000a  attribute EventHandler onstatechange;\u000a};\u000aServiceWorker implements AbstractWorker;\u000a\u000aenum ServiceWorkerState {\u000a  \"installing\",\u000a  \"installed\",\u000a  \"activating\",\u000a  \"activated\",\u000a  \"redundant\"\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"[SecureContext, Exposed=(Window,Worker)]\u000ainterface ServiceWorkerRegistration : EventTarget {\u000a  readonly attribute ServiceWorker? installing;\u000a  readonly attribute ServiceWorker? waiting;\u000a  readonly attribute ServiceWorker? active;\u000a  [SameObject] readonly attribute NavigationPreloadManager navigationPreload;\u000a\u000a  readonly attribute USVString scope;\u000a  readonly attribute ServiceWorkerUpdateViaCache updateViaCache;\u000a\u000a  [NewObject] Promise<void> update();\u000a  [NewObject] Promise<boolean> unregister();\u000a\u000a  // event\u000a  attribute EventHandler onupdatefound;\u000a};\u000a\u000aenum ServiceWorkerUpdateViaCache {\u000a  \"imports\",\u000a  \"all\",\u000a  \"none\"\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"partial interface Navigator {\u000a  [SecureContext, SameObject] readonly attribute ServiceWorkerContainer serviceWorker;\u000a};\u000a\u000apartial interface WorkerNavigator {\u000a  [SecureContext, SameObject] readonly attribute ServiceWorkerContainer serviceWorker;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"[SecureContext, Exposed=(Window,Worker)]\u000ainterface ServiceWorkerContainer : EventTarget {\u000a  readonly attribute ServiceWorker? controller;\u000a  readonly attribute Promise<ServiceWorkerRegistration> ready;\u000a\u000a  [NewObject] Promise<ServiceWorkerRegistration> register(USVString scriptURL, optional RegistrationOptions options);\u000a\u000a  [NewObject] Promise<any> getRegistration(optional USVString clientURL = \"\");\u000a  [NewObject] Promise<sequence<ServiceWorkerRegistration>> getRegistrations();\u000a\u000a  void startMessages();\u000a\u000a\u000a  // events\u000a  attribute EventHandler oncontrollerchange;\u000a  attribute EventHandler onmessage; // event.source of message events is ServiceWorker object\u000a  attribute EventHandler onmessageerror;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"dictionary RegistrationOptions {\u000a  USVString scope;\u000a  WorkerType type = \"classic\";\u000a  ServiceWorkerUpdateViaCache updateViaCache = \"imports\";\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"[SecureContext, Exposed=(Window,Worker)]\u000ainterface NavigationPreloadManager {\u000a  Promise<void> enable();\u000a  Promise<void> disable();\u000a  Promise<void> setHeaderValue(ByteString value);\u000a  Promise<NavigationPreloadState> getState();\u000a};\u000a\u000adictionary NavigationPreloadState {\u000a  boolean enabled = false;\u000a  ByteString headerValue;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"[Global=(Worker,ServiceWorker), Exposed=ServiceWorker]\u000ainterface ServiceWorkerGlobalScope : WorkerGlobalScope {\u000a  [SameObject] readonly attribute Clients clients;\u000a  [SameObject] readonly attribute ServiceWorkerRegistration registration;\u000a\u000a  [NewObject] Promise<void> skipWaiting();\u000a\u000a  attribute EventHandler oninstall;\u000a  attribute EventHandler onactivate;\u000a  attribute EventHandler onfetch;\u000a\u000a  // event\u000a  attribute EventHandler onmessage; // event.source of the message events is Client object\u000a  attribute EventHandler onmessageerror;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"[Exposed=ServiceWorker]\u000ainterface Client {\u000a  readonly attribute USVString url;\u000a  readonly attribute DOMString id;\u000a  readonly attribute ClientType type;\u000a  readonly attribute boolean reserved;\u000a  void postMessage(any message, optional sequence<object> transfer = []);\u000a};\u000a\u000a[Exposed=ServiceWorker]\u000ainterface WindowClient : Client {\u000a  readonly attribute VisibilityState visibilityState;\u000a  readonly attribute boolean focused;\u000a  [SameObject] readonly attribute FrozenArray<USVString> ancestorOrigins;\u000a  [NewObject] Promise<WindowClient> focus();\u000a  [NewObject] Promise<WindowClient> navigate(USVString url);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"[Exposed=ServiceWorker]\u000ainterface Clients {\u000a  // The objects returned will be new instances every time\u000a  [NewObject] Promise<any> get(DOMString id);\u000a  [NewObject] Promise<sequence<Client>> matchAll(optional ClientQueryOptions options);\u000a  [NewObject] Promise<WindowClient?> openWindow(USVString url);\u000a  [NewObject] Promise<void> claim();\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"dictionary ClientQueryOptions {\u000a  boolean includeUncontrolled = false;\u000a  boolean includeReserved = false;\u000a  ClientType type = \"window\";\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"enum ClientType {\u000a  \"window\",\u000a  \"worker\",\u000a  \"sharedworker\",\u000a  \"all\"\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"[Constructor(DOMString type, optional ExtendableEventInit eventInitDict), Exposed=ServiceWorker]\u000ainterface ExtendableEvent : Event {\u000a  void waitUntil(Promise<any> f);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"dictionary ExtendableEventInit : EventInit {\u000a  // Defined for the forward compatibility across the derived events\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"[Constructor(DOMString type, FetchEventInit eventInitDict), Exposed=ServiceWorker]\u000ainterface FetchEvent : ExtendableEvent {\u000a  [SameObject] readonly attribute Request request;\u000a  readonly attribute Promise<any> preloadResponse;\u000a  readonly attribute DOMString clientId;\u000a  readonly attribute DOMString reservedClientId;\u000a  readonly attribute DOMString targetClientId;\u000a\u000a  void respondWith(Promise<Response> r);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"dictionary FetchEventInit : ExtendableEventInit {\u000a  required Request request;\u000a  required Promise<any> preloadResponse;\u000a  DOMString clientId = \"\";\u000a  DOMString reservedClientId = \"\";\u000a  DOMString targetClientId = \"\";\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"[Constructor(DOMString type, optional ExtendableMessageEventInit eventInitDict), Exposed=ServiceWorker]\u000ainterface ExtendableMessageEvent : ExtendableEvent {\u000a  readonly attribute any data;\u000a  readonly attribute USVString origin;\u000a  readonly attribute DOMString lastEventId;\u000a  [SameObject] readonly attribute (Client or ServiceWorker or MessagePort)? source;\u000a  readonly attribute FrozenArray<MessagePort> ports;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"dictionary ExtendableMessageEventInit : ExtendableEventInit {\u000a  any data = null;\u000a  USVString origin = \"\";\u000a  DOMString lastEventId = \"\";\u000a  (Client or ServiceWorker or MessagePort)? source = null;\u000a  sequence<MessagePort> ports = [];\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"partial interface WindowOrWorkerGlobalScope {\u000a  [SecureContext, SameObject] readonly attribute CacheStorage caches;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"[SecureContext, Exposed=(Window,Worker)]\u000ainterface Cache {\u000a  [NewObject] Promise<any> match(RequestInfo request, optional CacheQueryOptions options);\u000a  [NewObject] Promise<FrozenArray<Response>> matchAll(optional RequestInfo request, optional CacheQueryOptions options);\u000a  [NewObject] Promise<void> add(RequestInfo request);\u000a  [NewObject] Promise<void> addAll(sequence<RequestInfo> requests);\u000a  [NewObject] Promise<void> put(RequestInfo request, Response response);\u000a  [NewObject] Promise<boolean> delete(RequestInfo request, optional CacheQueryOptions options);\u000a  [NewObject] Promise<FrozenArray<Request>> keys(optional RequestInfo request, optional CacheQueryOptions options);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"dictionary CacheQueryOptions {\u000a  boolean ignoreSearch = false;\u000a  boolean ignoreMethod = false;\u000a  boolean ignoreVary = false;\u000a  DOMString cacheName;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"[SecureContext, Exposed=(Window,Worker)]\u000ainterface CacheStorage {\u000a  [NewObject] Promise<any> match(RequestInfo request, optional CacheQueryOptions options);\u000a  [NewObject] Promise<boolean> has(DOMString cacheName);\u000a  [NewObject] Promise<Cache> open(DOMString cacheName);\u000a  [NewObject] Promise<boolean> delete(DOMString cacheName);\u000a  [NewObject] Promise<sequence<DOMString>> keys();\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"partial interface ServiceWorkerRegistration {\u000a  // e.g. define an API namespace\u000a  readonly attribute APISpaceType APISpace;\u000a  // e.g. define a method\u000a  Promise<T> methodName(/* list of arguments */);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"// e.g. define FunctionalEvent interface\u000ainterface FunctionalEvent : ExtendableEvent {\u000a  // add a functional event’s own attributes and methods\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/ServiceWorker",timestamp:1512969169218,contents:"partial interface ServiceWorkerGlobalScope {\u000a  attribute EventHandler onfunctionalevent;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"[Exposed=Window,\u000a Constructor,\u000a Constructor(MediaStream stream),\u000a Constructor(sequence<MediaStreamTrack> tracks)]\u000ainterface MediaStream : EventTarget {\u000a    readonly attribute DOMString    id;\u000a    sequence<MediaStreamTrack> getAudioTracks();\u000a    sequence<MediaStreamTrack> getVideoTracks();\u000a    sequence<MediaStreamTrack> getTracks();\u000a    MediaStreamTrack?          getTrackById(DOMString trackId);\u000a    void                       addTrack(MediaStreamTrack track);\u000a    void                       removeTrack(MediaStreamTrack track);\u000a    MediaStream                clone();\u000a    readonly attribute boolean      active;\u000a             attribute EventHandler onaddtrack;\u000a             attribute EventHandler onremovetrack;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"[Exposed=Window]\u000ainterface MediaStreamTrack : EventTarget {\u000a    readonly attribute DOMString             kind;\u000a    readonly attribute DOMString             id;\u000a    readonly attribute DOMString             label;\u000a             attribute boolean               enabled;\u000a    readonly attribute boolean               muted;\u000a             attribute EventHandler          onmute;\u000a             attribute EventHandler          onunmute;\u000a    readonly attribute MediaStreamTrackState readyState;\u000a             attribute EventHandler          onended;\u000a    MediaStreamTrack       clone();\u000a    void                   stop();\u000a    MediaTrackCapabilities getCapabilities();\u000a    MediaTrackConstraints  getConstraints();\u000a    MediaTrackSettings     getSettings();\u000a    Promise<void>          applyConstraints(optional MediaTrackConstraints constraints);\u000a             attribute EventHandler          onoverconstrained;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"enum MediaStreamTrackState {\u000a    \"live\",\u000a    \"ended\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"dictionary MediaTrackSupportedConstraints {\u000a    boolean width = true;\u000a    boolean height = true;\u000a    boolean aspectRatio = true;\u000a    boolean frameRate = true;\u000a    boolean facingMode = true;\u000a    boolean volume = true;\u000a    boolean sampleRate = true;\u000a    boolean sampleSize = true;\u000a    boolean echoCancellation = true;\u000a    boolean autoGainControl = true;\u000a    boolean noiseSuppression = true;\u000a    boolean latency = true;\u000a    boolean channelCount = true;\u000a    boolean deviceId = true;\u000a    boolean groupId = true;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"dictionary MediaTrackCapabilities {\u000a    LongRange           width;\u000a    LongRange           height;\u000a    DoubleRange         aspectRatio;\u000a    DoubleRange         frameRate;\u000a    sequence<DOMString> facingMode;\u000a    DoubleRange         volume;\u000a    LongRange           sampleRate;\u000a    LongRange           sampleSize;\u000a    sequence<boolean>   echoCancellation;\u000a    sequence<boolean>   autoGainControl;\u000a    sequence<boolean>   noiseSuppression;\u000a    DoubleRange         latency;\u000a    LongRange           channelCount;\u000a    DOMString           deviceId;\u000a    DOMString           groupId;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"dictionary MediaTrackConstraints : MediaTrackConstraintSet {\u000a    sequence<MediaTrackConstraintSet> advanced;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"dictionary MediaTrackConstraintSet {\u000a    ConstrainLong      width;\u000a    ConstrainLong      height;\u000a    ConstrainDouble    aspectRatio;\u000a    ConstrainDouble    frameRate;\u000a    ConstrainDOMString facingMode;\u000a    ConstrainDouble    volume;\u000a    ConstrainLong      sampleRate;\u000a    ConstrainLong      sampleSize;\u000a    ConstrainBoolean   echoCancellation;\u000a    ConstrainBoolean   autoGainControl;\u000a    ConstrainBoolean   noiseSuppression;\u000a    ConstrainDouble    latency;\u000a    ConstrainLong      channelCount;\u000a    ConstrainDOMString deviceId;\u000a    ConstrainDOMString groupId;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"dictionary MediaTrackSettings {\u000a    long      width;\u000a    long      height;\u000a    double    aspectRatio;\u000a    double    frameRate;\u000a    DOMString facingMode;\u000a    double    volume;\u000a    long      sampleRate;\u000a    long      sampleSize;\u000a    boolean   echoCancellation;\u000a    boolean   autoGainControl;\u000a    boolean   noiseSuppression;\u000a    double    latency;\u000a    long      channelCount;\u000a    DOMString deviceId;\u000a    DOMString groupId;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"enum VideoFacingModeEnum {\u000a    \"user\",\u000a    \"environment\",\u000a    \"left\",\u000a    \"right\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"[Exposed=Window,\u000a Constructor(DOMString type, MediaStreamTrackEventInit eventInitDict)]\u000ainterface MediaStreamTrackEvent : Event {\u000a    [SameObject]\u000a    readonly attribute MediaStreamTrack track;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"dictionary MediaStreamTrackEventInit : EventInit {\u000a    required MediaStreamTrack track;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"[Exposed=Window,\u000a Constructor(DOMString type, OverconstrainedErrorEventInit eventInitDict)]\u000ainterface OverconstrainedErrorEvent : Event {\u000a    readonly attribute OverconstrainedError? error;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"dictionary OverconstrainedErrorEventInit : EventInit {\u000a    OverconstrainedError? error = null;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"[Exposed=Window,\u000a NoInterfaceObject]\u000ainterface NavigatorUserMedia {\u000a    [SameObject]\u000a    readonly attribute MediaDevices mediaDevices;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"Navigator implements NavigatorUserMedia;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"[Exposed=Window]\u000ainterface MediaDevices : EventTarget {\u000a    attribute EventHandler ondevicechange;\u000a    Promise<sequence<MediaDeviceInfo>> enumerateDevices();\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"[Exposed=Window]\u000ainterface MediaDeviceInfo {\u000a    readonly attribute DOMString       deviceId;\u000a    readonly attribute MediaDeviceKind kind;\u000a    readonly attribute DOMString       label;\u000a    readonly attribute DOMString       groupId;\u000a    [Default] object toJSON();\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"enum MediaDeviceKind {\u000a    \"audioinput\",\u000a    \"audiooutput\",\u000a    \"videoinput\"\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"interface InputDeviceInfo : MediaDeviceInfo {\u000a    MediaTrackCapabilities getCapabilities();\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"partial interface NavigatorUserMedia {\u000a    void getUserMedia(MediaStreamConstraints constraints,\u000a                      NavigatorUserMediaSuccessCallback successCallback,\u000a                      NavigatorUserMediaErrorCallback errorCallback);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"partial interface MediaDevices {\u000a    MediaTrackSupportedConstraints getSupportedConstraints();\u000a    Promise<MediaStream>           getUserMedia(optional MediaStreamConstraints constraints);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"dictionary MediaStreamConstraints {\u000a    (boolean or MediaTrackConstraints) video = false;\u000a    (boolean or MediaTrackConstraints) audio = false;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"callback NavigatorUserMediaSuccessCallback = void (MediaStream stream);"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"callback NavigatorUserMediaErrorCallback = void (MediaStreamError error);"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"typedef object MediaStreamError;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"[NoInterfaceObject]\u000ainterface ConstrainablePattern {\u000a    Capabilities  getCapabilities();\u000a    Constraints   getConstraints();\u000a    Settings      getSettings();\u000a    Promise<void> applyConstraints(optional Constraints constraints);\u000a    attribute EventHandler onoverconstrained;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"dictionary DoubleRange {\u000a    double max;\u000a    double min;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"dictionary ConstrainDoubleRange : DoubleRange {\u000a    double exact;\u000a    double ideal;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"dictionary LongRange {\u000a    long max;\u000a    long min;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"dictionary ConstrainLongRange : LongRange {\u000a    long exact;\u000a    long ideal;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"dictionary ConstrainBooleanParameters {\u000a    boolean exact;\u000a    boolean ideal;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"dictionary ConstrainDOMStringParameters {\u000a    (DOMString or sequence<DOMString>) exact;\u000a    (DOMString or sequence<DOMString>) ideal;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"typedef (long or ConstrainLongRange) ConstrainLong;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"typedef (double or ConstrainDoubleRange) ConstrainDouble;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"typedef (boolean or ConstrainBooleanParameters) ConstrainBoolean;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"typedef (DOMString or sequence<DOMString> or ConstrainDOMStringParameters) ConstrainDOMString;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"dictionary Capabilities {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"dictionary Settings {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"dictionary ConstraintSet {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://w3c.github.io/mediacapture-main",timestamp:1512969180904,contents:"dictionary Constraints : ConstraintSet {\u000a    sequence<ConstraintSet> advanced;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://heycam.github.io/webidl",timestamp:1512969185553,contents:"typedef (Int8Array or Int16Array or Int32Array or\u000a         Uint8Array or Uint16Array or Uint32Array or Uint8ClampedArray or\u000a         Float32Array or Float64Array or DataView) ArrayBufferView;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://heycam.github.io/webidl",timestamp:1512969185553,contents:"typedef (ArrayBufferView or ArrayBuffer) BufferSource;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://heycam.github.io/webidl",timestamp:1512969185553,contents:"[\u000a Exposed=(Window,Worker),\u000a Constructor(optional DOMString message = \"\", optional DOMString name = \"Error\")\u000a]\u000ainterface DOMException { // but see below note about ECMAScript binding\u000a  readonly attribute DOMString name;\u000a  readonly attribute DOMString message;\u000a  readonly attribute unsigned short code;\u000a\u000a  const unsigned short INDEX_SIZE_ERR = 1;\u000a  const unsigned short DOMSTRING_SIZE_ERR = 2;\u000a  const unsigned short HIERARCHY_REQUEST_ERR = 3;\u000a  const unsigned short WRONG_DOCUMENT_ERR = 4;\u000a  const unsigned short INVALID_CHARACTER_ERR = 5;\u000a  const unsigned short NO_DATA_ALLOWED_ERR = 6;\u000a  const unsigned short NO_MODIFICATION_ALLOWED_ERR = 7;\u000a  const unsigned short NOT_FOUND_ERR = 8;\u000a  const unsigned short NOT_SUPPORTED_ERR = 9;\u000a  const unsigned short INUSE_ATTRIBUTE_ERR = 10;\u000a  const unsigned short INVALID_STATE_ERR = 11;\u000a  const unsigned short SYNTAX_ERR = 12;\u000a  const unsigned short INVALID_MODIFICATION_ERR = 13;\u000a  const unsigned short NAMESPACE_ERR = 14;\u000a  const unsigned short INVALID_ACCESS_ERR = 15;\u000a  const unsigned short VALIDATION_ERR = 16;\u000a  const unsigned short TYPE_MISMATCH_ERR = 17;\u000a  const unsigned short SECURITY_ERR = 18;\u000a  const unsigned short NETWORK_ERR = 19;\u000a  const unsigned short ABORT_ERR = 20;\u000a  const unsigned short URL_MISMATCH_ERR = 21;\u000a  const unsigned short QUOTA_EXCEEDED_ERR = 22;\u000a  const unsigned short TIMEOUT_ERR = 23;\u000a  const unsigned short INVALID_NODE_TYPE_ERR = 24;\u000a  const unsigned short DATA_CLONE_ERR = 25;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://heycam.github.io/webidl",timestamp:1512969185553,contents:"typedef unsigned long long DOMTimeStamp;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://heycam.github.io/webidl",timestamp:1512969185553,contents:"callback Function = any (any... arguments);"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://heycam.github.io/webidl",timestamp:1512969185553,contents:"callback VoidFunction = void ();"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window]\u000ainterface Example {\u000a  // this is an IDL definition\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[NoInterfaceObject]\u000ainterface NoncedElement {\u000a  attribute DOMString nonce;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a LegacyUnenumerableNamedProperties]\u000ainterface HTMLAllCollection {\u000a  readonly attribute unsigned long length;\u000a  getter Element? (unsigned long index);\u000a  getter (HTMLCollection or Element)? namedItem(DOMString name);\u000a  (HTMLCollection or Element)? item(optional DOMString nameOrIndex);\u000a\u000a  // Note: HTMLAllCollection objects have a custom [[Call]] internal method and an [[IsHTMLDDA]] internal slot.\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window]\u000ainterface HTMLFormControlsCollection : HTMLCollection {\u000a  // inherits length and item()\u000a  getter (RadioNodeList or Element)? namedItem(DOMString name); // shadows inherited namedItem()\u000a};\u000a\u000a[Exposed=Window]\u000ainterface RadioNodeList : NodeList {\u000a  attribute DOMString value;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window]\u000ainterface HTMLOptionsCollection : HTMLCollection {\u000a  // inherits item(), namedItem()\u000a  [CEReactions] attribute unsigned long length; // shadows inherited length\u000a  [CEReactions] setter void (unsigned long index, HTMLOptionElement? option);\u000a  [CEReactions] void add((HTMLOptionElement or HTMLOptGroupElement) element, optional (HTMLElement or long)? before = null);\u000a  [CEReactions] void remove(long index);\u000a  attribute long selectedIndex;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=(Window,Worker)]\u000ainterface DOMStringList {\u000a  readonly attribute unsigned long length;\u000a  getter DOMString? item(unsigned long index);\u000a  boolean contains(DOMString string);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"enum DocumentReadyState { \"loading\", \"interactive\", \"complete\" };\u000atypedef (HTMLScriptElement or SVGScriptElement) HTMLOrSVGScriptElement;\u000a\u000a[OverrideBuiltins]\u000apartial interface Document {\u000a  // resource metadata management\u000a  [PutForwards=href, Unforgeable] readonly attribute Location? location;\u000a  attribute USVString domain;\u000a  readonly attribute USVString referrer;\u000a  attribute USVString cookie;\u000a  readonly attribute DOMString lastModified;\u000a  readonly attribute DocumentReadyState readyState;\u000a\u000a  // DOM tree accessors\u000a  getter object (DOMString name);\u000a  [CEReactions] attribute DOMString title;\u000a  [CEReactions] attribute DOMString dir;\u000a  [CEReactions] attribute HTMLElement? body;\u000a  readonly attribute HTMLHeadElement? head;\u000a  [SameObject] readonly attribute HTMLCollection images;\u000a  [SameObject] readonly attribute HTMLCollection embeds;\u000a  [SameObject] readonly attribute HTMLCollection plugins;\u000a  [SameObject] readonly attribute HTMLCollection links;\u000a  [SameObject] readonly attribute HTMLCollection forms;\u000a  [SameObject] readonly attribute HTMLCollection scripts;\u000a  NodeList getElementsByName(DOMString elementName);\u000a  readonly attribute HTMLOrSVGScriptElement? currentScript; // classic scripts in a document tree only\u000a\u000a  // dynamic markup insertion\u000a  [CEReactions] Document open(optional DOMString type = \"text/html\", optional DOMString replace = \"\");\u000a  WindowProxy open(USVString url, DOMString name, DOMString features);\u000a  [CEReactions] void close();\u000a  [CEReactions] void write(DOMString... text);\u000a  [CEReactions] void writeln(DOMString... text);\u000a\u000a  // user interaction\u000a  readonly attribute WindowProxy? defaultView;\u000a  readonly attribute Element? activeElement;\u000a  boolean hasFocus();\u000a  [CEReactions] attribute DOMString designMode;\u000a  [CEReactions] boolean execCommand(DOMString commandId, optional boolean showUI = false, optional DOMString value = \"\");\u000a  boolean queryCommandEnabled(DOMString commandId);\u000a  boolean queryCommandIndeterm(DOMString commandId);\u000a  boolean queryCommandState(DOMString commandId);\u000a  boolean queryCommandSupported(DOMString commandId);\u000a  DOMString queryCommandValue(DOMString commandId);\u000a\u000a  // special event handler IDL attributes that only apply to Document objects\u000a  [LenientThis] attribute EventHandler onreadystatechange;\u000a};\u000aDocument implements GlobalEventHandlers;\u000aDocument implements DocumentAndElementEventHandlers;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLElement : Element {\u000a  // metadata attributes\u000a  [CEReactions] attribute DOMString title;\u000a  [CEReactions] attribute DOMString lang;\u000a  [CEReactions] attribute boolean translate;\u000a  [CEReactions] attribute DOMString dir;\u000a  [SameObject] readonly attribute DOMStringMap dataset;\u000a\u000a  // user interaction\u000a  [CEReactions] attribute boolean hidden;\u000a  void click();\u000a  [CEReactions] attribute long tabIndex;\u000a  void focus(optional FocusOptions options);\u000a  void blur();\u000a  [CEReactions] attribute DOMString accessKey;\u000a  readonly attribute DOMString accessKeyLabel;\u000a  [CEReactions] attribute boolean draggable;\u000a  [CEReactions] attribute boolean spellcheck;\u000a\u000a  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString innerText;\u000a};\u000a\u000aHTMLElement implements GlobalEventHandlers;\u000aHTMLElement implements DocumentAndElementEventHandlers;\u000aHTMLElement implements ElementContentEditable;\u000aHTMLElement implements NoncedElement;\u000a\u000a// Note: intentionally not [HTMLConstructor]\u000a[Exposed=Window]\u000ainterface HTMLUnknownElement : HTMLElement { };"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a OverrideBuiltins]\u000ainterface DOMStringMap {\u000a  getter DOMString (DOMString name);\u000a  [CEReactions] setter void (DOMString name, DOMString value);\u000a  [CEReactions] deleter void (DOMString name);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLHtmlElement : HTMLElement {\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLHeadElement : HTMLElement {};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLTitleElement : HTMLElement {\u000a  [CEReactions] attribute DOMString text;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLBaseElement : HTMLElement {\u000a  [CEReactions] attribute USVString href;\u000a  [CEReactions] attribute DOMString target;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLLinkElement : HTMLElement {\u000a  [CEReactions] attribute USVString href;\u000a  [CEReactions] attribute DOMString? crossOrigin;\u000a  [CEReactions] attribute DOMString rel;\u000a  [CEReactions] attribute DOMString as; // (default \"\")\u000a  [SameObject, PutForwards=value] readonly attribute DOMTokenList relList;\u000a  [CEReactions] attribute DOMString media;\u000a  [CEReactions] attribute DOMString integrity;\u000a  [CEReactions] attribute DOMString hreflang;\u000a  [CEReactions] attribute DOMString type;\u000a  [SameObject, PutForwards=value] readonly attribute DOMTokenList sizes;\u000a  [CEReactions] attribute DOMString referrerPolicy;\u000a\u000a  // also has obsolete members\u000a};\u000aHTMLLinkElement implements LinkStyle;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLMetaElement : HTMLElement {\u000a  [CEReactions] attribute DOMString name;\u000a  [CEReactions] attribute DOMString httpEquiv;\u000a  [CEReactions] attribute DOMString content;\u000a\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLStyleElement : HTMLElement {\u000a  [CEReactions] attribute DOMString media;\u000a\u000a  // also has obsolete members\u000a};\u000aHTMLStyleElement implements LinkStyle;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLBodyElement : HTMLElement {\u000a  // also has obsolete members\u000a};\u000a\u000aHTMLBodyElement implements WindowEventHandlers;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLHeadingElement : HTMLElement {\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLParagraphElement : HTMLElement {\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLHRElement : HTMLElement {\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLPreElement : HTMLElement {\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLQuoteElement : HTMLElement {\u000a  [CEReactions] attribute USVString cite;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLOListElement : HTMLElement {\u000a  [CEReactions] attribute boolean reversed;\u000a  [CEReactions] attribute long start;\u000a  [CEReactions] attribute DOMString type;\u000a\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLUListElement : HTMLElement {\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLMenuElement : HTMLElement {\u000a\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLLIElement : HTMLElement {\u000a  [CEReactions] attribute long value;\u000a\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLDListElement : HTMLElement {\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLDivElement : HTMLElement {\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLAnchorElement : HTMLElement {\u000a  [CEReactions] attribute DOMString target;\u000a  [CEReactions] attribute DOMString download;\u000a  [CEReactions] attribute USVString ping;\u000a  [CEReactions] attribute DOMString rel;\u000a  [SameObject, PutForwards=value] readonly attribute DOMTokenList relList;\u000a  [CEReactions] attribute DOMString hreflang;\u000a  [CEReactions] attribute DOMString type;\u000a\u000a  [CEReactions] attribute DOMString text;\u000a\u000a  [CEReactions] attribute DOMString referrerPolicy;\u000a\u000a  // also has obsolete members\u000a};\u000aHTMLAnchorElement implements HTMLHyperlinkElementUtils;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLDataElement : HTMLElement {\u000a  [CEReactions] attribute DOMString value;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLTimeElement : HTMLElement {\u000a  [CEReactions] attribute DOMString dateTime;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLSpanElement : HTMLElement {};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLBRElement : HTMLElement {\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a NoInterfaceObject]\u000ainterface HTMLHyperlinkElementUtils {\u000a  [CEReactions] stringifier attribute USVString href;\u000a  readonly attribute USVString origin;\u000a  [CEReactions] attribute USVString protocol;\u000a  [CEReactions] attribute USVString username;\u000a  [CEReactions] attribute USVString password;\u000a  [CEReactions] attribute USVString host;\u000a  [CEReactions] attribute USVString hostname;\u000a  [CEReactions] attribute USVString port;\u000a  [CEReactions] attribute USVString pathname;\u000a  [CEReactions] attribute USVString search;\u000a  [CEReactions] attribute USVString hash;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLModElement : HTMLElement {\u000a  [CEReactions] attribute USVString cite;\u000a  [CEReactions] attribute DOMString dateTime;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLPictureElement : HTMLElement {};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLSourceElement : HTMLElement {\u000a  [CEReactions] attribute USVString src;\u000a  [CEReactions] attribute DOMString type;\u000a  [CEReactions] attribute USVString srcset;\u000a  [CEReactions] attribute DOMString sizes;\u000a  [CEReactions] attribute DOMString media;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor,\u000a NamedConstructor=Image(optional unsigned long width, optional unsigned long height)]\u000ainterface HTMLImageElement : HTMLElement {\u000a  [CEReactions] attribute DOMString alt;\u000a  [CEReactions] attribute USVString src;\u000a  [CEReactions] attribute USVString srcset;\u000a  [CEReactions] attribute DOMString sizes;\u000a  [CEReactions] attribute DOMString? crossOrigin;\u000a  [CEReactions] attribute DOMString useMap;\u000a  [CEReactions] attribute boolean isMap;\u000a  [CEReactions] attribute unsigned long width;\u000a  [CEReactions] attribute unsigned long height;\u000a  readonly attribute unsigned long naturalWidth;\u000a  readonly attribute unsigned long naturalHeight;\u000a  readonly attribute boolean complete;\u000a  readonly attribute USVString currentSrc;\u000a  [CEReactions] attribute DOMString referrerPolicy;\u000a  [CEReactions] attribute DOMString decoding;\u000a\u000a  Promise<void> decode();\u000a\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLIFrameElement : HTMLElement {\u000a  [CEReactions] attribute USVString src;\u000a  [CEReactions] attribute DOMString srcdoc;\u000a  [CEReactions] attribute DOMString name;\u000a  [SameObject, PutForwards=value] readonly attribute DOMTokenList sandbox;\u000a  [CEReactions] attribute boolean allowFullscreen;\u000a  [CEReactions] attribute boolean allowPaymentRequest;\u000a  [CEReactions] attribute boolean allowUserMedia;\u000a  [CEReactions] attribute DOMString width;\u000a  [CEReactions] attribute DOMString height;\u000a  [CEReactions] attribute DOMString referrerPolicy;\u000a  readonly attribute Document? contentDocument;\u000a  readonly attribute WindowProxy? contentWindow;\u000a  Document? getSVGDocument();\u000a\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLEmbedElement : HTMLElement {\u000a  [CEReactions] attribute USVString src;\u000a  [CEReactions] attribute DOMString type;\u000a  [CEReactions] attribute DOMString width;\u000a  [CEReactions] attribute DOMString height;\u000a  Document? getSVGDocument();\u000a\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLObjectElement : HTMLElement {\u000a  [CEReactions] attribute USVString data;\u000a  [CEReactions] attribute DOMString type;\u000a  [CEReactions] attribute boolean typeMustMatch;\u000a  [CEReactions] attribute DOMString name;\u000a  [CEReactions] attribute DOMString useMap;\u000a  readonly attribute HTMLFormElement? form;\u000a  [CEReactions] attribute DOMString width;\u000a  [CEReactions] attribute DOMString height;\u000a  readonly attribute Document? contentDocument;\u000a  readonly attribute WindowProxy? contentWindow;\u000a  Document? getSVGDocument();\u000a\u000a  readonly attribute boolean willValidate;\u000a  readonly attribute ValidityState validity;\u000a  readonly attribute DOMString validationMessage;\u000a  boolean checkValidity();\u000a  boolean reportValidity();\u000a  void setCustomValidity(DOMString error);\u000a\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLParamElement : HTMLElement {\u000a  [CEReactions] attribute DOMString name;\u000a  [CEReactions] attribute DOMString value;\u000a\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLVideoElement : HTMLMediaElement {\u000a  [CEReactions] attribute unsigned long width;\u000a  [CEReactions] attribute unsigned long height;\u000a  readonly attribute unsigned long videoWidth;\u000a  readonly attribute unsigned long videoHeight;\u000a  [CEReactions] attribute USVString poster;\u000a  [CEReactions] attribute boolean playsInline;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor,\u000a NamedConstructor=Audio(optional DOMString src)]\u000ainterface HTMLAudioElement : HTMLMediaElement {};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLTrackElement : HTMLElement {\u000a  [CEReactions] attribute DOMString kind;\u000a  [CEReactions] attribute USVString src;\u000a  [CEReactions] attribute DOMString srclang;\u000a  [CEReactions] attribute DOMString label;\u000a  [CEReactions] attribute boolean default;\u000a\u000a  const unsigned short NONE = 0;\u000a  const unsigned short LOADING = 1;\u000a  const unsigned short LOADED = 2;\u000a  const unsigned short ERROR = 3;\u000a  readonly attribute unsigned short readyState;\u000a\u000a  readonly attribute TextTrack track;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"enum CanPlayTypeResult { \"\" /* empty string */, \"maybe\", \"probably\" };\u000atypedef (MediaStream or MediaSource or Blob) MediaProvider;\u000a\u000a[Exposed=Window]\u000ainterface HTMLMediaElement : HTMLElement {\u000a\u000a  // error state\u000a  readonly attribute MediaError? error;\u000a\u000a  // network state\u000a  [CEReactions] attribute USVString src;\u000a  attribute MediaProvider? srcObject;\u000a  readonly attribute USVString currentSrc;\u000a  [CEReactions] attribute DOMString? crossOrigin;\u000a  const unsigned short NETWORK_EMPTY = 0;\u000a  const unsigned short NETWORK_IDLE = 1;\u000a  const unsigned short NETWORK_LOADING = 2;\u000a  const unsigned short NETWORK_NO_SOURCE = 3;\u000a  readonly attribute unsigned short networkState;\u000a  [CEReactions] attribute DOMString preload;\u000a  readonly attribute TimeRanges buffered;\u000a  void load();\u000a  CanPlayTypeResult canPlayType(DOMString type);\u000a\u000a  // ready state\u000a  const unsigned short HAVE_NOTHING = 0;\u000a  const unsigned short HAVE_METADATA = 1;\u000a  const unsigned short HAVE_CURRENT_DATA = 2;\u000a  const unsigned short HAVE_FUTURE_DATA = 3;\u000a  const unsigned short HAVE_ENOUGH_DATA = 4;\u000a  readonly attribute unsigned short readyState;\u000a  readonly attribute boolean seeking;\u000a\u000a  // playback state\u000a  attribute double currentTime;\u000a  void fastSeek(double time);\u000a  readonly attribute unrestricted double duration;\u000a  object getStartDate();\u000a  readonly attribute boolean paused;\u000a  attribute double defaultPlaybackRate;\u000a  attribute double playbackRate;\u000a  readonly attribute TimeRanges played;\u000a  readonly attribute TimeRanges seekable;\u000a  readonly attribute boolean ended;\u000a  [CEReactions] attribute boolean autoplay;\u000a  [CEReactions] attribute boolean loop;\u000a  Promise<void> play();\u000a  void pause();\u000a\u000a  // controls\u000a  [CEReactions] attribute boolean controls;\u000a  attribute double volume;\u000a  attribute boolean muted;\u000a  [CEReactions] attribute boolean defaultMuted;\u000a\u000a  // tracks\u000a  [SameObject] readonly attribute AudioTrackList audioTracks;\u000a  [SameObject] readonly attribute VideoTrackList videoTracks;\u000a  [SameObject] readonly attribute TextTrackList textTracks;\u000a  TextTrack addTextTrack(TextTrackKind kind, optional DOMString label = \"\", optional DOMString language = \"\");\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window]\u000ainterface MediaError {\u000a  const unsigned short MEDIA_ERR_ABORTED = 1;\u000a  const unsigned short MEDIA_ERR_NETWORK = 2;\u000a  const unsigned short MEDIA_ERR_DECODE = 3;\u000a  const unsigned short MEDIA_ERR_SRC_NOT_SUPPORTED = 4;\u000a\u000a  readonly attribute unsigned short code;\u000a  readonly attribute DOMString message;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window]\u000ainterface AudioTrackList : EventTarget {\u000a  readonly attribute unsigned long length;\u000a  getter AudioTrack (unsigned long index);\u000a  AudioTrack? getTrackById(DOMString id);\u000a\u000a  attribute EventHandler onchange;\u000a  attribute EventHandler onaddtrack;\u000a  attribute EventHandler onremovetrack;\u000a};\u000a\u000a[Exposed=Window]\u000ainterface AudioTrack {\u000a  readonly attribute DOMString id;\u000a  readonly attribute DOMString kind;\u000a  readonly attribute DOMString label;\u000a  readonly attribute DOMString language;\u000a  attribute boolean enabled;\u000a};\u000a\u000a[Exposed=Window]\u000ainterface VideoTrackList : EventTarget {\u000a  readonly attribute unsigned long length;\u000a  getter VideoTrack (unsigned long index);\u000a  VideoTrack? getTrackById(DOMString id);\u000a  readonly attribute long selectedIndex;\u000a\u000a  attribute EventHandler onchange;\u000a  attribute EventHandler onaddtrack;\u000a  attribute EventHandler onremovetrack;\u000a};\u000a\u000a[Exposed=Window]\u000ainterface VideoTrack {\u000a  readonly attribute DOMString id;\u000a  readonly attribute DOMString kind;\u000a  readonly attribute DOMString label;\u000a  readonly attribute DOMString language;\u000a  attribute boolean selected;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window]\u000ainterface TextTrackList : EventTarget {\u000a  readonly attribute unsigned long length;\u000a  getter TextTrack (unsigned long index);\u000a  TextTrack? getTrackById(DOMString id);\u000a\u000a  attribute EventHandler onchange;\u000a  attribute EventHandler onaddtrack;\u000a  attribute EventHandler onremovetrack;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"enum TextTrackMode { \"disabled\",  \"hidden\",  \"showing\" };\u000aenum TextTrackKind { \"subtitles\",  \"captions\",  \"descriptions\",  \"chapters\",  \"metadata\" };\u000a\u000a[Exposed=Window]\u000ainterface TextTrack : EventTarget {\u000a  readonly attribute TextTrackKind kind;\u000a  readonly attribute DOMString label;\u000a  readonly attribute DOMString language;\u000a\u000a  readonly attribute DOMString id;\u000a  readonly attribute DOMString inBandMetadataTrackDispatchType;\u000a\u000a  attribute TextTrackMode mode;\u000a\u000a  readonly attribute TextTrackCueList? cues;\u000a  readonly attribute TextTrackCueList? activeCues;\u000a\u000a  void addCue(TextTrackCue cue);\u000a  void removeCue(TextTrackCue cue);\u000a\u000a  attribute EventHandler oncuechange;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window]\u000ainterface TextTrackCueList {\u000a  readonly attribute unsigned long length;\u000a  getter TextTrackCue (unsigned long index);\u000a  TextTrackCue? getCueById(DOMString id);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window]\u000ainterface TextTrackCue : EventTarget {\u000a  readonly attribute TextTrack? track;\u000a\u000a  attribute DOMString id;\u000a  attribute double startTime;\u000a  attribute double endTime;\u000a  attribute boolean pauseOnExit;\u000a\u000a  attribute EventHandler onenter;\u000a  attribute EventHandler onexit;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window]\u000ainterface TimeRanges {\u000a  readonly attribute unsigned long length;\u000a  double start(unsigned long index);\u000a  double end(unsigned long index);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a Constructor(DOMString type, optional TrackEventInit eventInitDict)]\u000ainterface TrackEvent : Event {\u000a  readonly attribute (VideoTrack or AudioTrack or TextTrack)? track;\u000a};\u000a\u000adictionary TrackEventInit : EventInit {\u000a  (VideoTrack or AudioTrack or TextTrack)? track = null;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLMapElement : HTMLElement {\u000a  [CEReactions] attribute DOMString name;\u000a  [SameObject] readonly attribute HTMLCollection areas;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLAreaElement : HTMLElement {\u000a  [CEReactions] attribute DOMString alt;\u000a  [CEReactions] attribute DOMString coords;\u000a  [CEReactions] attribute DOMString shape;\u000a  [CEReactions] attribute DOMString target;\u000a  [CEReactions] attribute DOMString download;\u000a  [CEReactions] attribute USVString ping;\u000a  [CEReactions] attribute DOMString rel;\u000a  [SameObject, PutForwards=value] readonly attribute DOMTokenList relList;\u000a  [CEReactions] attribute DOMString referrerPolicy;\u000a\u000a  // also has obsolete members\u000a};\u000aHTMLAreaElement implements HTMLHyperlinkElementUtils;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLTableElement : HTMLElement {\u000a  [CEReactions] attribute HTMLTableCaptionElement? caption;\u000a  HTMLTableCaptionElement createCaption();\u000a  [CEReactions] void deleteCaption();\u000a\u000a  [CEReactions] attribute HTMLTableSectionElement? tHead;\u000a  HTMLTableSectionElement createTHead();\u000a  [CEReactions] void deleteTHead();\u000a\u000a  [CEReactions] attribute HTMLTableSectionElement? tFoot;\u000a  HTMLTableSectionElement createTFoot();\u000a  [CEReactions] void deleteTFoot();\u000a\u000a  [SameObject] readonly attribute HTMLCollection tBodies;\u000a  HTMLTableSectionElement createTBody();\u000a\u000a  [SameObject] readonly attribute HTMLCollection rows;\u000a  HTMLTableRowElement insertRow(optional long index = -1);\u000a  [CEReactions] void deleteRow(long index);\u000a\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLTableCaptionElement : HTMLElement {\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLTableColElement : HTMLElement {\u000a  [CEReactions] attribute unsigned long span;\u000a\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLTableSectionElement : HTMLElement {\u000a  [SameObject] readonly attribute HTMLCollection rows;\u000a  HTMLElement insertRow(optional long index = -1);\u000a  [CEReactions] void deleteRow(long index);\u000a\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLTableRowElement : HTMLElement {\u000a  readonly attribute long rowIndex;\u000a  readonly attribute long sectionRowIndex;\u000a  [SameObject] readonly attribute HTMLCollection cells;\u000a  HTMLTableCellElement insertCell(optional long index = -1);\u000a  [CEReactions] void deleteCell(long index);\u000a\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLTableCellElement : HTMLElement {\u000a  [CEReactions] attribute unsigned long colSpan;\u000a  [CEReactions] attribute unsigned long rowSpan;\u000a  [CEReactions] attribute DOMString headers;\u000a  readonly attribute long cellIndex;\u000a\u000a  [CEReactions] attribute DOMString scope; // only conforming for th elements\u000a  [CEReactions] attribute DOMString abbr;  // only conforming for th elements\u000a\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a OverrideBuiltins,\u000a LegacyUnenumerableNamedProperties,\u000a HTMLConstructor]\u000ainterface HTMLFormElement : HTMLElement {\u000a  [CEReactions] attribute DOMString acceptCharset;\u000a  [CEReactions] attribute USVString action;\u000a  [CEReactions] attribute DOMString autocomplete;\u000a  [CEReactions] attribute DOMString enctype;\u000a  [CEReactions] attribute DOMString encoding;\u000a  [CEReactions] attribute DOMString method;\u000a  [CEReactions] attribute DOMString name;\u000a  [CEReactions] attribute boolean noValidate;\u000a  [CEReactions] attribute DOMString target;\u000a\u000a  [SameObject] readonly attribute HTMLFormControlsCollection elements;\u000a  readonly attribute unsigned long length;\u000a  getter Element (unsigned long index);\u000a  getter (RadioNodeList or Element) (DOMString name);\u000a\u000a  void submit();\u000a  [CEReactions] void reset();\u000a  boolean checkValidity();\u000a  boolean reportValidity();\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLLabelElement : HTMLElement {\u000a  readonly attribute HTMLFormElement? form;\u000a  [CEReactions] attribute DOMString htmlFor;\u000a  readonly attribute HTMLElement? control;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLInputElement : HTMLElement {\u000a  [CEReactions] attribute DOMString accept;\u000a  [CEReactions] attribute DOMString alt;\u000a  [CEReactions] attribute DOMString autocomplete;\u000a  [CEReactions] attribute boolean autofocus;\u000a  [CEReactions] attribute boolean defaultChecked;\u000a  attribute boolean checked;\u000a  [CEReactions] attribute DOMString dirName;\u000a  [CEReactions] attribute boolean disabled;\u000a  readonly attribute HTMLFormElement? form;\u000a  attribute FileList? files;\u000a  [CEReactions] attribute USVString formAction;\u000a  [CEReactions] attribute DOMString formEnctype;\u000a  [CEReactions] attribute DOMString formMethod;\u000a  [CEReactions] attribute boolean formNoValidate;\u000a  [CEReactions] attribute DOMString formTarget;\u000a  [CEReactions] attribute unsigned long height;\u000a  attribute boolean indeterminate;\u000a  [CEReactions] attribute DOMString inputMode;\u000a  readonly attribute HTMLElement? list;\u000a  [CEReactions] attribute DOMString max;\u000a  [CEReactions] attribute long maxLength;\u000a  [CEReactions] attribute DOMString min;\u000a  [CEReactions] attribute long minLength;\u000a  [CEReactions] attribute boolean multiple;\u000a  [CEReactions] attribute DOMString name;\u000a  [CEReactions] attribute DOMString pattern;\u000a  [CEReactions] attribute DOMString placeholder;\u000a  [CEReactions] attribute boolean readOnly;\u000a  [CEReactions] attribute boolean required;\u000a  [CEReactions] attribute unsigned long size;\u000a  [CEReactions] attribute USVString src;\u000a  [CEReactions] attribute DOMString step;\u000a  [CEReactions] attribute DOMString type;\u000a  [CEReactions] attribute DOMString defaultValue;\u000a  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString value;\u000a  attribute object? valueAsDate;\u000a  attribute unrestricted double valueAsNumber;\u000a  [CEReactions] attribute unsigned long width;\u000a\u000a  void stepUp(optional long n = 1);\u000a  void stepDown(optional long n = 1);\u000a\u000a  readonly attribute boolean willValidate;\u000a  readonly attribute ValidityState validity;\u000a  readonly attribute DOMString validationMessage;\u000a  boolean checkValidity();\u000a  boolean reportValidity();\u000a  void setCustomValidity(DOMString error);\u000a\u000a  readonly attribute NodeList? labels;\u000a\u000a  void select();\u000a  attribute unsigned long? selectionStart;\u000a  attribute unsigned long? selectionEnd;\u000a  attribute DOMString? selectionDirection;\u000a  void setRangeText(DOMString replacement);\u000a  void setRangeText(DOMString replacement, unsigned long start, unsigned long end, optional SelectionMode selectionMode = \"preserve\");\u000a  void setSelectionRange(unsigned long start, unsigned long end, optional DOMString direction);\u000a\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLButtonElement : HTMLElement {\u000a  [CEReactions] attribute boolean autofocus;\u000a  [CEReactions] attribute boolean disabled;\u000a  readonly attribute HTMLFormElement? form;\u000a  [CEReactions] attribute USVString formAction;\u000a  [CEReactions] attribute DOMString formEnctype;\u000a  [CEReactions] attribute DOMString formMethod;\u000a  [CEReactions] attribute boolean formNoValidate;\u000a  [CEReactions] attribute DOMString formTarget;\u000a  [CEReactions] attribute DOMString name;\u000a  [CEReactions] attribute DOMString type;\u000a  [CEReactions] attribute DOMString value;\u000a\u000a  readonly attribute boolean willValidate;\u000a  readonly attribute ValidityState validity;\u000a  readonly attribute DOMString validationMessage;\u000a  boolean checkValidity();\u000a  boolean reportValidity();\u000a  void setCustomValidity(DOMString error);\u000a\u000a  readonly attribute NodeList labels;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLSelectElement : HTMLElement {\u000a  [CEReactions] attribute DOMString autocomplete;\u000a  [CEReactions] attribute boolean autofocus;\u000a  [CEReactions] attribute boolean disabled;\u000a  readonly attribute HTMLFormElement? form;\u000a  [CEReactions] attribute boolean multiple;\u000a  [CEReactions] attribute DOMString name;\u000a  [CEReactions] attribute boolean required;\u000a  [CEReactions] attribute unsigned long size;\u000a\u000a  readonly attribute DOMString type;\u000a\u000a  [SameObject] readonly attribute HTMLOptionsCollection options;\u000a  [CEReactions] attribute unsigned long length;\u000a  getter Element? item(unsigned long index);\u000a  HTMLOptionElement? namedItem(DOMString name);\u000a  [CEReactions] void add((HTMLOptionElement or HTMLOptGroupElement) element, optional (HTMLElement or long)? before = null);\u000a  [CEReactions] void remove(); // ChildNode overload\u000a  [CEReactions] void remove(long index);\u000a  [CEReactions] setter void (unsigned long index, HTMLOptionElement? option);\u000a\u000a  [SameObject] readonly attribute HTMLCollection selectedOptions;\u000a  attribute long selectedIndex;\u000a  attribute DOMString value;\u000a\u000a  readonly attribute boolean willValidate;\u000a  readonly attribute ValidityState validity;\u000a  readonly attribute DOMString validationMessage;\u000a  boolean checkValidity();\u000a  boolean reportValidity();\u000a  void setCustomValidity(DOMString error);\u000a\u000a  readonly attribute NodeList labels;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLDataListElement : HTMLElement {\u000a  [SameObject] readonly attribute HTMLCollection options;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLOptGroupElement : HTMLElement {\u000a  [CEReactions] attribute boolean disabled;\u000a  [CEReactions] attribute DOMString label;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor,\u000a NamedConstructor=Option(optional DOMString text = \"\", optional DOMString value, optional boolean defaultSelected = false, optional boolean selected = false)]\u000ainterface HTMLOptionElement : HTMLElement {\u000a  [CEReactions] attribute boolean disabled;\u000a  readonly attribute HTMLFormElement? form;\u000a  [CEReactions] attribute DOMString label;\u000a  [CEReactions] attribute boolean defaultSelected;\u000a  attribute boolean selected;\u000a  [CEReactions] attribute DOMString value;\u000a\u000a  [CEReactions] attribute DOMString text;\u000a  readonly attribute long index;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLTextAreaElement : HTMLElement {\u000a  [CEReactions] attribute DOMString autocomplete;\u000a  [CEReactions] attribute boolean autofocus;\u000a  [CEReactions] attribute unsigned long cols;\u000a  [CEReactions] attribute DOMString dirName;\u000a  [CEReactions] attribute boolean disabled;\u000a  readonly attribute HTMLFormElement? form;\u000a  [CEReactions] attribute DOMString inputMode;\u000a  [CEReactions] attribute long maxLength;\u000a  [CEReactions] attribute long minLength;\u000a  [CEReactions] attribute DOMString name;\u000a  [CEReactions] attribute DOMString placeholder;\u000a  [CEReactions] attribute boolean readOnly;\u000a  [CEReactions] attribute boolean required;\u000a  [CEReactions] attribute unsigned long rows;\u000a  [CEReactions] attribute DOMString wrap;\u000a\u000a  readonly attribute DOMString type;\u000a  [CEReactions] attribute DOMString defaultValue;\u000a  [CEReactions] attribute [TreatNullAs=EmptyString] DOMString value;\u000a  readonly attribute unsigned long textLength;\u000a\u000a  readonly attribute boolean willValidate;\u000a  readonly attribute ValidityState validity;\u000a  readonly attribute DOMString validationMessage;\u000a  boolean checkValidity();\u000a  boolean reportValidity();\u000a  void setCustomValidity(DOMString error);\u000a\u000a  readonly attribute NodeList labels;\u000a\u000a  void select();\u000a  attribute unsigned long selectionStart;\u000a  attribute unsigned long selectionEnd;\u000a  attribute DOMString selectionDirection;\u000a  void setRangeText(DOMString replacement);\u000a  void setRangeText(DOMString replacement, unsigned long start, unsigned long end, optional SelectionMode selectionMode = \"preserve\");\u000a  void setSelectionRange(unsigned long start, unsigned long end, optional DOMString direction);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLOutputElement : HTMLElement {\u000a  [SameObject, PutForwards=value] readonly attribute DOMTokenList htmlFor;\u000a  readonly attribute HTMLFormElement? form;\u000a  [CEReactions] attribute DOMString name;\u000a\u000a  readonly attribute DOMString type;\u000a  [CEReactions] attribute DOMString defaultValue;\u000a  [CEReactions] attribute DOMString value;\u000a\u000a  readonly attribute boolean willValidate;\u000a  readonly attribute ValidityState validity;\u000a  readonly attribute DOMString validationMessage;\u000a  boolean checkValidity();\u000a  boolean reportValidity();\u000a  void setCustomValidity(DOMString error);\u000a\u000a  readonly attribute NodeList labels;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLProgressElement : HTMLElement {\u000a  [CEReactions] attribute double value;\u000a  [CEReactions] attribute double max;\u000a  readonly attribute double position;\u000a  readonly attribute NodeList labels;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLMeterElement : HTMLElement {\u000a  [CEReactions] attribute double value;\u000a  [CEReactions] attribute double min;\u000a  [CEReactions] attribute double max;\u000a  [CEReactions] attribute double low;\u000a  [CEReactions] attribute double high;\u000a  [CEReactions] attribute double optimum;\u000a  readonly attribute NodeList labels;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLFieldSetElement : HTMLElement {\u000a  [CEReactions] attribute boolean disabled;\u000a  readonly attribute HTMLFormElement? form;\u000a  [CEReactions] attribute DOMString name;\u000a\u000a  readonly attribute DOMString type;\u000a\u000a  [SameObject] readonly attribute HTMLCollection elements;\u000a\u000a  readonly attribute boolean willValidate;\u000a  [SameObject] readonly attribute ValidityState validity;\u000a  readonly attribute DOMString validationMessage;\u000a  boolean checkValidity();\u000a  boolean reportValidity();\u000a  void setCustomValidity(DOMString error);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLLegendElement : HTMLElement {\u000a  readonly attribute HTMLFormElement? form;\u000a\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"enum SelectionMode {\u000a  \"select\",\u000a  \"start\",\u000a  \"end\",\u000a  \"preserve\" // default\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window]\u000ainterface ValidityState {\u000a  readonly attribute boolean valueMissing;\u000a  readonly attribute boolean typeMismatch;\u000a  readonly attribute boolean patternMismatch;\u000a  readonly attribute boolean tooLong;\u000a  readonly attribute boolean tooShort;\u000a  readonly attribute boolean rangeUnderflow;\u000a  readonly attribute boolean rangeOverflow;\u000a  readonly attribute boolean stepMismatch;\u000a  readonly attribute boolean badInput;\u000a  readonly attribute boolean customError;\u000a  readonly attribute boolean valid;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLDetailsElement : HTMLElement {\u000a  [CEReactions] attribute boolean open;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLDialogElement : HTMLElement {\u000a  [CEReactions] attribute boolean open;\u000a  attribute DOMString returnValue;\u000a  [CEReactions] void show();\u000a  [CEReactions] void showModal();\u000a  [CEReactions] void close(optional DOMString returnValue);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLScriptElement : HTMLElement {\u000a  [CEReactions] attribute USVString src;\u000a  [CEReactions] attribute DOMString type;\u000a  [CEReactions] attribute boolean noModule;\u000a  [CEReactions] attribute boolean async;\u000a  [CEReactions] attribute boolean defer;\u000a  [CEReactions] attribute DOMString? crossOrigin;\u000a  [CEReactions] attribute DOMString text;\u000a  [CEReactions] attribute DOMString integrity;\u000a\u000a\u000a  // also has obsolete members\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLTemplateElement : HTMLElement {\u000a  readonly attribute DocumentFragment content;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLSlotElement : HTMLElement {\u000a  [CEReactions] attribute DOMString name;\u000a  sequence<Node> assignedNodes(optional AssignedNodesOptions options);\u000a};\u000a\u000adictionary AssignedNodesOptions {\u000a  boolean flatten = false;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"typedef (CanvasRenderingContext2D or WebGLRenderingContext) RenderingContext;\u000a\u000a[Exposed=Window,\u000a HTMLConstructor]\u000ainterface HTMLCanvasElement : HTMLElement {\u000a  [CEReactions] attribute unsigned long width;\u000a  [CEReactions] attribute unsigned long height;\u000a\u000a  RenderingContext? getContext(DOMString contextId, any... arguments);\u000a\u000a  USVString toDataURL(optional DOMString type, optional any quality);\u000a  void toBlob(BlobCallback _callback, optional DOMString type, optional any quality);\u000a  OffscreenCanvas transferControlToOffscreen();\u000a};\u000a\u000acallback BlobCallback = void (Blob? blob);"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"typedef (HTMLImageElement or\u000a         SVGImageElement) HTMLOrSVGImageElement;\u000a\u000atypedef (HTMLOrSVGImageElement or\u000a         HTMLVideoElement or\u000a         HTMLCanvasElement or\u000a         ImageBitmap or\u000a         OffscreenCanvas) CanvasImageSource;\u000a\u000aenum CanvasFillRule { \"nonzero\", \"evenodd\" };\u000a\u000adictionary CanvasRenderingContext2DSettings {\u000a  boolean alpha = true;\u000a};\u000a\u000aenum ImageSmoothingQuality { \"low\", \"medium\", \"high\" };\u000a\u000a[Exposed=Window]\u000ainterface CanvasRenderingContext2D {\u000a  // back-reference to the canvas\u000a  readonly attribute HTMLCanvasElement canvas;\u000a};\u000aCanvasRenderingContext2D implements CanvasState;\u000aCanvasRenderingContext2D implements CanvasTransform;\u000aCanvasRenderingContext2D implements CanvasCompositing;\u000aCanvasRenderingContext2D implements CanvasImageSmoothing;\u000aCanvasRenderingContext2D implements CanvasFillStrokeStyles;\u000aCanvasRenderingContext2D implements CanvasShadowStyles;\u000aCanvasRenderingContext2D implements CanvasFilters;\u000aCanvasRenderingContext2D implements CanvasRect;\u000aCanvasRenderingContext2D implements CanvasDrawPath;\u000aCanvasRenderingContext2D implements CanvasUserInterface;\u000aCanvasRenderingContext2D implements CanvasText;\u000aCanvasRenderingContext2D implements CanvasDrawImage;\u000aCanvasRenderingContext2D implements CanvasImageData;\u000aCanvasRenderingContext2D implements CanvasPathDrawingStyles;\u000aCanvasRenderingContext2D implements CanvasTextDrawingStyles;\u000aCanvasRenderingContext2D implements CanvasPath;\u000a\u000a[NoInterfaceObject, Exposed=(Window,Worker)]\u000ainterface CanvasState {\u000a  // state\u000a  void save(); // push state on state stack\u000a  void restore(); // pop state stack and restore state\u000a};\u000a\u000a[NoInterfaceObject, Exposed=(Window,Worker)]\u000ainterface CanvasTransform {\u000a  // transformations (default transform is the identity matrix)\u000a  void scale(unrestricted double x, unrestricted double y);\u000a  void rotate(unrestricted double angle);\u000a  void translate(unrestricted double x, unrestricted double y);\u000a  void transform(unrestricted double a, unrestricted double b, unrestricted double c, unrestricted double d, unrestricted double e, unrestricted double f);\u000a\u000a  [NewObject] DOMMatrix getTransform();\u000a  void setTransform(unrestricted double a, unrestricted double b, unrestricted double c, unrestricted double d, unrestricted double e, unrestricted double f);\u000a  void setTransform(optional DOMMatrix2DInit transform);\u000a  void resetTransform();\u000a\u000a};\u000a\u000a[NoInterfaceObject, Exposed=(Window,Worker)]\u000ainterface CanvasCompositing {\u000a  // compositing\u000a  attribute unrestricted double globalAlpha; // (default 1.0)\u000a  attribute DOMString globalCompositeOperation; // (default source-over)\u000a};\u000a\u000a[NoInterfaceObject, Exposed=(Window,Worker)]\u000ainterface CanvasImageSmoothing {\u000a  // image smoothing\u000a  attribute boolean imageSmoothingEnabled; // (default true)\u000a  attribute ImageSmoothingQuality imageSmoothingQuality; // (default low)\u000a\u000a};\u000a\u000a[NoInterfaceObject, Exposed=(Window,Worker)]\u000ainterface CanvasFillStrokeStyles {\u000a  // colors and styles (see also the CanvasPathDrawingStyles and CanvasTextDrawingStyles interfaces)\u000a  attribute (DOMString or CanvasGradient or CanvasPattern) strokeStyle; // (default black)\u000a  attribute (DOMString or CanvasGradient or CanvasPattern) fillStyle; // (default black)\u000a  CanvasGradient createLinearGradient(double x0, double y0, double x1, double y1);\u000a  CanvasGradient createRadialGradient(double x0, double y0, double r0, double x1, double y1, double r1);\u000a  CanvasPattern? createPattern(CanvasImageSource image, [TreatNullAs=EmptyString] DOMString repetition);\u000a\u000a};\u000a\u000a[NoInterfaceObject, Exposed=(Window,Worker)]\u000ainterface CanvasShadowStyles {\u000a  // shadows\u000a  attribute unrestricted double shadowOffsetX; // (default 0)\u000a  attribute unrestricted double shadowOffsetY; // (default 0)\u000a  attribute unrestricted double shadowBlur; // (default 0)\u000a  attribute DOMString shadowColor; // (default transparent black)\u000a};\u000a\u000a[NoInterfaceObject, Exposed=(Window,Worker)]\u000ainterface CanvasFilters {\u000a  // filters\u000a  attribute DOMString filter; // (default \"none\")\u000a};\u000a\u000a[NoInterfaceObject, Exposed=(Window,Worker)]\u000ainterface CanvasRect {\u000a  // rects\u000a  void clearRect(unrestricted double x, unrestricted double y, unrestricted double w, unrestricted double h);\u000a  void fillRect(unrestricted double x, unrestricted double y, unrestricted double w, unrestricted double h);\u000a  void strokeRect(unrestricted double x, unrestricted double y, unrestricted double w, unrestricted double h);\u000a};\u000a\u000a[NoInterfaceObject, Exposed=(Window,Worker)]\u000ainterface CanvasDrawPath {\u000a  // path API (see also CanvasPath)\u000a  void beginPath();\u000a  void fill(optional CanvasFillRule fillRule = \"nonzero\");\u000a  void fill(Path2D path, optional CanvasFillRule fillRule = \"nonzero\");\u000a  void stroke();\u000a  void stroke(Path2D path);\u000a  void clip(optional CanvasFillRule fillRule = \"nonzero\");\u000a  void clip(Path2D path, optional CanvasFillRule fillRule = \"nonzero\");\u000a  void resetClip();\u000a  boolean isPointInPath(unrestricted double x, unrestricted double y, optional CanvasFillRule fillRule = \"nonzero\");\u000a  boolean isPointInPath(Path2D path, unrestricted double x, unrestricted double y, optional CanvasFillRule fillRule = \"nonzero\");\u000a  boolean isPointInStroke(unrestricted double x, unrestricted double y);\u000a  boolean isPointInStroke(Path2D path, unrestricted double x, unrestricted double y);\u000a};\u000a\u000a[Exposed=Window,\u000a NoInterfaceObject]\u000ainterface CanvasUserInterface {\u000a  void drawFocusIfNeeded(Element element);\u000a  void drawFocusIfNeeded(Path2D path, Element element);\u000a  void scrollPathIntoView();\u000a  void scrollPathIntoView(Path2D path);\u000a};\u000a\u000a[Exposed=Window,\u000a NoInterfaceObject]\u000ainterface CanvasText {\u000a  // text (see also the CanvasPathDrawingStyles and CanvasTextDrawingStyles interfaces)\u000a  void fillText(DOMString text, unrestricted double x, unrestricted double y, optional unrestricted double maxWidth);\u000a  void strokeText(DOMString text, unrestricted double x, unrestricted double y, optional unrestricted double maxWidth);\u000a  TextMetrics measureText(DOMString text);\u000a};\u000a\u000a[NoInterfaceObject, Exposed=(Window,Worker)]\u000ainterface CanvasDrawImage {\u000a  // drawing images\u000a  void drawImage(CanvasImageSource image, unrestricted double dx, unrestricted double dy);\u000a  void drawImage(CanvasImageSource image, unrestricted double dx, unrestricted double dy, unrestricted double dw, unrestricted double dh);\u000a  void drawImage(CanvasImageSource image, unrestricted double sx, unrestricted double sy, unrestricted double sw, unrestricted double sh, unrestricted double dx, unrestricted double dy, unrestricted double dw, unrestricted double dh);\u000a};\u000a\u000a[NoInterfaceObject, Exposed=(Window,Worker)]\u000ainterface CanvasImageData {\u000a  // pixel manipulation\u000a  ImageData createImageData(long sw, long sh);\u000a  ImageData createImageData(ImageData imagedata);\u000a  ImageData getImageData(long sx, long sy, long sw, long sh);\u000a  void putImageData(ImageData imagedata, long dx, long dy);\u000a  void putImageData(ImageData imagedata, long dx, long dy, long dirtyX, long dirtyY, long dirtyWidth, long dirtyHeight);\u000a};\u000a\u000aenum CanvasLineCap { \"butt\", \"round\", \"square\" };\u000aenum CanvasLineJoin { \"round\", \"bevel\", \"miter\" };\u000aenum CanvasTextAlign { \"start\", \"end\", \"left\", \"right\", \"center\" };\u000aenum CanvasTextBaseline { \"top\", \"hanging\", \"middle\", \"alphabetic\", \"ideographic\", \"bottom\" };\u000aenum CanvasDirection { \"ltr\", \"rtl\", \"inherit\" };\u000a\u000a[NoInterfaceObject, Exposed=(Window,Worker)]\u000ainterface CanvasPathDrawingStyles {\u000a  // line caps/joins\u000a  attribute unrestricted double lineWidth; // (default 1)\u000a  attribute CanvasLineCap lineCap; // (default \"butt\")\u000a  attribute CanvasLineJoin lineJoin; // (default \"miter\")\u000a  attribute unrestricted double miterLimit; // (default 10)\u000a\u000a  // dashed lines\u000a  void setLineDash(sequence<unrestricted double> segments); // default empty\u000a  sequence<unrestricted double> getLineDash();\u000a  attribute unrestricted double lineDashOffset;\u000a};\u000a\u000a[Exposed=Window,\u000a NoInterfaceObject]\u000ainterface CanvasTextDrawingStyles {\u000a  // text\u000a  attribute DOMString font; // (default 10px sans-serif)\u000a  attribute CanvasTextAlign textAlign; // (default: \"start\")\u000a  attribute CanvasTextBaseline textBaseline; // (default: \"alphabetic\")\u000a  attribute CanvasDirection direction; // (default: \"inherit\")\u000a};\u000a\u000a[NoInterfaceObject, Exposed=(Window,Worker)]\u000ainterface CanvasPath {\u000a  // shared path API methods\u000a  void closePath();\u000a  void moveTo(unrestricted double x, unrestricted double y);\u000a  void lineTo(unrestricted double x, unrestricted double y);\u000a  void quadraticCurveTo(unrestricted double cpx, unrestricted double cpy, unrestricted double x, unrestricted double y);\u000a  void bezierCurveTo(unrestricted double cp1x, unrestricted double cp1y, unrestricted double cp2x, unrestricted double cp2y, unrestricted double x, unrestricted double y);\u000a  void arcTo(unrestricted double x1, unrestricted double y1, unrestricted double x2, unrestricted double y2, unrestricted double radius); \u000a  void arcTo(unrestricted double x1, unrestricted double y1, unrestricted double x2, unrestricted double y2, unrestricted double radiusX, unrestricted double radiusY, unrestricted double rotation); \u000a  void rect(unrestricted double x, unrestricted double y, unrestricted double w, unrestricted double h);\u000a  void arc(unrestricted double x, unrestricted double y, unrestricted double radius, unrestricted double startAngle, unrestricted double endAngle, optional boolean anticlockwise = false); \u000a  void ellipse(unrestricted double x, unrestricted double y, unrestricted double radiusX, unrestricted double radiusY, unrestricted double rotation, unrestricted double startAngle, unrestricted double endAngle, optional boolean anticlockwise = false); \u000a};\u000a\u000a[Exposed=(Window,Worker)]\u000ainterface CanvasGradient {\u000a  // opaque object\u000a  void addColorStop(double offset, DOMString color);\u000a};\u000a\u000a[Exposed=(Window,Worker)]\u000ainterface CanvasPattern {\u000a  // opaque object\u000a  void setTransform(optional DOMMatrix2DInit transform);\u000a};\u000a\u000a[Exposed=Window]\u000ainterface TextMetrics {\u000a  // x-direction\u000a  readonly attribute double width; // advance width\u000a  readonly attribute double actualBoundingBoxLeft;\u000a  readonly attribute double actualBoundingBoxRight;\u000a\u000a  // y-direction\u000a  readonly attribute double fontBoundingBoxAscent;\u000a  readonly attribute double fontBoundingBoxDescent;\u000a  readonly attribute double actualBoundingBoxAscent;\u000a  readonly attribute double actualBoundingBoxDescent;\u000a  readonly attribute double emHeightAscent;\u000a  readonly attribute double emHeightDescent;\u000a  readonly attribute double hangingBaseline;\u000a  readonly attribute double alphabeticBaseline;\u000a  readonly attribute double ideographicBaseline;\u000a};\u000a\u000a[Constructor(unsigned long sw, unsigned long sh),\u000a Constructor(Uint8ClampedArray data, unsigned long sw, optional unsigned long sh),\u000a Exposed=(Window,Worker),\u000a Serializable]\u000ainterface ImageData {\u000a  readonly attribute unsigned long width;\u000a  readonly attribute unsigned long height;\u000a  readonly attribute Uint8ClampedArray data;\u000a};\u000a\u000a[Constructor,\u000a Constructor(Path2D path),\u000a Constructor(sequence<Path2D> paths, optional CanvasFillRule fillRule = \"nonzero\"),\u000a Constructor(DOMString d),\u000a Exposed=(Window,Worker)]\u000ainterface Path2D {\u000a  void addPath(Path2D path, optional DOMMatrix2DInit transform);\u000a};\u000aPath2D implements CanvasPath;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window]\u000ainterface ImageBitmapRenderingContext {\u000a  readonly attribute HTMLCanvasElement canvas;\u000a  void transferFromImageBitmap(ImageBitmap? bitmap);\u000a};\u000a\u000adictionary ImageBitmapRenderingContextSettings {\u000a  boolean alpha = true;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"typedef (OffscreenCanvasRenderingContext2D or\u000a        WebGLRenderingContext) OffscreenRenderingContext;\u000a\u000adictionary ImageEncodeOptions {\u000a  DOMString type = \"image/png\";\u000a  unrestricted double quality = 1.0;\u000a};\u000a\u000aenum OffscreenRenderingContextType { \"2d\", \"webgl\" };\u000a\u000a[Constructor([EnforceRange] unsigned long long width, [EnforceRange] unsigned long long height), Exposed=(Window,Worker), Transferable]\u000ainterface OffscreenCanvas : EventTarget {\u000a  attribute unsigned long long width;\u000a  attribute unsigned long long height;\u000a\u000a  OffscreenRenderingContext? getContext(OffscreenRenderingContextType contextType, any... arguments);\u000a  ImageBitmap transferToImageBitmap();\u000a  Promise<Blob> convertToBlob(optional ImageEncodeOptions options);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=(Window,Worker)]\u000ainterface OffscreenCanvasRenderingContext2D {\u000a  void commit();\u000a  readonly attribute OffscreenCanvas canvas;\u000a};\u000a\u000aOffscreenCanvasRenderingContext2D implements CanvasState;\u000aOffscreenCanvasRenderingContext2D implements CanvasTransform;\u000aOffscreenCanvasRenderingContext2D implements CanvasCompositing;\u000aOffscreenCanvasRenderingContext2D implements CanvasImageSmoothing;\u000aOffscreenCanvasRenderingContext2D implements CanvasFillStrokeStyles;\u000aOffscreenCanvasRenderingContext2D implements CanvasShadowStyles;\u000aOffscreenCanvasRenderingContext2D implements CanvasFilters;\u000aOffscreenCanvasRenderingContext2D implements CanvasRect;\u000aOffscreenCanvasRenderingContext2D implements CanvasDrawPath;\u000aOffscreenCanvasRenderingContext2D implements CanvasDrawImage;\u000aOffscreenCanvasRenderingContext2D implements CanvasImageData;\u000aOffscreenCanvasRenderingContext2D implements CanvasPathDrawingStyles;\u000aOffscreenCanvasRenderingContext2D implements CanvasPath;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window]\u000ainterface CustomElementRegistry {\u000a  [CEReactions] void define(DOMString name, Function constructor, optional ElementDefinitionOptions options);\u000a  any get(DOMString name);\u000a  Promise<void> whenDefined(DOMString name);\u000a};\u000a\u000adictionary ElementDefinitionOptions {\u000a  DOMString extends;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"dictionary FocusOptions {\u000a  boolean preventScroll = false;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a NoInterfaceObject]\u000ainterface ElementContentEditable {\u000a  [CEReactions] attribute DOMString contentEditable;\u000a  readonly attribute boolean isContentEditable;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a Constructor]\u000a  interface DataTransfer {\u000a  attribute DOMString dropEffect;\u000a  attribute DOMString effectAllowed;\u000a\u000a  [SameObject] readonly attribute DataTransferItemList items;\u000a\u000a  void setDragImage(Element image, long x, long y);\u000a\u000a  /* old interface */\u000a  readonly attribute FrozenArray<DOMString> types;\u000a  DOMString getData(DOMString format);\u000a  void setData(DOMString format, DOMString data);\u000a  void clearData(optional DOMString format);\u000a  [SameObject] readonly attribute FileList files;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window]\u000ainterface DataTransferItemList {\u000a  readonly attribute unsigned long length;\u000a  getter DataTransferItem (unsigned long index);\u000a  DataTransferItem? add(DOMString data, DOMString type);\u000a  DataTransferItem? add(File data);\u000a  void remove(unsigned long index);\u000a  void clear();\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window]\u000ainterface DataTransferItem {\u000a  readonly attribute DOMString kind;\u000a  readonly attribute DOMString type;\u000a  void getAsString(FunctionStringCallback? _callback);\u000a  File? getAsFile();\u000a};\u000a\u000acallback FunctionStringCallback = void (DOMString data);"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a Constructor(DOMString type, optional DragEventInit eventInitDict)]\u000ainterface DragEvent : MouseEvent {\u000a  readonly attribute DataTransfer? dataTransfer;\u000a};\u000a\u000adictionary DragEventInit : MouseEventInit {\u000a  DataTransfer? dataTransfer = null;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[PrimaryGlobal, LegacyUnenumerableNamedProperties] \u000ainterface Window : EventTarget {\u000a  // the current browsing context\u000a  [Unforgeable] readonly attribute WindowProxy window;\u000a  [Replaceable] readonly attribute WindowProxy self;\u000a  [Unforgeable] readonly attribute Document document;\u000a  attribute DOMString name; \u000a  [PutForwards=href, Unforgeable] readonly attribute Location location;\u000a  readonly attribute History history;\u000a  readonly attribute CustomElementRegistry customElements;\u000a  [Replaceable] readonly attribute BarProp locationbar;\u000a  [Replaceable] readonly attribute BarProp menubar;\u000a  [Replaceable] readonly attribute BarProp personalbar;\u000a  [Replaceable] readonly attribute BarProp scrollbars;\u000a  [Replaceable] readonly attribute BarProp statusbar;\u000a  [Replaceable] readonly attribute BarProp toolbar;\u000a  attribute DOMString status;\u000a  void close();\u000a  readonly attribute boolean closed;\u000a  void stop();\u000a  void focus();\u000a  void blur();\u000a\u000a  // other browsing contexts\u000a  [Replaceable] readonly attribute WindowProxy frames;\u000a  [Replaceable] readonly attribute unsigned long length;\u000a  [Unforgeable] readonly attribute WindowProxy? top;\u000a  attribute any opener;\u000a  [Replaceable] readonly attribute WindowProxy? parent;\u000a  readonly attribute Element? frameElement;\u000a  WindowProxy? open(optional USVString url = \"about:blank\", optional DOMString target = \"_blank\", optional [TreatNullAs=EmptyString] DOMString features = \"\");\u000a  getter object (DOMString name);\u000a  // Since this is the global object, the IDL named getter adds a NamedPropertiesObject exotic\u000a  // object on the prototype chain. Indeed, this does not make the global object an exotic object.\u000a  // Indexed access is taken care of by the WindowProxy exotic object.\u000a\u000a  // the user agent\u000a  readonly attribute Navigator navigator; \u000a  readonly attribute ApplicationCache applicationCache;\u000a\u000a  // user prompts\u000a  void alert();\u000a  void alert(DOMString message);\u000a  boolean confirm(optional DOMString message = \"\");\u000a  DOMString? prompt(optional DOMString message = \"\", optional DOMString default = \"\");\u000a  void print();\u000a\u000a  unsigned long requestAnimationFrame(FrameRequestCallback callback);\u000a  void cancelAnimationFrame(unsigned long handle);\u000a\u000a  void postMessage(any message, USVString targetOrigin, optional sequence<object> transfer = []);\u000a\u000a  // also has obsolete members\u000a};\u000aWindow implements GlobalEventHandlers;\u000aWindow implements WindowEventHandlers;\u000a\u000acallback FrameRequestCallback = void (DOMHighResTimeStamp time);"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window]\u000ainterface BarProp {\u000a  readonly attribute boolean visible;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"enum ScrollRestoration { \"auto\", \"manual\" };\u000a\u000a[Exposed=Window]\u000ainterface History {\u000a  readonly attribute unsigned long index;\u000a  readonly attribute unsigned long length;\u000a  attribute ScrollRestoration scrollRestoration;\u000a  readonly attribute any state;\u000a  void go(optional long delta = 0);\u000a  void back();\u000a  void forward();\u000a  void pushState(any data, DOMString title, optional USVString? url = null);\u000a  void replaceState(any data, DOMString title, optional USVString? url = null);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window]\u000ainterface Location { // but see also additional creation steps and overridden internal methods\u000a  [Unforgeable] stringifier attribute USVString href;\u000a  [Unforgeable] readonly attribute USVString origin;\u000a  [Unforgeable] attribute USVString protocol;\u000a  [Unforgeable] attribute USVString host;\u000a  [Unforgeable] attribute USVString hostname;\u000a  [Unforgeable] attribute USVString port;\u000a  [Unforgeable] attribute USVString pathname;\u000a  [Unforgeable] attribute USVString search;\u000a  [Unforgeable] attribute USVString hash;\u000a\u000a  [Unforgeable] void assign(USVString url);\u000a  [Unforgeable] void replace(USVString url);\u000a  [Unforgeable] void reload();\u000a\u000a  [Unforgeable, SameObject] readonly attribute DOMStringList ancestorOrigins;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a Constructor(DOMString type, optional PopStateEventInit eventInitDict)]\u000ainterface PopStateEvent : Event {\u000a  readonly attribute any state;\u000a};\u000a\u000adictionary PopStateEventInit : EventInit {\u000a  any state = null;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a Constructor(DOMString type, optional HashChangeEventInit eventInitDict)]\u000ainterface HashChangeEvent : Event {\u000a  readonly attribute USVString oldURL;\u000a  readonly attribute USVString newURL;\u000a};\u000a\u000adictionary HashChangeEventInit : EventInit {\u000a  USVString oldURL = \"\";\u000a  USVString newURL = \"\";\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a Constructor(DOMString type, optional PageTransitionEventInit eventInitDict)]\u000ainterface PageTransitionEvent : Event {\u000a  readonly attribute boolean persisted;\u000a};\u000a\u000adictionary PageTransitionEventInit : EventInit {\u000a  boolean persisted = false;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window]\u000ainterface BeforeUnloadEvent : Event {\u000a  attribute DOMString returnValue;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window]\u000ainterface ApplicationCache : EventTarget {\u000a\u000a  // update status\u000a  const unsigned short UNCACHED = 0;\u000a  const unsigned short IDLE = 1;\u000a  const unsigned short CHECKING = 2;\u000a  const unsigned short DOWNLOADING = 3;\u000a  const unsigned short UPDATEREADY = 4;\u000a  const unsigned short OBSOLETE = 5;\u000a  readonly attribute unsigned short status;\u000a\u000a  // updates\u000a  void update();\u000a  void abort();\u000a  void swapCache();\u000a\u000a  // events\u000a  attribute EventHandler onchecking;\u000a  attribute EventHandler onerror;\u000a  attribute EventHandler onnoupdate;\u000a  attribute EventHandler ondownloading;\u000a  attribute EventHandler onprogress;\u000a  attribute EventHandler onupdateready;\u000a  attribute EventHandler oncached;\u000a  attribute EventHandler onobsolete;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[NoInterfaceObject, Exposed=(Window,Worker)]\u000ainterface NavigatorOnLine {\u000a  readonly attribute boolean onLine;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Constructor(DOMString type, optional ErrorEventInit eventInitDict), Exposed=(Window,Worker)]\u000ainterface ErrorEvent : Event {\u000a  readonly attribute DOMString message;\u000a  readonly attribute USVString filename;\u000a  readonly attribute unsigned long lineno;\u000a  readonly attribute unsigned long colno;\u000a  readonly attribute any error;\u000a};\u000a\u000adictionary ErrorEventInit : EventInit {\u000a  DOMString message = \"\";\u000a  USVString filename = \"\";\u000a  unsigned long lineno = 0;\u000a  unsigned long colno = 0;\u000a  any error = null;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Constructor(DOMString type, PromiseRejectionEventInit eventInitDict), Exposed=(Window,Worker)]\u000ainterface PromiseRejectionEvent : Event {\u000a  readonly attribute Promise<any> promise;\u000a  readonly attribute any reason;\u000a};\u000a\u000adictionary PromiseRejectionEventInit : EventInit {\u000a  required Promise<any> promise;\u000a  any reason;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[TreatNonObjectAsNull]\u000acallback EventHandlerNonNull = any (Event event);\u000atypedef EventHandlerNonNull? EventHandler;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[TreatNonObjectAsNull]\u000acallback OnErrorEventHandlerNonNull = any ((Event or DOMString) event, optional DOMString source, optional unsigned long lineno, optional unsigned long colno, optional any error);\u000atypedef OnErrorEventHandlerNonNull? OnErrorEventHandler;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[TreatNonObjectAsNull]\u000acallback OnBeforeUnloadEventHandlerNonNull = DOMString? (Event event);\u000atypedef OnBeforeUnloadEventHandlerNonNull? OnBeforeUnloadEventHandler;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a NoInterfaceObject]\u000ainterface GlobalEventHandlers {\u000a  attribute EventHandler onabort;\u000a  attribute EventHandler onauxclick;\u000a  attribute EventHandler onblur;\u000a  attribute EventHandler oncancel;\u000a  attribute EventHandler oncanplay;\u000a  attribute EventHandler oncanplaythrough;\u000a  attribute EventHandler onchange;\u000a  attribute EventHandler onclick;\u000a  attribute EventHandler onclose;\u000a  attribute EventHandler oncontextmenu;\u000a  attribute EventHandler oncuechange;\u000a  attribute EventHandler ondblclick;\u000a  attribute EventHandler ondrag;\u000a  attribute EventHandler ondragend;\u000a  attribute EventHandler ondragenter;\u000a  attribute EventHandler ondragexit;\u000a  attribute EventHandler ondragleave;\u000a  attribute EventHandler ondragover;\u000a  attribute EventHandler ondragstart;\u000a  attribute EventHandler ondrop;\u000a  attribute EventHandler ondurationchange;\u000a  attribute EventHandler onemptied;\u000a  attribute EventHandler onended;\u000a  attribute OnErrorEventHandler onerror;\u000a  attribute EventHandler onfocus;\u000a  attribute EventHandler oninput;\u000a  attribute EventHandler oninvalid;\u000a  attribute EventHandler onkeydown;\u000a  attribute EventHandler onkeypress;\u000a  attribute EventHandler onkeyup;\u000a  attribute EventHandler onload;\u000a  attribute EventHandler onloadeddata;\u000a  attribute EventHandler onloadedmetadata;\u000a  attribute EventHandler onloadend;\u000a  attribute EventHandler onloadstart;\u000a  attribute EventHandler onmousedown;\u000a  [LenientThis] attribute EventHandler onmouseenter;\u000a  [LenientThis] attribute EventHandler onmouseleave;\u000a  attribute EventHandler onmousemove;\u000a  attribute EventHandler onmouseout;\u000a  attribute EventHandler onmouseover;\u000a  attribute EventHandler onmouseup;\u000a  attribute EventHandler onwheel;\u000a  attribute EventHandler onpause;\u000a  attribute EventHandler onplay;\u000a  attribute EventHandler onplaying;\u000a  attribute EventHandler onprogress;\u000a  attribute EventHandler onratechange;\u000a  attribute EventHandler onreset;\u000a  attribute EventHandler onresize;\u000a  attribute EventHandler onscroll;\u000a  attribute EventHandler onsecuritypolicyviolation;\u000a  attribute EventHandler onseeked;\u000a  attribute EventHandler onseeking;\u000a  attribute EventHandler onselect;\u000a  attribute EventHandler onstalled;\u000a  attribute EventHandler onsubmit;\u000a  attribute EventHandler onsuspend;\u000a  attribute EventHandler ontimeupdate;\u000a  attribute EventHandler ontoggle;\u000a  attribute EventHandler onvolumechange;\u000a  attribute EventHandler onwaiting;\u000a};\u000a\u000a[Exposed=Window,\u000a NoInterfaceObject]\u000ainterface WindowEventHandlers {\u000a  attribute EventHandler onafterprint;\u000a  attribute EventHandler onbeforeprint;\u000a  attribute OnBeforeUnloadEventHandler onbeforeunload;\u000a  attribute EventHandler onhashchange;\u000a  attribute EventHandler onlanguagechange;\u000a  attribute EventHandler onmessage;\u000a  attribute EventHandler onmessageerror;\u000a  attribute EventHandler onoffline;\u000a  attribute EventHandler ononline;\u000a  attribute EventHandler onpagehide;\u000a  attribute EventHandler onpageshow;\u000a  attribute EventHandler onpopstate;\u000a  attribute EventHandler onrejectionhandled;\u000a  attribute EventHandler onstorage;\u000a  attribute EventHandler onunhandledrejection;\u000a  attribute EventHandler onunload;\u000a};\u000a\u000a[Exposed=Window,\u000a NoInterfaceObject]\u000ainterface DocumentAndElementEventHandlers {\u000a  attribute EventHandler oncopy;\u000a  attribute EventHandler oncut;\u000a  attribute EventHandler onpaste;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"typedef (DOMString or Function) TimerHandler;\u000a\u000a[NoInterfaceObject, Exposed=(Window,Worker)]\u000ainterface WindowOrWorkerGlobalScope {\u000a  [Replaceable] readonly attribute USVString origin;\u000a\u000a  // base64 utility methods\u000a  DOMString btoa(DOMString data);\u000a  ByteString atob(DOMString data);\u000a\u000a  // timers\u000a  long setTimeout(TimerHandler handler, optional long timeout = 0, any... arguments);\u000a  void clearTimeout(optional long handle = 0);\u000a  long setInterval(TimerHandler handler, optional long timeout = 0, any... arguments);\u000a  void clearInterval(optional long handle = 0);\u000a\u000a  // ImageBitmap\u000a  Promise<ImageBitmap> createImageBitmap(ImageBitmapSource image, optional ImageBitmapOptions options);\u000a  Promise<ImageBitmap> createImageBitmap(ImageBitmapSource image, long sx, long sy, long sw, long sh, optional ImageBitmapOptions options);\u000a};\u000aWindow implements WindowOrWorkerGlobalScope;\u000aWorkerGlobalScope implements WindowOrWorkerGlobalScope;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window]\u000ainterface Navigator {\u000a  // objects implementing this interface also implement the interfaces given below\u000a};\u000aNavigator implements NavigatorID;\u000aNavigator implements NavigatorLanguage;\u000aNavigator implements NavigatorOnLine;\u000aNavigator implements NavigatorContentUtils;\u000aNavigator implements NavigatorCookies;\u000aNavigator implements NavigatorPlugins;\u000aNavigator implements NavigatorConcurrentHardware;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[NoInterfaceObject, Exposed=(Window,Worker)]\u000ainterface NavigatorID {\u000a  readonly attribute DOMString appCodeName; // constant \"Mozilla\"\u000a  readonly attribute DOMString appName; // constant \"Netscape\"\u000a  readonly attribute DOMString appVersion;\u000a  readonly attribute DOMString platform;\u000a  readonly attribute DOMString product; // constant \"Gecko\"\u000a  [Exposed=Window] readonly attribute DOMString productSub;\u000a  readonly attribute DOMString userAgent;\u000a  [Exposed=Window] readonly attribute DOMString vendor;\u000a  [Exposed=Window] readonly attribute DOMString vendorSub; // constant \"\"\u000a\u000a  // also has additional members in a partial interface\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"partial interface NavigatorID {\u000a  [Exposed=Window] boolean taintEnabled(); // constant false\u000a  [Exposed=Window] readonly attribute DOMString oscpu;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[NoInterfaceObject, Exposed=(Window,Worker)]\u000ainterface NavigatorLanguage {\u000a  readonly attribute DOMString language;\u000a  readonly attribute FrozenArray<DOMString> languages;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a NoInterfaceObject]\u000ainterface NavigatorContentUtils {\u000a  void registerProtocolHandler(DOMString scheme, USVString url, DOMString title);\u000a  void unregisterProtocolHandler(DOMString scheme, USVString url);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a NoInterfaceObject]\u000ainterface NavigatorCookies {\u000a  readonly attribute boolean cookieEnabled;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Window,\u000a NoInterfaceObject]\u000ainterface NavigatorPlugins {\u000a  [SameObject] readonly attribute PluginArray plugins;\u000a  [SameObject] readonly attribute MimeTypeArray mimeTypes;\u000a  boolean javaEnabled();\u000a};\u000a\u000a[Exposed=Window,\u000a LegacyUnenumerableNamedProperties]\u000ainterface PluginArray {\u000a  void refresh(optional boolean reload = false);\u000a  readonly attribute unsigned long length;\u000a  getter Plugin? item(unsigned long index);\u000a  getter Plugin? namedItem(DOMString name);\u000a};\u000a\u000a[Exposed=Window,\u000a LegacyUnenumerableNamedProperties]\u000ainterface MimeTypeArray {\u000a  readonly attribute unsigned long length;\u000a  getter MimeType? item(unsigned long index);\u000a  getter MimeType? namedItem(DOMString name);\u000a};\u000a\u000a[Exposed=Window,\u000a LegacyUnenumerableNamedProperties]\u000ainterface Plugin {\u000a  readonly attribute DOMString name;\u000a  readonly attribute DOMString description;\u000a  readonly attribute DOMString filename;\u000a  readonly attribute unsigned long length;\u000a  getter MimeType? item(unsigned long index);\u000a  getter MimeType? namedItem(DOMString name);\u000a};\u000a\u000a[Exposed=Window]\u000ainterface MimeType {\u000a  readonly attribute DOMString type;\u000a  readonly attribute DOMString description;\u000a  readonly attribute DOMString suffixes; // comma-separated\u000a  readonly attribute Plugin enabledPlugin;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=(Window,Worker), Serializable, Transferable]\u000ainterface ImageBitmap {\u000a  readonly attribute unsigned long width;\u000a  readonly attribute unsigned long height;\u000a  void close();\u000a};\u000a\u000atypedef (CanvasImageSource or\u000a         Blob or\u000a         ImageData) ImageBitmapSource;\u000a\u000aenum ImageOrientation { \"none\", \"flipY\" };\u000aenum PremultiplyAlpha { \"none\", \"premultiply\", \"default\" };\u000aenum ColorSpaceConversion { \"none\", \"default\" };\u000aenum ResizeQuality { \"pixelated\", \"low\", \"medium\", \"high\" };\u000a\u000adictionary ImageBitmapOptions {\u000a  ImageOrientation imageOrientation = \"none\";\u000a  PremultiplyAlpha premultiplyAlpha = \"default\";\u000a  ColorSpaceConversion colorSpaceConversion = \"default\";\u000a  [EnforceRange] unsigned long resizeWidth;\u000a  [EnforceRange] unsigned long resizeHeight;\u000a  ResizeQuality resizeQuality = \"low\";\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Constructor(DOMString type, optional MessageEventInit eventInitDict), Exposed=(Window,Worker,AudioWorklet)]\u000ainterface MessageEvent : Event {\u000a  readonly attribute any data;\u000a  readonly attribute USVString origin;\u000a  readonly attribute DOMString lastEventId;\u000a  readonly attribute MessageEventSource? source;\u000a  readonly attribute FrozenArray<MessagePort> ports;\u000a\u000a  void initMessageEvent(DOMString type, optional boolean bubbles = false, optional boolean cancelable = false, optional any data = null, optional USVString origin = \"\", optional DOMString lastEventId = \"\", optional MessageEventSource? source = null, optional sequence<MessagePort> ports = []);\u000a};\u000a\u000adictionary MessageEventInit : EventInit {\u000a  any data = null;\u000a  USVString origin = \"\";\u000a  DOMString lastEventId = \"\";\u000a  MessageEventSource? source = null;\u000a  sequence<MessagePort> ports = [];\u000a};\u000a\u000atypedef (WindowProxy or MessagePort or ServiceWorker) MessageEventSource;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Constructor(USVString url, optional EventSourceInit eventSourceInitDict), Exposed=(Window,Worker)]\u000ainterface EventSource : EventTarget {\u000a  readonly attribute USVString url;\u000a  readonly attribute boolean withCredentials;\u000a\u000a  // ready state\u000a  const unsigned short CONNECTING = 0;\u000a  const unsigned short OPEN = 1;\u000a  const unsigned short CLOSED = 2;\u000a  readonly attribute unsigned short readyState;\u000a\u000a  // networking\u000a  attribute EventHandler onopen;\u000a  attribute EventHandler onmessage;\u000a  attribute EventHandler onerror;\u000a  void close();\u000a};\u000a\u000adictionary EventSourceInit {\u000a  boolean withCredentials = false;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"enum BinaryType { \"blob\", \"arraybuffer\" };\u000a[Constructor(USVString url, optional (DOMString or sequence<DOMString>) protocols = []), Exposed=(Window,Worker)]\u000ainterface WebSocket : EventTarget {\u000a  readonly attribute USVString url;\u000a\u000a  // ready state\u000a  const unsigned short CONNECTING = 0;\u000a  const unsigned short OPEN = 1;\u000a  const unsigned short CLOSING = 2;\u000a  const unsigned short CLOSED = 3;\u000a  readonly attribute unsigned short readyState;\u000a  readonly attribute unsigned long long bufferedAmount;\u000a\u000a  // networking\u000a  attribute EventHandler onopen;\u000a  attribute EventHandler onerror;\u000a  attribute EventHandler onclose;\u000a  readonly attribute DOMString extensions;\u000a  readonly attribute DOMString protocol;\u000a  void close(optional [Clamp] unsigned short code, optional USVString reason);\u000a\u000a  // messaging\u000a  attribute EventHandler onmessage;\u000a  attribute BinaryType binaryType;\u000a  void send(USVString data);\u000a  void send(Blob data);\u000a  void send(ArrayBuffer data);\u000a  void send(ArrayBufferView data);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Constructor(DOMString type, optional CloseEventInit eventInitDict), Exposed=(Window,Worker)]\u000ainterface CloseEvent : Event {\u000a  readonly attribute boolean wasClean;\u000a  readonly attribute unsigned short code;\u000a  readonly attribute USVString reason;\u000a};\u000a\u000adictionary CloseEventInit : EventInit {\u000a  boolean wasClean = false;\u000a  unsigned short code = 0;\u000a  USVString reason = \"\";\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Constructor, Exposed=(Window,Worker)]\u000ainterface MessageChannel {\u000a  readonly attribute MessagePort port1;\u000a  readonly attribute MessagePort port2;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=(Window,Worker,AudioWorklet), Transferable]\u000ainterface MessagePort : EventTarget {\u000a  void postMessage(any message, optional sequence<object> transfer = []);\u000a  void start();\u000a  void close();\u000a\u000a  // event handlers\u000a  attribute EventHandler onmessage;\u000a  attribute EventHandler onmessageerror;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Constructor(DOMString name), Exposed=(Window,Worker)]\u000ainterface BroadcastChannel : EventTarget {\u000a  readonly attribute DOMString name;\u000a  void postMessage(any message);\u000a  void close();\u000a  attribute EventHandler onmessage;\u000a  attribute EventHandler onmessageerror;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Exposed=Worker]\u000ainterface WorkerGlobalScope : EventTarget {\u000a  readonly attribute WorkerGlobalScope self;\u000a  readonly attribute WorkerLocation location;\u000a  readonly attribute WorkerNavigator navigator;\u000a  void importScripts(USVString... urls);\u000a\u000a  attribute OnErrorEventHandler onerror;\u000a  attribute EventHandler onlanguagechange;\u000a  attribute EventHandler onoffline;\u000a  attribute EventHandler ononline;\u000a  attribute EventHandler onrejectionhandled;\u000a  attribute EventHandler onunhandledrejection;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Global=(Worker,DedicatedWorker),Exposed=DedicatedWorker]\u000ainterface DedicatedWorkerGlobalScope : WorkerGlobalScope {\u000a  [Replaceable] readonly attribute DOMString name;\u000a\u000a  void postMessage(any message, optional sequence<object> transfer = []);\u000a\u000a  void close();\u000a\u000a  attribute EventHandler onmessage;\u000a  attribute EventHandler onmessageerror;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Global=(Worker,SharedWorker),Exposed=SharedWorker]\u000ainterface SharedWorkerGlobalScope : WorkerGlobalScope {\u000a  [Replaceable] readonly attribute DOMString name;\u000a\u000a  void close();\u000a\u000a  attribute EventHandler onconnect;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[NoInterfaceObject, Exposed=(Window,Worker)]\u000ainterface AbstractWorker {\u000a  attribute EventHandler onerror;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://html.spec.whatwg.org",timestamp:1512969262513,contents:"[Constructor(USVString scriptURL, optional WorkerOptions options), Exposed=(Window,Worker)]\u000ainterface Worker : EventTarget {\u000a  void terminate();\u000a\u000a  void postMessage(any message, optional sequence<object> transfer = []);\u000a  attribute EventHandler onmessage;\u000a  attribute EventHandler onmessageerror;\u000a};\u000a\u000adictionary WorkerOptions {\u000a  WorkerType type = \"classic\";\u000a  RequestCredentials credentials = \"omit\"; // credentials is only used if type is \"module\"\u000a  DOMString name = \"\";\u000a};\u000a\u000aenum WorkerType { \"classic\", \"module\" };\u000a\u000aWorker implements AbstractWorker;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/shapes.html",timestamp:1512969339060,contents:"interface SVGRectElement : SVGGeometryElement {\u000a  [SameObject] readonly attribute SVGAnimatedLength x;\u000a  [SameObject] readonly attribute SVGAnimatedLength y;\u000a  [SameObject] readonly attribute SVGAnimatedLength width;\u000a  [SameObject] readonly attribute SVGAnimatedLength height;\u000a  [SameObject] readonly attribute SVGAnimatedLength rx;\u000a  [SameObject] readonly attribute SVGAnimatedLength ry;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/shapes.html",timestamp:1512969339060,contents:"interface SVGCircleElement : SVGGeometryElement {\u000a  [SameObject] readonly attribute SVGAnimatedLength cx;\u000a  [SameObject] readonly attribute SVGAnimatedLength cy;\u000a  [SameObject] readonly attribute SVGAnimatedLength r;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/shapes.html",timestamp:1512969339060,contents:"interface SVGEllipseElement : SVGGeometryElement {\u000a  [SameObject] readonly attribute SVGAnimatedLength cx;\u000a  [SameObject] readonly attribute SVGAnimatedLength cy;\u000a  [SameObject] readonly attribute SVGAnimatedLength rx;\u000a  [SameObject] readonly attribute SVGAnimatedLength ry;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/shapes.html",timestamp:1512969339060,contents:"interface SVGLineElement : SVGGeometryElement {\u000a  [SameObject] readonly attribute SVGAnimatedLength x1;\u000a  [SameObject] readonly attribute SVGAnimatedLength y1;\u000a  [SameObject] readonly attribute SVGAnimatedLength x2;\u000a  [SameObject] readonly attribute SVGAnimatedLength y2;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/shapes.html",timestamp:1512969339060,contents:"interface SVGMeshElement : SVGGeometryElement {};\u000a\u000aSVGMeshElement implements SVGURIReference;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/shapes.html",timestamp:1512969339060,contents:"[NoInterfaceObject]\u000ainterface SVGAnimatedPoints {\u000a  [SameObject] readonly attribute SVGPointList points;\u000a  [SameObject] readonly attribute SVGPointList animatedPoints;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/shapes.html",timestamp:1512969339060,contents:"interface SVGPointList {\u000a\u000a  readonly attribute unsigned long length;\u000a  readonly attribute unsigned long numberOfItems;\u000a\u000a  void clear();\u000a  DOMPoint initialize(DOMPoint newItem);\u000a  getter DOMPoint getItem(unsigned long index);\u000a  DOMPoint insertItemBefore(DOMPoint newItem, unsigned long index);\u000a  DOMPoint replaceItem(DOMPoint newItem, unsigned long index);\u000a  DOMPoint removeItem(unsigned long index);\u000a  DOMPoint appendItem(DOMPoint newItem);\u000a  setter void (unsigned long index, DOMPoint newItem);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/shapes.html",timestamp:1512969339060,contents:"interface SVGPolylineElement : SVGGeometryElement {\u000a};\u000a\u000aSVGPolylineElement implements SVGAnimatedPoints;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/shapes.html",timestamp:1512969339060,contents:"interface SVGPolygonElement : SVGGeometryElement {\u000a};\u000a\u000aSVGPolygonElement implements SVGAnimatedPoints;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/interact.html",timestamp:1512969341378,contents:"interface SVGCursorElement : SVGElement {\u000a  [SameObject] readonly attribute SVGAnimatedLength x;\u000a  [SameObject] readonly attribute SVGAnimatedLength y;\u000a};\u000a\u000aSVGCursorElement implements SVGURIReference;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/interact.html",timestamp:1512969341378,contents:"interface SVGScriptElement : SVGElement {\u000a  attribute DOMString type;\u000a  attribute DOMString? crossOrigin;\u000a};\u000a\u000aSVGScriptElement implements SVGURIReference;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/worklets",timestamp:1512969342375,contents:"[Exposed=Worklet]\u000ainterface WorkletGlobalScope {\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/worklets",timestamp:1512969342375,contents:"interface Worklet {\u000a    [NewObject] Promise<void> addModule(USVString moduleURL, optional WorkletOptions options);\u000a};\u000a\u000adictionary WorkletOptions {\u000a    RequestCredentials credentials = \"omit\";\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-properties-values-api",timestamp:1512969343405,contents:"dictionary PropertyDescriptor {\u000a  required DOMString name;\u000a           DOMString syntax       = \"*\";\u000a           boolean   inherits     = false;\u000a           DOMString initialValue;\u000a};\u000a\u000apartial interface CSS {\u000a  static void registerProperty(PropertyDescriptor descriptor);\u000a  static void unregisterProperty(DOMString name);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dev.w3.org/csswg/css-transitions",timestamp:1512969344239,contents:"[Constructor(CSSOMString type, optional TransitionEventInit transitionEventInitDict)]\u000ainterface TransitionEvent : Event {\u000a  readonly attribute CSSOMString propertyName;\u000a  readonly attribute float elapsedTime;\u000a  readonly attribute CSSOMString pseudoElement;\u000a};\u000a\u000adictionary TransitionEventInit : EventInit {\u000a  CSSOMString propertyName = \"\";\u000a  float elapsedTime = 0.0;\u000a  CSSOMString pseudoElement = \"\";\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dev.w3.org/csswg/css-transitions",timestamp:1512969344239,contents:"partial interface GlobalEventHandlers {\u000a  attribute EventHandler ontransitionrun;\u000a  attribute EventHandler ontransitionstart;\u000a  attribute EventHandler ontransitionend;\u000a  attribute EventHandler ontransitioncancel;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-paint-api",timestamp:1512969346129,contents:"partial interface CSS {\u000a    [SameObject] readonly attribute Worklet paintWorklet;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-paint-api",timestamp:1512969346129,contents:"[Global=(Worklet,PaintWorklet),Exposed=PaintWorklet]\u000ainterface PaintWorkletGlobalScope : WorkletGlobalScope {\u000a    void registerPaint(DOMString name, VoidFunction paintCtor);\u000a    readonly attribute unrestricted double devicePixelRatio;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-paint-api",timestamp:1512969346129,contents:"dictionary PaintRenderingContext2DSettings {\u000a    boolean alpha = true;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-paint-api",timestamp:1512969346129,contents:"[Exposed=PaintWorklet]\u000ainterface PaintRenderingContext2D {\u000a};\u000aPaintRenderingContext2D implements CanvasState;\u000aPaintRenderingContext2D implements CanvasTransform;\u000aPaintRenderingContext2D implements CanvasCompositing;\u000aPaintRenderingContext2D implements CanvasImageSmoothing;\u000aPaintRenderingContext2D implements CanvasFillStrokeStyles;\u000aPaintRenderingContext2D implements CanvasShadowStyles;\u000aPaintRenderingContext2D implements CanvasRect;\u000aPaintRenderingContext2D implements CanvasDrawPath;\u000aPaintRenderingContext2D implements CanvasDrawImage;\u000aPaintRenderingContext2D implements CanvasPathDrawingStyles;\u000aPaintRenderingContext2D implements CanvasPath;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-paint-api",timestamp:1512969346129,contents:"[Exposed=PaintWorklet]\u000ainterface PaintSize {\u000a    readonly attribute double width;\u000a    readonly attribute double height;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/struct.html",timestamp:1512969348107,contents:"partial interface Document {\u000a  readonly attribute SVGSVGElement? rootElement;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/struct.html",timestamp:1512969348107,contents:"// must only be implemented in certain implementations\u000apartial interface Document {\u000a  readonly attribute DOMString title;\u000a  readonly attribute DOMString referrer;\u000a  readonly attribute DOMString domain;\u000a  readonly attribute Element? activeElement;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/struct.html",timestamp:1512969348107,contents:"interface SVGSVGElement : SVGGraphicsElement {\u000a\u000a  [SameObject] readonly attribute SVGAnimatedLength x;\u000a  [SameObject] readonly attribute SVGAnimatedLength y;\u000a  [SameObject] readonly attribute SVGAnimatedLength width;\u000a  [SameObject] readonly attribute SVGAnimatedLength height;\u000a\u000a  attribute float currentScale;\u000a  [SameObject] readonly attribute DOMPointReadOnly currentTranslate;\u000a\u000a  NodeList getIntersectionList(DOMRectReadOnly rect, SVGElement? referenceElement);\u000a  NodeList getEnclosureList(DOMRectReadOnly rect, SVGElement? referenceElement);\u000a  boolean checkIntersection(SVGElement element, DOMRectReadOnly rect);\u000a  boolean checkEnclosure(SVGElement element, DOMRectReadOnly rect);\u000a\u000a  void deselectAll();\u000a\u000a  SVGNumber createSVGNumber();\u000a  SVGLength createSVGLength();\u000a  SVGAngle createSVGAngle();\u000a  DOMPoint createSVGPoint();\u000a  DOMMatrix createSVGMatrix();\u000a  DOMRect createSVGRect();\u000a  SVGTransform createSVGTransform();\u000a  SVGTransform createSVGTransformFromMatrix(DOMMatrixReadOnly matrix);\u000a\u000a  Element getElementById(DOMString elementId);\u000a\u000a  // Deprecated methods that have no effect when called,\u000a  // but which are kept for compatibility reasons.\u000a  unsigned long suspendRedraw(unsigned long maxWaitMilliseconds);\u000a  void unsuspendRedraw(unsigned long suspendHandleID);\u000a  void unsuspendRedrawAll();\u000a  void forceRedraw();\u000a};\u000a\u000aSVGSVGElement implements SVGFitToViewBox;\u000aSVGSVGElement implements SVGZoomAndPan;\u000aSVGSVGElement implements WindowEventHandlers;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/struct.html",timestamp:1512969348107,contents:"interface SVGGElement : SVGGraphicsElement {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/struct.html",timestamp:1512969348107,contents:"interface SVGUnknownElement : SVGGraphicsElement {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/struct.html",timestamp:1512969348107,contents:"interface SVGDefsElement : SVGGraphicsElement {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/struct.html",timestamp:1512969348107,contents:"interface SVGDescElement : SVGElement {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/struct.html",timestamp:1512969348107,contents:"interface SVGMetadataElement : SVGElement {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/struct.html",timestamp:1512969348107,contents:"interface SVGTitleElement : SVGElement {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/struct.html",timestamp:1512969348107,contents:"interface SVGSymbolElement : SVGGraphicsElement {\u000a};\u000a\u000aSVGSymbolElement implements SVGFitToViewBox;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/struct.html",timestamp:1512969348107,contents:"interface SVGUseElement : SVGGraphicsElement {\u000a  [SameObject] readonly attribute SVGAnimatedLength x;\u000a  [SameObject] readonly attribute SVGAnimatedLength y;\u000a  [SameObject] readonly attribute SVGAnimatedLength width;\u000a  [SameObject] readonly attribute SVGAnimatedLength height;\u000a  [SameObject] readonly attribute SVGElement? instanceRoot;\u000a  [SameObject] readonly attribute SVGElement? animatedInstanceRoot;\u000a};\u000a\u000aSVGUseElement implements SVGURIReference;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/struct.html",timestamp:1512969348107,contents:"\u000ainterface SVGUseElementShadowRoot : ShadowRoot {\u000a\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/struct.html",timestamp:1512969348107,contents:"[NoInterfaceObject]\u000ainterface SVGElementInstance {\u000a  [SameObject] readonly attribute SVGElement? correspondingElement;\u000a  [SameObject] readonly attribute SVGUseElement? correspondingUseElement;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/struct.html",timestamp:1512969348107,contents:"\u000a[Constructor (Animation source, Animatable newTarget) ]\u000ainterface ShadowAnimation : Animation {\u000a  [SameObject] readonly attribute Animation sourceAnimation;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/struct.html",timestamp:1512969348107,contents:"interface SVGSwitchElement : SVGGraphicsElement {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/struct.html",timestamp:1512969348107,contents:"[NoInterfaceObject]\u000ainterface GetSVGDocument {\u000a  Document getSVGDocument();\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/css-animations",timestamp:1512969352679,contents:"[Exposed=Window,\u000a Constructor(CSSOMString type, optional AnimationEventInit animationEventInitDict)]\u000ainterface AnimationEvent : Event {\u000a  readonly attribute CSSOMString animationName;\u000a  readonly attribute float elapsedTime;\u000a  readonly attribute CSSOMString pseudoElement;\u000a};\u000adictionary AnimationEventInit : EventInit {\u000a  CSSOMString animationName = \"\";\u000a  float elapsedTime = 0.0;\u000a  CSSOMString pseudoElement = \"\";\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/css-animations",timestamp:1512969352679,contents:"partial interface CSSRule {\u000a    const unsigned short KEYFRAMES_RULE = 7;\u000a    const unsigned short KEYFRAME_RULE = 8;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/css-animations",timestamp:1512969352679,contents:"[Exposed=Window]\u000ainterface CSSKeyframeRule : CSSRule {\u000a  attribute CSSOMString keyText;\u000a  [SameObject, PutForwards=cssText] readonly attribute CSSStyleDeclaration style;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/css-animations",timestamp:1512969352679,contents:"[Exposed=Window]\u000ainterface CSSKeyframesRule : CSSRule {\u000a           attribute CSSOMString name;\u000a  readonly attribute CSSRuleList cssRules;\u000a\u000a  void             appendRule(CSSOMString rule);\u000a  void             deleteRule(CSSOMString select);\u000a  CSSKeyframeRule? findRule(CSSOMString select);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/css-animations",timestamp:1512969352679,contents:"partial interface GlobalEventHandlers {\u000a  attribute EventHandler onanimationstart;\u000a  attribute EventHandler onanimationiteration;\u000a  attribute EventHandler onanimationend;\u000a  attribute EventHandler onanimationcancel;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/css-conditional",timestamp:1512969354795,contents:"partial interface CSSRule {\u000a    const unsigned short SUPPORTS_RULE = 12;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/css-conditional",timestamp:1512969354795,contents:"[Exposed=Window]\u000ainterface CSSGroupingRule : CSSRule {\u000a    readonly attribute CSSRuleList cssRules;\u000a    unsigned long insertRule (CSSOMString rule, unsigned long index);\u000a    void deleteRule (unsigned long index);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/css-conditional",timestamp:1512969354795,contents:"[Exposed=Window]\u000ainterface CSSConditionRule : CSSGroupingRule {\u000a    attribute CSSOMString conditionText;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/css-conditional",timestamp:1512969354795,contents:"[Exposed=Window]\u000ainterface CSSMediaRule : CSSConditionRule {\u000a    [SameObject, PutForwards=mediaText] readonly attribute MediaList media;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/css-conditional",timestamp:1512969354795,contents:"[Exposed=Window]\u000ainterface CSSSupportsRule : CSSConditionRule {\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/css-conditional",timestamp:1512969354795,contents:"partial interface CSS {\u000a  static boolean supports(CSSOMString property, CSSOMString value);\u000a  static boolean supports(CSSOMString conditionText);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/css-font-loading",timestamp:1512969355820,contents:"typedef (ArrayBuffer or ArrayBufferView) BinaryData;\u000a\u000adictionary FontFaceDescriptors {\u000a  CSSOMString style = \"normal\";\u000a  CSSOMString weight = \"normal\";\u000a  CSSOMString stretch = \"normal\";\u000a  CSSOMString unicodeRange = \"U+0-10FFFF\";\u000a  CSSOMString variant = \"normal\";\u000a  CSSOMString featureSettings = \"normal\";\u000a  CSSOMString variationSettings = \"normal\";\u000a  CSSOMString isplay = \"auto\";\u000a};\u000a\u000aenum FontFaceLoadStatus { \"unloaded\", \"loading\", \"loaded\", \"error\" };\u000a\u000a[Constructor(CSSOMString family, (CSSOMString or BinaryData) source,\u000a             optional FontFaceDescriptors descriptors),\u000a Exposed=(Window,Worker)]\u000ainterface FontFace {\u000a  attribute CSSOMString family;\u000a  attribute CSSOMString style;\u000a  attribute CSSOMString weight;\u000a  attribute CSSOMString stretch;\u000a  attribute CSSOMString unicodeRange;\u000a  attribute CSSOMString variant;\u000a  attribute CSSOMString featureSettings;\u000a  attribute CSSOMString variationSettings;\u000a  attribute CSSOMString isplay;\u000a\u000a  readonly attribute FontFaceLoadStatus status;\u000a\u000a  Promise<FontFace> load();\u000a  readonly attribute Promise<FontFace> loaded;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/css-font-loading",timestamp:1512969355820,contents:"dictionary FontFaceSetLoadEventInit : EventInit {\u000a  sequence<FontFace> fontfaces = [];\u000a};\u000a\u000a[Constructor(CSSOMString type, optional FontFaceSetLoadEventInit eventInitDict),\u000a Exposed=(Window,Worker)]\u000ainterface FontFaceSetLoadEvent : Event {\u000a  [SameObject] readonly attribute FrozenArray<FontFace> fontfaces;\u000a};\u000a\u000aenum FontFaceSetLoadStatus { \"loading\", \"loaded\" };\u000a\u000acallback ForEachCallback = void (FontFace font, long index, FontFaceSet self);\u000a\u000a[Exposed=(Window,Worker),\u000a Constructor(sequence<FontFace> initialFaces)]\u000ainterface FontFaceSet : EventTarget {\u000a  // FontFaceSet is Set-like!\u000a  setlike<FontFace>;\u000a  FontFaceSet add(FontFace font);\u000a  boolean delete(FontFace font);\u000a  void clear();\u000a\u000a  // events for when loading state changes\u000a  attribute EventHandler onloading;\u000a  attribute EventHandler onloadingdone;\u000a  attribute EventHandler onloadingerror;\u000a\u000a  // check and start loads if appropriate\u000a  // and fulfill promise when all loads complete\u000a  Promise<sequence<FontFace>> load(CSSOMString font, optional CSSOMString text = \" \");\u000a\u000a  // return whether all fonts in the fontlist are loaded\u000a  // (does not initiate load if not available)\u000a  boolean check(CSSOMString font, optional CSSOMString text = \" \");\u000a\u000a  // async notification that font loading and layout operations are done\u000a  readonly attribute Promise<FontFaceSet> ready;\u000a\u000a  // loading state, \"loading\" while one or more fonts loading, \"loaded\" otherwise\u000a  readonly attribute FontFaceSetLoadStatus status;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/css-font-loading",timestamp:1512969355820,contents:"[Exposed=(Window,Worker)\u000a NoInterfaceObject]\u000ainterface FontFaceSource {\u000a  readonly attribute FontFaceSet fonts;\u000a};\u000a\u000aDocument implements FontFaceSource;\u000aWorkerGlobalScope implements FontFaceSource;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/css-device-adapt",timestamp:1512969358225,contents:"partial interface CSSRule {\u000a    const unsigned short VIEWPORT_RULE = 15;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/css-device-adapt",timestamp:1512969358225,contents:"interface CSSViewportRule : CSSRule {\u000a    readonly attribute CSSStyleDeclaration style;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.fxtf.org/css-masking-1",timestamp:1512969359801,contents:"interface SVGClipPathElement : SVGElement {\u000a  readonly attribute SVGAnimatedEnumeration clipPathUnits;\u000a  readonly attribute SVGAnimatedTransformList transform;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.fxtf.org/css-masking-1",timestamp:1512969359801,contents:"interface SVGMaskElement : SVGElement {\u000a  readonly attribute SVGAnimatedEnumeration maskUnits;\u000a  readonly attribute SVGAnimatedEnumeration maskContentUnits;\u000a  readonly attribute SVGAnimatedLength x;\u000a  readonly attribute SVGAnimatedLength y;\u000a  readonly attribute SVGAnimatedLength width;\u000a  readonly attribute SVGAnimatedLength height;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dev.w3.org/csswg/css-fonts",timestamp:1512969366124,contents:"interface CSSFontFaceRule : CSSRule {\u000a  attribute DOMString family;\u000a  attribute DOMString src;\u000a  attribute DOMString style;\u000a  attribute DOMString weight;\u000a  attribute DOMString stretch;\u000a  attribute DOMString unicodeRange;\u000a  attribute DOMString variant;\u000a  attribute DOMString featureSettings;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dev.w3.org/csswg/css-fonts",timestamp:1512969366124,contents:"partial interface CSSRule {\u000a  const unsigned short FONT_FEATURE_VALUES_RULE = 14;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://dev.w3.org/csswg/css-fonts",timestamp:1512969366124,contents:"interface CSSFontFeatureValuesRule : CSSRule {\u000a  attribute DOMString fontFamily;\u000a  readonly attribute CSSFontFeatureValuesMap annotation;\u000a  readonly attribute CSSFontFeatureValuesMap ornaments;\u000a  readonly attribute CSSFontFeatureValuesMap stylistic;\u000a  readonly attribute CSSFontFeatureValuesMap swash;\u000a  readonly attribute CSSFontFeatureValuesMap characterVariant;\u000a  readonly attribute CSSFontFeatureValuesMap styleset;\u000a};\u000a\u000a[MapClass(DOMString, sequence<unsigned long>)]\u000ainterface CSSFontFeatureValuesMap {\u000a  void set(DOMString featureValueName,\u000a           (unsigned long or sequence<unsigned long>) values);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"typedef USVString CSSOMString;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"[Exposed=Window,\u000a LegacyArrayClass]\u000ainterface MediaList {\u000a  stringifier attribute [TreatNullAs=EmptyString] CSSOMString mediaText;\u000a  readonly attribute unsigned long length;\u000a  getter CSSOMString? item(unsigned long index);\u000a  void appendMedium(CSSOMString medium);\u000a  void deleteMedium(CSSOMString medium);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"[Exposed=Window]\u000ainterface StyleSheet {\u000a  readonly attribute CSSOMString type;\u000a  readonly attribute USVString? href;\u000a  readonly attribute (Element or ProcessingInstruction)? ownerNode;\u000a  readonly attribute StyleSheet? parentStyleSheet;\u000a  readonly attribute DOMString? title;\u000a  [SameObject, PutForwards=mediaText] readonly attribute MediaList media;\u000a  attribute boolean disabled;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"[Exposed=Window]\u000ainterface CSSStyleSheet : StyleSheet {\u000a  readonly attribute CSSRule? ownerRule;\u000a  [SameObject] readonly attribute CSSRuleList cssRules;\u000a  unsigned long insertRule(CSSOMString rule, optional unsigned long index = 0);\u000a  void deleteRule(unsigned long index);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"[Exposed=Window,\u000a LegacyArrayClass]\u000ainterface StyleSheetList {\u000a  getter StyleSheet? item(unsigned long index);\u000a  readonly attribute unsigned long length;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"partial interface Document {\u000a  [SameObject] readonly attribute StyleSheetList styleSheets;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"[Exposed=Window,\u000a NoInterfaceObject]\u000ainterface LinkStyle {\u000a  readonly attribute StyleSheet? sheet;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"ProcessingInstruction implements LinkStyle;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"[Exposed=Window,\u000a LegacyArrayClass]\u000ainterface CSSRuleList {\u000a  getter CSSRule? item(unsigned long index);\u000a  readonly attribute unsigned long length;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"[Exposed=Window]\u000ainterface CSSRule {\u000a  const unsigned short STYLE_RULE = 1;\u000a  const unsigned short CHARSET_RULE = 2; // historical\u000a  const unsigned short IMPORT_RULE = 3;\u000a  const unsigned short MEDIA_RULE = 4;\u000a  const unsigned short FONT_FACE_RULE = 5;\u000a  const unsigned short PAGE_RULE = 6;\u000a  const unsigned short MARGIN_RULE = 9;\u000a  const unsigned short NAMESPACE_RULE = 10;\u000a  readonly attribute unsigned short type;\u000a  attribute CSSOMString cssText;\u000a  readonly attribute CSSRule? parentRule;\u000a  readonly attribute CSSStyleSheet? parentStyleSheet;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"[Exposed=Window]\u000ainterface CSSStyleRule : CSSRule {\u000a  attribute CSSOMString selectorText;\u000a  [SameObject, PutForwards=cssText] readonly attribute CSSStyleDeclaration style;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"[Exposed=Window]\u000ainterface CSSImportRule : CSSRule {\u000a  readonly attribute USVString href;\u000a  [SameObject, PutForwards=mediaText] readonly attribute MediaList media;\u000a  [SameObject] readonly attribute CSSStyleSheet styleSheet;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"[Exposed=Window]\u000ainterface CSSGroupingRule : CSSRule {\u000a  [SameObject] readonly attribute CSSRuleList cssRules;\u000a  unsigned long insertRule(CSSOMString rule, optional unsigned long index = 0);\u000a  void deleteRule(unsigned long index);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"[Exposed=Window]\u000ainterface CSSPageRule : CSSGroupingRule {\u000a           attribute CSSOMString selectorText;\u000a  [SameObject, PutForwards=cssText] readonly attribute CSSStyleDeclaration style;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"[Exposed=Window]\u000ainterface CSSMarginRule : CSSRule {\u000a  readonly attribute CSSOMString name;\u000a  [SameObject, PutForwards=cssText] readonly attribute CSSStyleDeclaration style;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"[Exposed=Window]\u000ainterface CSSNamespaceRule : CSSRule {\u000a  readonly attribute CSSOMString namespaceURI;\u000a  readonly attribute CSSOMString prefix;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"[Exposed=Window]\u000ainterface CSSStyleDeclaration {\u000a  [CEReactions] attribute CSSOMString cssText;\u000a  readonly attribute unsigned long length;\u000a  getter CSSOMString item(unsigned long index);\u000a  CSSOMString getPropertyValue(CSSOMString property);\u000a  CSSOMString getPropertyPriority(CSSOMString property);\u000a  [CEReactions] void setProperty(CSSOMString property, [TreatNullAs=EmptyString] CSSOMString value, [TreatNullAs=EmptyString] optional CSSOMString priority = \"\");\u000a  [CEReactions] void setPropertyValue(CSSOMString property, [TreatNullAs=EmptyString] CSSOMString value);\u000a  [CEReactions] void setPropertyPriority(CSSOMString property, [TreatNullAs=EmptyString] CSSOMString priority);\u000a  [CEReactions] CSSOMString removeProperty(CSSOMString property);\u000a  readonly attribute CSSRule? parentRule;\u000a  [CEReactions] attribute [TreatNullAs=EmptyString] CSSOMString cssFloat;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"partial interface CSSStyleDeclaration {\u000a  [CEReactions] attribute [TreatNullAs=EmptyString] CSSOMString _camel_cased_attribute;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"partial interface CSSStyleDeclaration {\u000a  [CEReactions] attribute [TreatNullAs=EmptyString] CSSOMString _webkit_cased_attribute;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"partial interface CSSStyleDeclaration {\u000a  [CEReactions] attribute [TreatNullAs=EmptyString] CSSOMString _dashed_attribute;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"[Exposed=Window,\u000a NoInterfaceObject]\u000ainterface ElementCSSInlineStyle {\u000a  [SameObject, PutForwards=cssText] readonly attribute CSSStyleDeclaration style;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"HTMLElement implements ElementCSSInlineStyle;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"SVGElement implements ElementCSSInlineStyle;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"partial interface Window {\u000a  [NewObject] CSSStyleDeclaration getComputedStyle(Element elt, optional CSSOMString? pseudoElt);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom",timestamp:1512969369188,contents:"[Exposed=Window]\u000ainterface CSS {\u000a  static CSSOMString escape(CSSOMString ident);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om-1",timestamp:1512969374076,contents:"interface CSSStyleValue {\u000a    stringifier;\u000a    static CSSStyleValue? parse(DOMString property, DOMString cssText);\u000a    static sequence<CSSStyleValue>? parseAll(DOMString property, DOMString cssText);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om-1",timestamp:1512969374076,contents:"interface StylePropertyMapReadOnly {\u000a    CSSStyleValue? get(DOMString property);\u000a    sequence<CSSStyleValue> getAll(DOMString property);\u000a    boolean has(DOMString property);\u000a    iterable<DOMString, (CSSStyleValue or sequence<CSSStyleValue>)>;\u000a    sequence<DOMString> getProperties();\u000a    stringifier;\u000a};\u000a\u000acallback UpdateFunction = CSSStyleValue (CSSStyleValue oldValue);\u000a\u000ainterface StylePropertyMap : StylePropertyMapReadOnly {\u000a    void append(DOMString property, (CSSStyleValue or DOMString)... values);\u000a    void delete(DOMString property);\u000a    void set(DOMString property, (CSSStyleValue or DOMString)... values);\u000a    void update(DOMString property, UpdateFunction updateFunction);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om-1",timestamp:1512969374076,contents:"partial interface Element {\u000a    StylePropertyMapReadOnly computedStyleMap();\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om-1",timestamp:1512969374076,contents:"partial interface CSSStyleRule {\u000a    [SameObject] readonly attribute StylePropertyMap attributeStyleMap;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om-1",timestamp:1512969374076,contents:"partial interface Element {\u000a    [SameObject] readonly attribute StylePropertyMap attributeStyleMap;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om-1",timestamp:1512969374076,contents:"[Constructor((DOMString or CSSVariableReferenceValue)... members)]\u000ainterface CSSUnparsedValue : CSSStyleValue {\u000a    iterable<(DOMString or CSSVariableReferenceValue)>;\u000a    readonly attribute unsigned long length;\u000a    getter (DOMString or CSSVariableReferenceValue) (unsigned long index);\u000a};\u000a\u000ainterface CSSVariableReferenceValue {\u000a    attribute DOMString variable;\u000a    attribute CSSUnparsedValue? fallback;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om-1",timestamp:1512969374076,contents:"[Constructor(DOMString value)]\u000ainterface CSSKeywordValue : CSSStyleValue {\u000a    attribute DOMString value;\u000a    stringifier;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om-1",timestamp:1512969374076,contents:"typedef (DOMString or CSSKeywordValue) CSSKeywordish;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om-1",timestamp:1512969374076,contents:"typedef (double or CSSNumericValue) CSSNumberish;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om-1",timestamp:1512969374076,contents:"interface CSSNumericValue : CSSStyleValue {\u000a    CSSNumericValue add(CSSNumberish... values);\u000a    CSSNumericValue sub(CSSNumberish... values);\u000a    CSSNumericValue mul(CSSNumberish... values);\u000a    CSSNumericValue div(CSSNumberish... values);\u000a    CSSNumericValue min(CSSNumberish... values);\u000a    CSSNumericValue max(CSSNumberish... values);\u000a\u000a    boolean equals(CSSNumberish... value);\u000a\u000a    CSSNumericValue to(DOMString unit);\u000a    CSSMathSum toSum(DOMString... units);\u000a    // ??? type();\u000a\u000a    static CSSNumericValue parse(DOMString cssText);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om-1",timestamp:1512969374076,contents:"[Constructor(double value, DOMString unit)]\u000ainterface CSSUnitValue : CSSNumericValue {\u000a    attribute double value;\u000a    attribute DOMString unit;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om-1",timestamp:1512969374076,contents:"interface CSSMathValue : CSSNumericValue {\u000a    readonly attribute CSSMathOperator operator;\u000a};\u000a\u000a[Constructor(CSSNumberish... args)]\u000ainterface CSSMathSum : CSSMathValue {\u000a    attribute CSSNumericArray values;\u000a};\u000a\u000a[Constructor(CSSNumberish... args)]\u000ainterface CSSMathProduct : CSSMathValue {\u000a    attribute CSSNumericArray values;\u000a};\u000a\u000a[Constructor(CSSNumberish arg)]\u000ainterface CSSMathNegate : CSSMathValue {\u000a    attribute CSSNumericValue value;\u000a};\u000a\u000a[Constructor(CSSNumberish arg)]\u000ainterface CSSMathInvert : CSSMathValue {\u000a    attribute CSSNumericValue value;\u000a};\u000a\u000a[Constructor(CSSNumberish... args)]\u000ainterface CSSMathMin : CSSMathValue {\u000a    attribute CSSNumericArray values;\u000a};\u000a\u000a[Constructor(CSSNumberish... args)]\u000ainterface CSSMathMax : CSSMathValue {\u000a    attribute CSSNumericArray values;\u000a};\u000a\u000ainterface CSSNumericArray {}; // See issue below\u000a\u000aenum CSSMathOperator {\u000a    \"sum\",\u000a    \"product\",\u000a    \"negate\",\u000a    \"invert\",\u000a    \"min\",\u000a    \"max\",\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om-1",timestamp:1512969374076,contents:"partial namespace CSS {\u000a    CSSUnitValue number(double value);\u000a    CSSUnitValue percent(double value);\u000a\u000a    // <length>\u000a    CSSUnitValue em(double value);\u000a    CSSUnitValue ex(double value);\u000a    CSSUnitValue ch(double value);\u000a    CSSUnitValue ic(double value);\u000a    CSSUnitValue rem(double value);\u000a    CSSUnitValue lh(double value);\u000a    CSSUnitValue rlh(double value);\u000a    CSSUnitValue vw(double value);\u000a    CSSUnitValue vh(double value);\u000a    CSSUnitValue vi(double value);\u000a    CSSUnitValue vb(double value);\u000a    CSSUnitValue vmin(double value);\u000a    CSSUnitValue vmax(double value);\u000a    CSSUnitValue cm(double value);\u000a    CSSUnitValue mm(double value);\u000a    CSSUnitValue q(double value);\u000a    CSSUnitValue in(double value);\u000a    CSSUnitValue pt(double value);\u000a    CSSUnitValue pc(double value);\u000a    CSSUnitValue px(double value);\u000a\u000a    // <angle>\u000a    CSSUnitValue deg(double value);\u000a    CSSUnitValue grad(double value);\u000a    CSSUnitValue rad(double value);\u000a    CSSUnitValue turn(double value);\u000a\u000a    // <time>\u000a    CSSUnitValue s(double value);\u000a    CSSUnitValue ms(double value);\u000a\u000a    // <frequency>\u000a    CSSUnitValue Hz(double value);\u000a    CSSUnitValue kHz(double value);\u000a\u000a    // <resolution>\u000a    CSSUnitValue dpi(double value);\u000a    CSSUnitValue dpcm(double value);\u000a    CSSUnitValue dppx(double value);\u000a\u000a    // <flex>\u000a    CSSUnitValue fr(double value);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om-1",timestamp:1512969374076,contents:"[Constructor(optional sequence<CSSTransformComponent> transforms)]\u000ainterface CSSTransformValue : CSSStyleValue {\u000a    /*arraylike<CSSTransformComponent>;*/\u000a    readonly attribute boolean is2D;\u000a    DOMMatrix toMatrix();\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om-1",timestamp:1512969374076,contents:"interface CSSTransformComponent {\u000a    stringifier;\u000a    attribute boolean is2D;\u000a};\u000a\u000a[Constructor(CSSNumericValue x, CSSNumericValue y, optional CSSNumericValue z)]\u000ainterface CSSTranslation : CSSTransformComponent {\u000a    attribute CSSNumericValue x;\u000a    attribute CSSNumericValue y;\u000a    attribute CSSNumericValue z;\u000a};\u000a\u000a[Constructor(CSSNumericValue angle),\u000a Constructor(CSSNumberish x, CSSNumberish y, CSSNumberish z, CSSNumericValue angle)]\u000ainterface CSSRotation : CSSTransformComponent {\u000a    attribute CSSNumberish x;\u000a    attribute CSSNumberish y;\u000a    attribute CSSNumberish z;\u000a    attribute CSSNumericValue angle;\u000a};\u000a\u000a[Constructor(CSSNumberish x, CSSNumberish y, optional CSSNumberish z)]\u000ainterface CSSScale : CSSTransformComponent {\u000a    attribute CSSNumberish x;\u000a    attribute CSSNumberish y;\u000a    attribute CSSNumberish z;\u000a};\u000a\u000a[Constructor(CSSNumericValue ax, CSSNumericValue ay)]\u000ainterface CSSSkew : CSSTransformComponent {\u000a    attribute CSSNumericValue ax;\u000a    attribute CSSNumericValue ay;\u000a};\u000a\u000a[Constructor(CSSNumericValue length)]\u000ainterface CSSPerspective : CSSTransformComponent {\u000a    attribute CSSNumericValue length;\u000a};\u000a\u000a[Constructor(DOMMatrixReadOnly matrix, optional CSSMatrixComponentOptions options)]\u000ainterface CSSMatrixComponent : CSSTransformComponent {\u000a    attribute DOMMatrix matrix;\u000a};\u000a\u000adictionary CSSMatrixComponentOptions {\u000a    boolean is2D;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om-1",timestamp:1512969374076,contents:"[Constructor(CSSNumericValue x, CSSNumericValue y)]\u000ainterface CSSPositionValue : CSSStyleValue {\u000a    attribute CSSNumericValue x;\u000a    attribute CSSNumericValue y;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om-1",timestamp:1512969374076,contents:"enum CSSResourceState {\"unloaded\", \"loading\", \"loaded\", \"error\"};\u000a\u000ainterface CSSResourceValue : CSSStyleValue {\u000a    readonly attribute CSSResourceState state;\u000a};\u000a\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om-1",timestamp:1512969374076,contents:"interface CSSImageValue : CSSResourceValue {\u000a    readonly attribute double? intrinsicWidth;\u000a    readonly attribute double? intrinsicHeight;\u000a    readonly attribute double? intrinsicRatio;\u000a};\u000a\u000a[Constructor(USVString url)]\u000ainterface CSSURLImageValue : CSSImageValue {\u000a    readonly attribute USVString url;\u000a};\u000a\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om-1",timestamp:1512969374076,contents:"[Constructor(DOMString fontFamilyName)]\u000ainterface CSSFontFaceValue : CSSResourceValue {\u000a    readonly attribute DOMString fontFamilyName;\u000a};\u000a\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom-view",timestamp:1512969380213,contents:"enum ScrollBehavior { \"auto\", \"instant\", \"smooth\" };\u000a\u000adictionary ScrollOptions {\u000a    ScrollBehavior behavior = \"auto\";\u000a};\u000adictionary ScrollToOptions : ScrollOptions {\u000a    unrestricted double left;\u000a    unrestricted double top;\u000a};\u000a\u000apartial interface Window {\u000a    [NewObject] MediaQueryList matchMedia(CSSOMString query);\u000a    [SameObject, Replaceable] readonly attribute Screen screen;\u000a\u000a    // browsing context\u000a    void moveTo(long x, long y);\u000a    void moveBy(long x, long y);\u000a    void resizeTo(long x, long y);\u000a    void resizeBy(long x, long y);\u000a\u000a    // viewport\u000a    [Replaceable] readonly attribute long innerWidth;\u000a    [Replaceable] readonly attribute long innerHeight;\u000a\u000a    // viewport scrolling\u000a    [Replaceable] readonly attribute double scrollX;\u000a    [Replaceable] readonly attribute double pageXOffset;\u000a    [Replaceable] readonly attribute double scrollY;\u000a    [Replaceable] readonly attribute double pageYOffset;\u000a    void scroll(optional ScrollToOptions options);\u000a    void scroll(unrestricted double x, unrestricted double y);\u000a    void scrollTo(optional ScrollToOptions options);\u000a    void scrollTo(unrestricted double x, unrestricted double y);\u000a    void scrollBy(optional ScrollToOptions options);\u000a    void scrollBy(unrestricted double x, unrestricted double y);\u000a\u000a    // client\u000a    [Replaceable] readonly attribute long screenX;\u000a    [Replaceable] readonly attribute long screenY;\u000a    [Replaceable] readonly attribute long outerWidth;\u000a    [Replaceable] readonly attribute long outerHeight;\u000a    [Replaceable] readonly attribute double devicePixelRatio;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom-view",timestamp:1512969380213,contents:"[Exposed=Window]\u000ainterface MediaQueryList : EventTarget {\u000a  readonly attribute CSSOMString media;\u000a  readonly attribute boolean matches;\u000a  void addListener(EventListener? listener);\u000a  void removeListener(EventListener? listener);\u000a           attribute EventHandler onchange;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom-view",timestamp:1512969380213,contents:"[Exposed=Window,\u000a Constructor(CSSOMString type, optional MediaQueryListEventInit eventInitDict)]\u000ainterface MediaQueryListEvent : Event {\u000a  readonly attribute CSSOMString media;\u000a  readonly attribute boolean matches;\u000a};\u000a\u000adictionary MediaQueryListEventInit : EventInit {\u000a  CSSOMString media = \"\";\u000a  boolean matches = false;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom-view",timestamp:1512969380213,contents:"[Exposed=Window]\u000ainterface Screen {\u000a  readonly attribute long availWidth;\u000a  readonly attribute long availHeight;\u000a  readonly attribute long width;\u000a  readonly attribute long height;\u000a  readonly attribute unsigned long colorDepth;\u000a  readonly attribute unsigned long pixelDepth;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom-view",timestamp:1512969380213,contents:"partial interface Document {\u000a  Element? elementFromPoint(double x, double y);\u000a  sequence<Element> elementsFromPoint(double x, double y);\u000a  CaretPosition? caretPositionFromPoint(double x, double y);\u000a  readonly attribute Element? scrollingElement;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom-view",timestamp:1512969380213,contents:"[Exposed=Window]\u000ainterface CaretPosition {\u000a  readonly attribute Node offsetNode;\u000a  readonly attribute unsigned long offset;\u000a  [NewObject] DOMRect? getClientRect();\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom-view",timestamp:1512969380213,contents:"enum ScrollLogicalPosition { \"start\", \"center\", \"end\", \"nearest\" };\u000adictionary ScrollIntoViewOptions : ScrollOptions {\u000a  ScrollLogicalPosition block = \"start\";\u000a  ScrollLogicalPosition inline = \"nearest\";\u000a};\u000a\u000apartial interface Element {\u000a  DOMRectList getClientRects();\u000a  [NewObject] DOMRect getBoundingClientRect();\u000a  void scrollIntoView(optional (boolean or ScrollIntoViewOptions) arg);\u000a  void scroll(optional ScrollToOptions options);\u000a  void scroll(unrestricted double x, unrestricted double y);\u000a  void scrollTo(optional ScrollToOptions options);\u000a  void scrollTo(unrestricted double x, unrestricted double y);\u000a  void scrollBy(optional ScrollToOptions options);\u000a  void scrollBy(unrestricted double x, unrestricted double y);\u000a  attribute unrestricted double scrollTop;\u000a  attribute unrestricted double scrollLeft;\u000a  readonly attribute long scrollWidth;\u000a  readonly attribute long scrollHeight;\u000a  readonly attribute long clientTop;\u000a  readonly attribute long clientLeft;\u000a  readonly attribute long clientWidth;\u000a  readonly attribute long clientHeight;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom-view",timestamp:1512969380213,contents:"partial interface HTMLElement {\u000a  readonly attribute Element? offsetParent;\u000a  readonly attribute long offsetTop;\u000a  readonly attribute long offsetLeft;\u000a  readonly attribute long offsetWidth;\u000a  readonly attribute long offsetHeight;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom-view",timestamp:1512969380213,contents:"partial interface HTMLImageElement {\u000a  readonly attribute long x;\u000a  readonly attribute long y;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom-view",timestamp:1512969380213,contents:"partial interface Range {\u000a  DOMRectList getClientRects();\u000a  [NewObject] DOMRect getBoundingClientRect();\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom-view",timestamp:1512969380213,contents:"partial interface MouseEvent {\u000a  readonly attribute double screenX;\u000a  readonly attribute double screenY;\u000a  readonly attribute double pageX;\u000a  readonly attribute double pageY;\u000a  readonly attribute double clientX;\u000a  readonly attribute double clientY;\u000a  readonly attribute double x;\u000a  readonly attribute double y;\u000a  readonly attribute double offsetX;\u000a  readonly attribute double offsetY;\u000a};\u000a\u000apartial dictionary MouseEventInit {\u000a  double screenX = 0.0;\u000a  double screenY = 0.0;\u000a  double clientX = 0.0;\u000a  double clientY = 0.0;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.csswg.org/cssom-view",timestamp:1512969380213,contents:"enum CSSBoxType { \"margin\", \"border\", \"padding\", \"content\" };\u000adictionary BoxQuadOptions {\u000a  CSSBoxType box = \"border\";\u000a  GeometryNode relativeTo; // XXX default document (i.e. viewport)\u000a};\u000a\u000adictionary ConvertCoordinateOptions {\u000a  CSSBoxType fromBox = \"border\";\u000a  CSSBoxType toBox = \"border\";\u000a};\u000a\u000a[Exposed=Window,\u000a NoInterfaceObject]\u000ainterface GeometryUtils {\u000a  sequence<DOMQuad> getBoxQuads(optional BoxQuadOptions options);\u000a  DOMQuad convertQuadFromNode(DOMQuadInit quad, GeometryNode from, optional ConvertCoordinateOptions options);\u000a  DOMQuad convertRectFromNode(DOMRectReadOnly rect, GeometryNode from, optional ConvertCoordinateOptions options);\u000a  DOMPoint convertPointFromNode(DOMPointInit point, GeometryNode from, optional ConvertCoordinateOptions options); // XXX z,w turns into 0\u000a};\u000a\u000aText implements GeometryUtils; // like Range\u000aElement implements GeometryUtils;\u000aCSSPseudoElement implements GeometryUtils;\u000aDocument implements GeometryUtils;\u000a\u000atypedef (Text or Element or CSSPseudoElement or Document) GeometryNode;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.fxtf.org/geometry",timestamp:1512969385504,contents:"[Constructor(optional unrestricted double x = 0, optional unrestricted double y = 0,\u000a             optional unrestricted double z = 0, optional unrestricted double w = 1),\u000a Exposed=(Window,Worker),\u000a Serializable]\u000ainterface DOMPointReadOnly {\u000a    [NewObject] static DOMPointReadOnly fromPoint(optional DOMPointInit other);\u000a\u000a    readonly attribute unrestricted double x;\u000a    readonly attribute unrestricted double y;\u000a    readonly attribute unrestricted double z;\u000a    readonly attribute unrestricted double w;\u000a\u000a    DOMPoint matrixTransform(optional DOMMatrixInit matrix);\u000a\u000a    serializer = { attribute };\u000a};\u000a\u000a[Constructor(optional unrestricted double x = 0, optional unrestricted double y = 0,\u000a             optional unrestricted double z = 0, optional unrestricted double w = 1),\u000a Exposed=(Window,Worker),\u000a Serializable,\u000a LegacyWindowAlias=SVGPoint]\u000ainterface DOMPoint : DOMPointReadOnly {\u000a    [NewObject] static DOMPoint fromPoint(optional DOMPointInit other);\u000a\u000a    inherit attribute unrestricted double x;\u000a    inherit attribute unrestricted double y;\u000a    inherit attribute unrestricted double z;\u000a    inherit attribute unrestricted double w;\u000a};\u000a\u000adictionary DOMPointInit {\u000a    unrestricted double x = 0;\u000a    unrestricted double y = 0;\u000a    unrestricted double z = 0;\u000a    unrestricted double w = 1;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.fxtf.org/geometry",timestamp:1512969385504,contents:"[Constructor(optional unrestricted double x = 0, optional unrestricted double y = 0,\u000a             optional unrestricted double width = 0, optional unrestricted double height = 0),\u000a Exposed=(Window,Worker),\u000a Serializable]\u000ainterface DOMRectReadOnly {\u000a    [NewObject] static DOMRectReadOnly fromRect(optional DOMRectInit other);\u000a\u000a    readonly attribute unrestricted double x;\u000a    readonly attribute unrestricted double y;\u000a    readonly attribute unrestricted double width;\u000a    readonly attribute unrestricted double height;\u000a    readonly attribute unrestricted double top;\u000a    readonly attribute unrestricted double right;\u000a    readonly attribute unrestricted double bottom;\u000a    readonly attribute unrestricted double left;\u000a\u000a    serializer = { attribute };\u000a};\u000a\u000a[Constructor(optional unrestricted double x = 0, optional unrestricted double y = 0,\u000a             optional unrestricted double width = 0, optional unrestricted double height = 0),\u000a Exposed=(Window,Worker),\u000a Serializable,\u000a LegacyWindowAlias=SVGRect]\u000ainterface DOMRect : DOMRectReadOnly {\u000a    [NewObject] static DOMRect fromRect(optional DOMRectInit other);\u000a\u000a    inherit attribute unrestricted double x;\u000a    inherit attribute unrestricted double y;\u000a    inherit attribute unrestricted double width;\u000a    inherit attribute unrestricted double height;\u000a};\u000a\u000adictionary DOMRectInit {\u000a    unrestricted double x = 0;\u000a    unrestricted double y = 0;\u000a    unrestricted double width = 0;\u000a    unrestricted double height = 0;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.fxtf.org/geometry",timestamp:1512969385504,contents:"[NoInterfaceObject,\u000a LegacyArrayClass]\u000ainterface DOMRectList {\u000a    readonly attribute unsigned long length;\u000a    getter DOMRect? item(unsigned long index);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.fxtf.org/geometry",timestamp:1512969385504,contents:"[Constructor(optional DOMPointInit p1, optional DOMPointInit p2,\u000a             optional DOMPointInit p3, optional DOMPointInit p4),\u000a Exposed=(Window,Worker),\u000a Serializable]\u000ainterface DOMQuad {\u000a    [NewObject] static DOMQuad fromRect(optional DOMRectInit other);\u000a    [NewObject] static DOMQuad fromQuad(optional DOMQuadInit other);\u000a\u000a    [SameObject] readonly attribute DOMPoint p1;\u000a    [SameObject] readonly attribute DOMPoint p2;\u000a    [SameObject] readonly attribute DOMPoint p3;\u000a    [SameObject] readonly attribute DOMPoint p4;\u000a    [NewObject] DOMRect getBounds();\u000a\u000a    serializer = { attribute };\u000a};\u000a\u000adictionary DOMQuadInit {\u000a  DOMPointInit p1;\u000a  DOMPointInit p2;\u000a  DOMPointInit p3;\u000a  DOMPointInit p4;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.fxtf.org/geometry",timestamp:1512969385504,contents:"[Constructor(optional (DOMString or sequence<unrestricted double>) init),\u000a Exposed=(Window,Worker),\u000a Serializable]\u000ainterface DOMMatrixReadOnly {\u000a    [NewObject] static DOMMatrixReadOnly fromMatrix(optional DOMMatrixInit other);\u000a    [NewObject] static DOMMatrixReadOnly fromFloat32Array(Float32Array array32);\u000a    [NewObject] static DOMMatrixReadOnly fromFloat64Array(Float64Array array64);\u000a\u000a    // These attributes are simple aliases for certain elements of the 4x4 matrix\u000a    readonly attribute unrestricted double a;\u000a    readonly attribute unrestricted double b;\u000a    readonly attribute unrestricted double c;\u000a    readonly attribute unrestricted double d;\u000a    readonly attribute unrestricted double e;\u000a    readonly attribute unrestricted double f;\u000a\u000a    readonly attribute unrestricted double m11;\u000a    readonly attribute unrestricted double m12;\u000a    readonly attribute unrestricted double m13;\u000a    readonly attribute unrestricted double m14;\u000a    readonly attribute unrestricted double m21;\u000a    readonly attribute unrestricted double m22;\u000a    readonly attribute unrestricted double m23;\u000a    readonly attribute unrestricted double m24;\u000a    readonly attribute unrestricted double m31;\u000a    readonly attribute unrestricted double m32;\u000a    readonly attribute unrestricted double m33;\u000a    readonly attribute unrestricted double m34;\u000a    readonly attribute unrestricted double m41;\u000a    readonly attribute unrestricted double m42;\u000a    readonly attribute unrestricted double m43;\u000a    readonly attribute unrestricted double m44;\u000a\u000a    readonly attribute boolean is2D;\u000a    readonly attribute boolean isIdentity;\u000a\u000a    // Immutable transform methods\u000a    [NewObject] DOMMatrix translate(optional unrestricted double tx = 0,\u000a                                    optional unrestricted double ty = 0,\u000a                                    optional unrestricted double tz = 0);\u000a    [NewObject] DOMMatrix scale(optional unrestricted double scaleX = 1,\u000a                                optional unrestricted double scaleY,\u000a                                optional unrestricted double scaleZ = 1,\u000a                                optional unrestricted double originX = 0,\u000a                                optional unrestricted double originY = 0,\u000a                                optional unrestricted double originZ = 0);\u000a    [NewObject] DOMMatrix scale3d(optional unrestricted double scale = 1,\u000a                                  optional unrestricted double originX = 0,\u000a                                  optional unrestricted double originY = 0,\u000a                                  optional unrestricted double originZ = 0);\u000a    [NewObject] DOMMatrix rotate(optional unrestricted double rotX = 0,\u000a                                 optional unrestricted double rotY,\u000a                                 optional unrestricted double rotZ);\u000a    [NewObject] DOMMatrix rotateFromVector(optional unrestricted double x = 0,\u000a                                           optional unrestricted double y = 0);\u000a    [NewObject] DOMMatrix rotateAxisAngle(optional unrestricted double x = 0,\u000a                                          optional unrestricted double y = 0,\u000a                                          optional unrestricted double z = 0,\u000a                                          optional unrestricted double angle = 0);\u000a    [NewObject] DOMMatrix skewX(optional unrestricted double sx = 0);\u000a    [NewObject] DOMMatrix skewY(optional unrestricted double sy = 0);\u000a    [NewObject] DOMMatrix multiply(optional DOMMatrixInit other);\u000a    [NewObject] DOMMatrix flipX();\u000a    [NewObject] DOMMatrix flipY();\u000a    [NewObject] DOMMatrix inverse();\u000a\u000a    [NewObject] DOMPoint transformPoint(optional DOMPointInit point);\u000a    [NewObject] Float32Array toFloat32Array();\u000a    [NewObject] Float64Array toFloat64Array();\u000a\u000a    [Exposed=Window] stringifier;\u000a    serializer = { attribute };\u000a};\u000a\u000a[Constructor(optional (DOMString or sequence<unrestricted double>) init),\u000a Exposed=(Window,Worker),\u000a Serializable,\u000a LegacyWindowAlias=(SVGMatrix,WebKitCSSMatrix)]\u000ainterface DOMMatrix : DOMMatrixReadOnly {\u000a    [NewObject] static DOMMatrix fromMatrix(optional DOMMatrixInit other);\u000a    [NewObject] static DOMMatrix fromFloat32Array(Float32Array array32);\u000a    [NewObject] static DOMMatrix fromFloat64Array(Float64Array array64);\u000a\u000a    // These attributes are simple aliases for certain elements of the 4x4 matrix\u000a    inherit attribute unrestricted double a;\u000a    inherit attribute unrestricted double b;\u000a    inherit attribute unrestricted double c;\u000a    inherit attribute unrestricted double d;\u000a    inherit attribute unrestricted double e;\u000a    inherit attribute unrestricted double f;\u000a\u000a    inherit attribute unrestricted double m11;\u000a    inherit attribute unrestricted double m12;\u000a    inherit attribute unrestricted double m13;\u000a    inherit attribute unrestricted double m14;\u000a    inherit attribute unrestricted double m21;\u000a    inherit attribute unrestricted double m22;\u000a    inherit attribute unrestricted double m23;\u000a    inherit attribute unrestricted double m24;\u000a    inherit attribute unrestricted double m31;\u000a    inherit attribute unrestricted double m32;\u000a    inherit attribute unrestricted double m33;\u000a    inherit attribute unrestricted double m34;\u000a    inherit attribute unrestricted double m41;\u000a    inherit attribute unrestricted double m42;\u000a    inherit attribute unrestricted double m43;\u000a    inherit attribute unrestricted double m44;\u000a\u000a    // Mutable transform methods\u000a    DOMMatrix multiplySelf(optional DOMMatrixInit other);\u000a    DOMMatrix preMultiplySelf(optional DOMMatrixInit other);\u000a    DOMMatrix translateSelf(optional unrestricted double tx = 0,\u000a                            optional unrestricted double ty = 0,\u000a                            optional unrestricted double tz = 0);\u000a    DOMMatrix scaleSelf(optional unrestricted double scaleX = 1,\u000a                        optional unrestricted double scaleY,\u000a                        optional unrestricted double scaleZ = 1,\u000a                        optional unrestricted double originX = 0,\u000a                        optional unrestricted double originY = 0,\u000a                        optional unrestricted double originZ = 0);\u000a    DOMMatrix scale3dSelf(optional unrestricted double scale = 1,\u000a                          optional unrestricted double originX = 0,\u000a                          optional unrestricted double originY = 0,\u000a                          optional unrestricted double originZ = 0);\u000a    DOMMatrix rotateSelf(optional unrestricted double rotX = 0,\u000a                         optional unrestricted double rotY,\u000a                         optional unrestricted double rotZ);\u000a    DOMMatrix rotateFromVectorSelf(optional unrestricted double x = 0,\u000a                                   optional unrestricted double y = 0);\u000a    DOMMatrix rotateAxisAngleSelf(optional unrestricted double x = 0,\u000a                                  optional unrestricted double y = 0,\u000a                                  optional unrestricted double z = 0,\u000a                                  optional unrestricted double angle = 0);\u000a    DOMMatrix skewXSelf(optional unrestricted double sx = 0);\u000a    DOMMatrix skewYSelf(optional unrestricted double sy = 0);\u000a    DOMMatrix invertSelf();\u000a\u000a    [Exposed=Window] DOMMatrix setMatrixValue(DOMString transformList);\u000a};\u000a\u000adictionary DOMMatrix2DInit {\u000a    unrestricted double a;\u000a    unrestricted double b;\u000a    unrestricted double c;\u000a    unrestricted double d;\u000a    unrestricted double e;\u000a    unrestricted double f;\u000a    unrestricted double m11;\u000a    unrestricted double m12;\u000a    unrestricted double m21;\u000a    unrestricted double m22;\u000a    unrestricted double m41;\u000a    unrestricted double m42;\u000a};\u000a\u000adictionary DOMMatrixInit : DOMMatrix2DInit {\u000a    unrestricted double m13 = 0;\u000a    unrestricted double m14 = 0;\u000a    unrestricted double m23 = 0;\u000a    unrestricted double m24 = 0;\u000a    unrestricted double m31 = 0;\u000a    unrestricted double m32 = 0;\u000a    unrestricted double m33 = 1;\u000a    unrestricted double m34 = 0;\u000a    unrestricted double m43 = 0;\u000a    unrestricted double m44 = 1;\u000a    boolean is2D;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om",timestamp:1512969392330,contents:"interface CSSStyleValue {\u000a    stringifier;\u000a    static CSSStyleValue? parse(DOMString property, DOMString cssText);\u000a    static sequence<CSSStyleValue>? parseAll(DOMString property, DOMString cssText);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om",timestamp:1512969392330,contents:"interface StylePropertyMapReadOnly {\u000a    CSSStyleValue? get(DOMString property);\u000a    sequence<CSSStyleValue> getAll(DOMString property);\u000a    boolean has(DOMString property);\u000a    iterable<DOMString, (CSSStyleValue or sequence<CSSStyleValue>)>;\u000a    sequence<DOMString> getProperties();\u000a    stringifier;\u000a};\u000a\u000acallback UpdateFunction = CSSStyleValue (CSSStyleValue oldValue);\u000a\u000ainterface StylePropertyMap : StylePropertyMapReadOnly {\u000a    void append(DOMString property, (CSSStyleValue or DOMString)... values);\u000a    void delete(DOMString property);\u000a    void set(DOMString property, (CSSStyleValue or DOMString)... values);\u000a    void update(DOMString property, UpdateFunction updateFunction);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om",timestamp:1512969392330,contents:"partial interface Element {\u000a    StylePropertyMapReadOnly computedStyleMap();\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om",timestamp:1512969392330,contents:"partial interface CSSStyleRule {\u000a    [SameObject] readonly attribute StylePropertyMap attributeStyleMap;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om",timestamp:1512969392330,contents:"partial interface Element {\u000a    [SameObject] readonly attribute StylePropertyMap attributeStyleMap;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om",timestamp:1512969392330,contents:"[Constructor((DOMString or CSSVariableReferenceValue)... members)]\u000ainterface CSSUnparsedValue : CSSStyleValue {\u000a    iterable<(DOMString or CSSVariableReferenceValue)>;\u000a    readonly attribute unsigned long length;\u000a    getter (DOMString or CSSVariableReferenceValue) (unsigned long index);\u000a};\u000a\u000ainterface CSSVariableReferenceValue {\u000a    attribute DOMString variable;\u000a    attribute CSSUnparsedValue? fallback;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om",timestamp:1512969392330,contents:"[Constructor(DOMString value)]\u000ainterface CSSKeywordValue : CSSStyleValue {\u000a    attribute DOMString value;\u000a    stringifier;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om",timestamp:1512969392330,contents:"typedef (DOMString or CSSKeywordValue) CSSKeywordish;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om",timestamp:1512969392330,contents:"typedef (double or CSSNumericValue) CSSNumberish;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om",timestamp:1512969392330,contents:"interface CSSNumericValue : CSSStyleValue {\u000a    CSSNumericValue add(CSSNumberish... values);\u000a    CSSNumericValue sub(CSSNumberish... values);\u000a    CSSNumericValue mul(CSSNumberish... values);\u000a    CSSNumericValue div(CSSNumberish... values);\u000a    CSSNumericValue min(CSSNumberish... values);\u000a    CSSNumericValue max(CSSNumberish... values);\u000a\u000a    boolean equals(CSSNumberish... value);\u000a\u000a    CSSNumericValue to(DOMString unit);\u000a    CSSMathSum toSum(DOMString... units);\u000a    // ??? type();\u000a\u000a    static CSSNumericValue parse(DOMString cssText);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om",timestamp:1512969392330,contents:"[Constructor(double value, DOMString unit)]\u000ainterface CSSUnitValue : CSSNumericValue {\u000a    attribute double value;\u000a    attribute DOMString unit;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om",timestamp:1512969392330,contents:"interface CSSMathValue : CSSNumericValue {\u000a    readonly attribute CSSMathOperator operator;\u000a};\u000a\u000a[Constructor(CSSNumberish... args)]\u000ainterface CSSMathSum : CSSMathValue {\u000a    attribute CSSNumericArray values;\u000a};\u000a\u000a[Constructor(CSSNumberish... args)]\u000ainterface CSSMathProduct : CSSMathValue {\u000a    attribute CSSNumericArray values;\u000a};\u000a\u000a[Constructor(CSSNumberish arg)]\u000ainterface CSSMathNegate : CSSMathValue {\u000a    attribute CSSNumericValue value;\u000a};\u000a\u000a[Constructor(CSSNumberish arg)]\u000ainterface CSSMathInvert : CSSMathValue {\u000a    attribute CSSNumericValue value;\u000a};\u000a\u000a[Constructor(CSSNumberish... args)]\u000ainterface CSSMathMin : CSSMathValue {\u000a    attribute CSSNumericArray values;\u000a};\u000a\u000a[Constructor(CSSNumberish... args)]\u000ainterface CSSMathMax : CSSMathValue {\u000a    attribute CSSNumericArray values;\u000a};\u000a\u000ainterface CSSNumericArray {}; // See issue below\u000a\u000aenum CSSMathOperator {\u000a    \"sum\",\u000a    \"product\",\u000a    \"negate\",\u000a    \"invert\",\u000a    \"min\",\u000a    \"max\",\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om",timestamp:1512969392330,contents:"partial namespace CSS {\u000a    CSSUnitValue number(double value);\u000a    CSSUnitValue percent(double value);\u000a\u000a    // <length>\u000a    CSSUnitValue em(double value);\u000a    CSSUnitValue ex(double value);\u000a    CSSUnitValue ch(double value);\u000a    CSSUnitValue ic(double value);\u000a    CSSUnitValue rem(double value);\u000a    CSSUnitValue lh(double value);\u000a    CSSUnitValue rlh(double value);\u000a    CSSUnitValue vw(double value);\u000a    CSSUnitValue vh(double value);\u000a    CSSUnitValue vi(double value);\u000a    CSSUnitValue vb(double value);\u000a    CSSUnitValue vmin(double value);\u000a    CSSUnitValue vmax(double value);\u000a    CSSUnitValue cm(double value);\u000a    CSSUnitValue mm(double value);\u000a    CSSUnitValue q(double value);\u000a    CSSUnitValue in(double value);\u000a    CSSUnitValue pt(double value);\u000a    CSSUnitValue pc(double value);\u000a    CSSUnitValue px(double value);\u000a\u000a    // <angle>\u000a    CSSUnitValue deg(double value);\u000a    CSSUnitValue grad(double value);\u000a    CSSUnitValue rad(double value);\u000a    CSSUnitValue turn(double value);\u000a\u000a    // <time>\u000a    CSSUnitValue s(double value);\u000a    CSSUnitValue ms(double value);\u000a\u000a    // <frequency>\u000a    CSSUnitValue Hz(double value);\u000a    CSSUnitValue kHz(double value);\u000a\u000a    // <resolution>\u000a    CSSUnitValue dpi(double value);\u000a    CSSUnitValue dpcm(double value);\u000a    CSSUnitValue dppx(double value);\u000a\u000a    // <flex>\u000a    CSSUnitValue fr(double value);\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om",timestamp:1512969392330,contents:"[Constructor(optional sequence<CSSTransformComponent> transforms)]\u000ainterface CSSTransformValue : CSSStyleValue {\u000a    /*arraylike<CSSTransformComponent>;*/\u000a    readonly attribute boolean is2D;\u000a    DOMMatrix toMatrix();\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om",timestamp:1512969392330,contents:"interface CSSTransformComponent {\u000a    stringifier;\u000a    attribute boolean is2D;\u000a};\u000a\u000a[Constructor(CSSNumericValue x, CSSNumericValue y, optional CSSNumericValue z)]\u000ainterface CSSTranslation : CSSTransformComponent {\u000a    attribute CSSNumericValue x;\u000a    attribute CSSNumericValue y;\u000a    attribute CSSNumericValue z;\u000a};\u000a\u000a[Constructor(CSSNumericValue angle),\u000a Constructor(CSSNumberish x, CSSNumberish y, CSSNumberish z, CSSNumericValue angle)]\u000ainterface CSSRotation : CSSTransformComponent {\u000a    attribute CSSNumberish x;\u000a    attribute CSSNumberish y;\u000a    attribute CSSNumberish z;\u000a    attribute CSSNumericValue angle;\u000a};\u000a\u000a[Constructor(CSSNumberish x, CSSNumberish y, optional CSSNumberish z)]\u000ainterface CSSScale : CSSTransformComponent {\u000a    attribute CSSNumberish x;\u000a    attribute CSSNumberish y;\u000a    attribute CSSNumberish z;\u000a};\u000a\u000a[Constructor(CSSNumericValue ax, CSSNumericValue ay)]\u000ainterface CSSSkew : CSSTransformComponent {\u000a    attribute CSSNumericValue ax;\u000a    attribute CSSNumericValue ay;\u000a};\u000a\u000a[Constructor(CSSNumericValue length)]\u000ainterface CSSPerspective : CSSTransformComponent {\u000a    attribute CSSNumericValue length;\u000a};\u000a\u000a[Constructor(DOMMatrixReadOnly matrix, optional CSSMatrixComponentOptions options)]\u000ainterface CSSMatrixComponent : CSSTransformComponent {\u000a    attribute DOMMatrix matrix;\u000a};\u000a\u000adictionary CSSMatrixComponentOptions {\u000a    boolean is2D;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om",timestamp:1512969392330,contents:"[Constructor(CSSNumericValue x, CSSNumericValue y)]\u000ainterface CSSPositionValue : CSSStyleValue {\u000a    attribute CSSNumericValue x;\u000a    attribute CSSNumericValue y;\u000a};\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om",timestamp:1512969392330,contents:"enum CSSResourceState {\"unloaded\", \"loading\", \"loaded\", \"error\"};\u000a\u000ainterface CSSResourceValue : CSSStyleValue {\u000a    readonly attribute CSSResourceState state;\u000a};\u000a\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om",timestamp:1512969392330,contents:"interface CSSImageValue : CSSResourceValue {\u000a    readonly attribute double? intrinsicWidth;\u000a    readonly attribute double? intrinsicHeight;\u000a    readonly attribute double? intrinsicRatio;\u000a};\u000a\u000a[Constructor(USVString url)]\u000ainterface CSSURLImageValue : CSSImageValue {\u000a    readonly attribute USVString url;\u000a};\u000a\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://drafts.css-houdini.org/css-typed-om",timestamp:1512969392330,contents:"[Constructor(DOMString fontFamilyName)]\u000ainterface CSSFontFaceValue : CSSResourceValue {\u000a    readonly attribute DOMString fontFamilyName;\u000a};\u000a\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"interface SVGElement : Element {\u000a\u000a  [SameObject] readonly attribute SVGAnimatedString className;\u000a\u000a  [SameObject] readonly attribute DOMStringMap dataset;\u000a\u000a  readonly attribute SVGSVGElement? ownerSVGElement;\u000a  readonly attribute SVGElement? viewportElement;\u000a\u000a  attribute long tabIndex;\u000a  void focus();\u000a  void blur();\u000a};\u000a\u000aSVGElement implements GlobalEventHandlers;\u000aSVGElement implements SVGElementInstance;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"dictionary SVGBoundingBoxOptions {\u000a  boolean fill = true;\u000a  boolean stroke = false;\u000a  boolean markers = false;\u000a  boolean clipped = false;\u000a};\u000a\u000ainterface SVGGraphicsElement : SVGElement {\u000a  [SameObject] readonly attribute SVGAnimatedTransformList transform;\u000a\u000a  DOMRect getBBox(optional SVGBoundingBoxOptions options);\u000a  DOMMatrix? getCTM();\u000a  DOMMatrix? getScreenCTM();\u000a};\u000a\u000aSVGGraphicsElement implements SVGTests;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"interface SVGGeometryElement : SVGGraphicsElement {\u000a  [SameObject] readonly attribute SVGAnimatedNumber pathLength;\u000a\u000a  boolean isPointInFill(DOMPoint point);\u000a  boolean isPointInStroke(DOMPoint point);\u000a  float getTotalLength();\u000a  DOMPoint getPointAtLength(float distance);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"interface SVGNumber {\u000a  attribute float value;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"interface SVGLength {\u000a\u000a  // Length Unit Types\u000a  const unsigned short SVG_LENGTHTYPE_UNKNOWN = 0;\u000a  const unsigned short SVG_LENGTHTYPE_NUMBER = 1;\u000a  const unsigned short SVG_LENGTHTYPE_PERCENTAGE = 2;\u000a  const unsigned short SVG_LENGTHTYPE_EMS = 3;\u000a  const unsigned short SVG_LENGTHTYPE_EXS = 4;\u000a  const unsigned short SVG_LENGTHTYPE_PX = 5;\u000a  const unsigned short SVG_LENGTHTYPE_CM = 6;\u000a  const unsigned short SVG_LENGTHTYPE_MM = 7;\u000a  const unsigned short SVG_LENGTHTYPE_IN = 8;\u000a  const unsigned short SVG_LENGTHTYPE_PT = 9;\u000a  const unsigned short SVG_LENGTHTYPE_PC = 10;\u000a\u000a  readonly attribute unsigned short unitType;\u000a           attribute float value;\u000a           attribute float valueInSpecifiedUnits;\u000a           attribute DOMString valueAsString;\u000a\u000a  void newValueSpecifiedUnits(unsigned short unitType, float valueInSpecifiedUnits);\u000a  void convertToSpecifiedUnits(unsigned short unitType);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"interface SVGAngle {\u000a\u000a  // Angle Unit Types\u000a  const unsigned short SVG_ANGLETYPE_UNKNOWN = 0;\u000a  const unsigned short SVG_ANGLETYPE_UNSPECIFIED = 1;\u000a  const unsigned short SVG_ANGLETYPE_DEG = 2;\u000a  const unsigned short SVG_ANGLETYPE_RAD = 3;\u000a  const unsigned short SVG_ANGLETYPE_GRAD = 4;\u000a\u000a  readonly attribute unsigned short unitType;\u000a           attribute float value;\u000a           attribute float valueInSpecifiedUnits;\u000a           attribute DOMString valueAsString;\u000a\u000a  void newValueSpecifiedUnits(unsigned short unitType, float valueInSpecifiedUnits);\u000a  void convertToSpecifiedUnits(unsigned short unitType);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"interface SVGNameList {\u000a\u000a  readonly attribute unsigned long length;\u000a  readonly attribute unsigned long numberOfItems;\u000a\u000a  void clear();\u000a  Type initialize(Type newItem);\u000a  getter Type getItem(unsigned long index);\u000a  Type insertItemBefore(Type newItem, unsigned long index);\u000a  Type replaceItem(Type newItem, unsigned long index);\u000a  Type removeItem(unsigned long index);\u000a  Type appendItem(Type newItem);\u000a  setter void (unsigned long index, Type newItem);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"interface SVGNumberList {\u000a\u000a  readonly attribute unsigned long length;\u000a  readonly attribute unsigned long numberOfItems;\u000a\u000a  void clear();\u000a  SVGNumber initialize(SVGNumber newItem);\u000a  getter SVGNumber getItem(unsigned long index);\u000a  SVGNumber insertItemBefore(SVGNumber newItem, unsigned long index);\u000a  SVGNumber replaceItem(SVGNumber newItem, unsigned long index);\u000a  SVGNumber removeItem(unsigned long index);\u000a  SVGNumber appendItem(SVGNumber newItem);\u000a  setter void (unsigned long index, SVGNumber newItem);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"interface SVGLengthList {\u000a\u000a  readonly attribute unsigned long length;\u000a  readonly attribute unsigned long numberOfItems;\u000a\u000a  void clear();\u000a  SVGLength initialize(SVGLength newItem);\u000a  getter SVGLength getItem(unsigned long index);\u000a  SVGLength insertItemBefore(SVGLength newItem, unsigned long index);\u000a  SVGLength replaceItem(SVGLength newItem, unsigned long index);\u000a  SVGLength removeItem(unsigned long index);\u000a  SVGLength appendItem(SVGLength newItem);\u000a  setter void (unsigned long index, SVGLength newItem);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"interface SVGAnimatedBoolean {\u000a           attribute boolean baseVal;\u000a  readonly attribute boolean animVal;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"interface SVGAnimatedEnumeration {\u000a           attribute unsigned short baseVal;\u000a  readonly attribute unsigned short animVal;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"interface SVGAnimatedInteger {\u000a           attribute long baseVal;\u000a  readonly attribute long animVal;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"interface SVGAnimatedNumber {\u000a           attribute float baseVal;\u000a  readonly attribute float animVal;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"interface SVGAnimatedLength {\u000a  [SameObject] readonly attribute SVGLength baseVal;\u000a  [SameObject] readonly attribute SVGLength animVal;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"interface SVGAnimatedAngle {\u000a  [SameObject] readonly attribute SVGAngle baseVal;\u000a  [SameObject] readonly attribute SVGAngle animVal;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"interface SVGAnimatedString {\u000a           attribute DOMString baseVal;\u000a  readonly attribute DOMString animVal;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"interface SVGAnimatedRect {\u000a  [SameObject] readonly attribute DOMRect baseVal;\u000a  [SameObject] readonly attribute DOMRectReadOnly animVal;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"interface SVGAnimatedNumberList {\u000a  [SameObject] readonly attribute SVGNumberList baseVal;\u000a  [SameObject] readonly attribute SVGNumberList animVal;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"interface SVGAnimatedLengthList {\u000a  [SameObject] readonly attribute SVGLengthList baseVal;\u000a  [SameObject] readonly attribute SVGLengthList animVal;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"interface SVGStringList {\u000a\u000a  readonly attribute unsigned long length;\u000a  readonly attribute unsigned long numberOfItems;\u000a\u000a  void clear();\u000a  DOMString initialize(DOMString newItem);\u000a  getter DOMString getItem(unsigned long index);\u000a  DOMString insertItemBefore(DOMString newItem, unsigned long index);\u000a  DOMString replaceItem(DOMString newItem, unsigned long index);\u000a  DOMString removeItem(unsigned long index);\u000a  DOMString appendItem(DOMString newItem);\u000a  setter void (unsigned long index, DOMString newItem);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"interface SVGUnitTypes {\u000a  // Unit Types\u000a  const unsigned short SVG_UNIT_TYPE_UNKNOWN = 0;\u000a  const unsigned short SVG_UNIT_TYPE_USERSPACEONUSE = 1;\u000a  const unsigned short SVG_UNIT_TYPE_OBJECTBOUNDINGBOX = 2;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"[NoInterfaceObject]\u000ainterface SVGTests {\u000a  [SameObject] readonly attribute SVGStringList requiredExtensions;\u000a  [SameObject] readonly attribute SVGStringList systemLanguage;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"[NoInterfaceObject]\u000ainterface SVGFitToViewBox {\u000a  [SameObject] readonly attribute SVGAnimatedRect viewBox;\u000a  [SameObject] readonly attribute SVGAnimatedPreserveAspectRatio preserveAspectRatio;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"[NoInterfaceObject]\u000ainterface SVGZoomAndPan {\u000a\u000a  // Zoom and Pan Types\u000a  const unsigned short SVG_ZOOMANDPAN_UNKNOWN = 0;\u000a  const unsigned short SVG_ZOOMANDPAN_DISABLE = 1;\u000a  const unsigned short SVG_ZOOMANDPAN_MAGNIFY = 2;\u000a\u000a  attribute unsigned short zoomAndPan;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/types.html",timestamp:1512969397117,contents:"[NoInterfaceObject]\u000ainterface SVGURIReference {\u000a  [SameObject] readonly attribute SVGAnimatedString href;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/painting.html",timestamp:1512969398107,contents:"interface SVGMarkerElement : SVGElement {\u000a\u000a  // Marker Unit Types\u000a  const unsigned short SVG_MARKERUNITS_UNKNOWN = 0;\u000a  const unsigned short SVG_MARKERUNITS_USERSPACEONUSE = 1;\u000a  const unsigned short SVG_MARKERUNITS_STROKEWIDTH = 2;\u000a\u000a  // Marker Orientation Types\u000a  const unsigned short SVG_MARKER_ORIENT_UNKNOWN = 0;\u000a  const unsigned short SVG_MARKER_ORIENT_AUTO = 1;\u000a  const unsigned short SVG_MARKER_ORIENT_ANGLE = 2;\u000a\u000a  [SameObject] readonly attribute SVGAnimatedLength refX;\u000a  [SameObject] readonly attribute SVGAnimatedLength refY;\u000a  [SameObject] readonly attribute SVGAnimatedEnumeration markerUnits;\u000a  [SameObject] readonly attribute SVGAnimatedLength markerWidth;\u000a  [SameObject] readonly attribute SVGAnimatedLength markerHeight;\u000a  [SameObject] readonly attribute SVGAnimatedEnumeration orientType;\u000a  [SameObject] readonly attribute SVGAnimatedAngle orientAngle;\u000a  attribute DOMString orient;\u000a\u000a  void setOrientToAuto();\u000a  void setOrientToAngle(SVGAngle angle);\u000a};\u000a\u000aSVGMarkerElement implements SVGFitToViewBox;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/linking.html",timestamp:1512969399271,contents:"interface SVGAElement : SVGGraphicsElement {\u000a  [SameObject] readonly attribute SVGAnimatedString target;\u000a  [SameObject] readonly attribute SVGAnimatedString download;\u000a  [SameObject] readonly attribute SVGAnimatedString rel;\u000a  [SameObject] readonly attribute SVGAnimatedString relList;\u000a  [SameObject] readonly attribute SVGAnimatedString hreflang;\u000a  [SameObject] readonly attribute SVGAnimatedString type;\u000a};\u000a\u000aSVGAElement implements SVGURIReference;\u000aSVGAElement implements HTMLHyperlinkElementUtils;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/linking.html",timestamp:1512969399271,contents:"interface SVGViewElement : SVGElement {};\u000a\u000aSVGViewElement implements SVGFitToViewBox;\u000aSVGViewElement implements SVGZoomAndPan;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/styling.html",timestamp:1512969400053,contents:"interface SVGStyleElement : SVGElement {\u000a  attribute DOMString type;\u000a  attribute DOMString media;\u000a  attribute DOMString title;\u000a};\u000a\u000aSVGStyleElement implements LinkStyle;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/embedded.html",timestamp:1512969400362,contents:"interface SVGImageElement : SVGGraphicsElement {\u000a  [SameObject] readonly attribute SVGAnimatedLength x;\u000a  [SameObject] readonly attribute SVGAnimatedLength y;\u000a  [SameObject] readonly attribute SVGAnimatedLength width;\u000a  [SameObject] readonly attribute SVGAnimatedLength height;\u000a  [SameObject] readonly attribute SVGAnimatedPreserveAspectRatio preserveAspectRatio;\u000a  attribute DOMString? crossOrigin;\u000a};\u000a\u000aSVGImageElement implements SVGURIReference;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/embedded.html",timestamp:1512969400362,contents:"interface SVGForeignObjectElement : SVGGraphicsElement {\u000a  [SameObject] readonly attribute SVGAnimatedLength x;\u000a  [SameObject] readonly attribute SVGAnimatedLength y;\u000a  [SameObject] readonly attribute SVGAnimatedLength width;\u000a  [SameObject] readonly attribute SVGAnimatedLength height;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/paths.html",timestamp:1512969400815,contents:"interface SVGPathElement : SVGGeometryElement {\u000a<!--\u000a  [SameObject] readonly attribute SVGAnimatedNumber pathLength;\u000a\u000a  float getTotalLength();\u000a  DOMPoint getPointAtLength(float distance);\u000a-->\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/coords.html",timestamp:1512969401264,contents:"interface SVGTransform {\u000a\u000a  // Transform Types\u000a  const unsigned short SVG_TRANSFORM_UNKNOWN = 0;\u000a  const unsigned short SVG_TRANSFORM_MATRIX = 1;\u000a  const unsigned short SVG_TRANSFORM_TRANSLATE = 2;\u000a  const unsigned short SVG_TRANSFORM_SCALE = 3;\u000a  const unsigned short SVG_TRANSFORM_ROTATE = 4;\u000a  const unsigned short SVG_TRANSFORM_SKEWX = 5;\u000a  const unsigned short SVG_TRANSFORM_SKEWY = 6;\u000a\u000a  readonly attribute unsigned short type;\u000a  [SameObject] readonly attribute DOMMatrix matrix;\u000a  readonly attribute float angle;\u000a\u000a  void setMatrix(DOMMatrixReadOnly matrix);\u000a  void setTranslate(float tx, float ty);\u000a  void setScale(float sx, float sy);\u000a  void setRotate(float angle, float cx, float cy);\u000a  void setSkewX(float angle);\u000a  void setSkewY(float angle);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/coords.html",timestamp:1512969401264,contents:"interface SVGTransformList {\u000a\u000a  readonly attribute unsigned long length;\u000a  readonly attribute unsigned long numberOfItems;\u000a\u000a  void clear();\u000a  SVGTransform initialize(SVGTransform newItem);\u000a  getter SVGTransform getItem(unsigned long index);\u000a  SVGTransform insertItemBefore(SVGTransform newItem, unsigned long index);\u000a  SVGTransform replaceItem(SVGTransform newItem, unsigned long index);\u000a  SVGTransform removeItem(unsigned long index);\u000a  SVGTransform appendItem(SVGTransform newItem);\u000a  setter void (unsigned long index, SVGTransform newItem);\u000a\u000a  // Additional methods not common to other list interfaces.\u000a  SVGTransform createSVGTransformFromMatrix(DOMMatrixReadOnly matrix);\u000a  SVGTransform? consolidate();\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/coords.html",timestamp:1512969401264,contents:"interface SVGAnimatedTransformList {\u000a  [SameObject] readonly attribute SVGTransformList baseVal;\u000a  [SameObject] readonly attribute SVGTransformList animVal;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/coords.html",timestamp:1512969401264,contents:"interface SVGPreserveAspectRatio {\u000a\u000a  // Alignment Types\u000a  const unsigned short SVG_PRESERVEASPECTRATIO_UNKNOWN = 0;\u000a  const unsigned short SVG_PRESERVEASPECTRATIO_NONE = 1;\u000a  const unsigned short SVG_PRESERVEASPECTRATIO_XMINYMIN = 2;\u000a  const unsigned short SVG_PRESERVEASPECTRATIO_XMIDYMIN = 3;\u000a  const unsigned short SVG_PRESERVEASPECTRATIO_XMAXYMIN = 4;\u000a  const unsigned short SVG_PRESERVEASPECTRATIO_XMINYMID = 5;\u000a  const unsigned short SVG_PRESERVEASPECTRATIO_XMIDYMID = 6;\u000a  const unsigned short SVG_PRESERVEASPECTRATIO_XMAXYMID = 7;\u000a  const unsigned short SVG_PRESERVEASPECTRATIO_XMINYMAX = 8;\u000a  const unsigned short SVG_PRESERVEASPECTRATIO_XMIDYMAX = 9;\u000a  const unsigned short SVG_PRESERVEASPECTRATIO_XMAXYMAX = 10;\u000a\u000a  // Meet-or-slice Types\u000a  const unsigned short SVG_MEETORSLICE_UNKNOWN = 0;\u000a  const unsigned short SVG_MEETORSLICE_MEET = 1;\u000a  const unsigned short SVG_MEETORSLICE_SLICE = 2;\u000a\u000a  attribute unsigned short align;\u000a  attribute unsigned short meetOrSlice;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/coords.html",timestamp:1512969401264,contents:"interface SVGAnimatedPreserveAspectRatio {\u000a  [SameObject] readonly attribute SVGPreserveAspectRatio baseVal;\u000a  [SameObject] readonly attribute SVGPreserveAspectRatio animVal;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/pservers.html",timestamp:1512969402333,contents:"interface SVGSolidcolorElement : SVGElement {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/pservers.html",timestamp:1512969402333,contents:"interface SVGGradientElement : SVGElement {\u000a\u000a  // Spread Method Types\u000a  const unsigned short SVG_SPREADMETHOD_UNKNOWN = 0;\u000a  const unsigned short SVG_SPREADMETHOD_PAD = 1;\u000a  const unsigned short SVG_SPREADMETHOD_REFLECT = 2;\u000a  const unsigned short SVG_SPREADMETHOD_REPEAT = 3;\u000a\u000a  [SameObject] readonly attribute SVGAnimatedEnumeration gradientUnits;\u000a  [SameObject] readonly attribute SVGAnimatedTransformList gradientTransform;\u000a  [SameObject] readonly attribute SVGAnimatedEnumeration spreadMethod;\u000a};\u000a\u000aSVGGradientElement implements SVGURIReference;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/pservers.html",timestamp:1512969402333,contents:"interface SVGLinearGradientElement : SVGGradientElement {\u000a  [SameObject] readonly attribute SVGAnimatedLength x1;\u000a  [SameObject] readonly attribute SVGAnimatedLength y1;\u000a  [SameObject] readonly attribute SVGAnimatedLength x2;\u000a  [SameObject] readonly attribute SVGAnimatedLength y2;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/pservers.html",timestamp:1512969402333,contents:"interface SVGRadialGradientElement : SVGGradientElement {\u000a  [SameObject] readonly attribute SVGAnimatedLength cx;\u000a  [SameObject] readonly attribute SVGAnimatedLength cy;\u000a  [SameObject] readonly attribute SVGAnimatedLength r;\u000a  [SameObject] readonly attribute SVGAnimatedLength fx;\u000a  [SameObject] readonly attribute SVGAnimatedLength fy;\u000a  [SameObject] readonly attribute SVGAnimatedLength fr;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/pservers.html",timestamp:1512969402333,contents:"interface SVGMeshGradientElement : SVGGradientElement {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/pservers.html",timestamp:1512969402333,contents:"interface SVGMeshrowElement : SVGElement {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/pservers.html",timestamp:1512969402333,contents:"interface SVGMeshpatchElement : SVGElement {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/pservers.html",timestamp:1512969402333,contents:"interface SVGStopElement : SVGElement {\u000a  [SameObject] readonly attribute SVGAnimatedNumber offset;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/pservers.html",timestamp:1512969402333,contents:"interface SVGPatternElement : SVGElement {\u000a  [SameObject] readonly attribute SVGAnimatedEnumeration patternUnits;\u000a  [SameObject] readonly attribute SVGAnimatedEnumeration patternContentUnits;\u000a  [SameObject] readonly attribute SVGAnimatedTransformList patternTransform;\u000a  [SameObject] readonly attribute SVGAnimatedLength x;\u000a  [SameObject] readonly attribute SVGAnimatedLength y;\u000a  [SameObject] readonly attribute SVGAnimatedLength width;\u000a  [SameObject] readonly attribute SVGAnimatedLength height;\u000a};\u000a\u000aSVGPatternElement implements SVGFitToViewBox;\u000aSVGPatternElement implements SVGURIReference;\u000a"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/pservers.html",timestamp:1512969402333,contents:"interface SVGHatchElement : SVGElement {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/pservers.html",timestamp:1512969402333,contents:"interface SVGHatchpathElement : SVGElement {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/text.html",timestamp:1512969404155,contents:"interface SVGTextContentElement : SVGGraphicsElement {\u000a\u000a  // lengthAdjust Types\u000a  const unsigned short LENGTHADJUST_UNKNOWN = 0;\u000a  const unsigned short LENGTHADJUST_SPACING = 1;\u000a  const unsigned short LENGTHADJUST_SPACINGANDGLYPHS = 2;\u000a\u000a  [SameObject] readonly attribute SVGAnimatedLength textLength;\u000a  [SameObject] readonly attribute SVGAnimatedEnumeration lengthAdjust;\u000a\u000a  long getNumberOfChars();\u000a  float getComputedTextLength();\u000a  float getSubStringLength(unsigned long charnum, unsigned long nchars);\u000a  DOMPoint getStartPositionOfChar(unsigned long charnum);\u000a  DOMPoint getEndPositionOfChar(unsigned long charnum);\u000a  DOMRect getExtentOfChar(unsigned long charnum);\u000a  float getRotationOfChar(unsigned long charnum);\u000a  long getCharNumAtPosition(DOMPoint point);\u000a  void selectSubString(unsigned long charnum, unsigned long nchars);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/text.html",timestamp:1512969404155,contents:"interface SVGTextPositioningElement : SVGTextContentElement {\u000a  [SameObject] readonly attribute SVGAnimatedLengthList x;\u000a  [SameObject] readonly attribute SVGAnimatedLengthList y;\u000a  [SameObject] readonly attribute SVGAnimatedLengthList dx;\u000a  [SameObject] readonly attribute SVGAnimatedLengthList dy;\u000a  [SameObject] readonly attribute SVGAnimatedNumberList rotate;\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/text.html",timestamp:1512969404155,contents:"interface SVGTextElement : SVGTextPositioningElement {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/text.html",timestamp:1512969404155,contents:"interface SVGTSpanElement : SVGTextPositioningElement {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/svg2-draft/text.html",timestamp:1512969404155,contents:"interface SVGTextPathElement : SVGTextContentElement {\u000a\u000a  // textPath Method Types\u000a  const unsigned short TEXTPATH_METHODTYPE_UNKNOWN = 0;\u000a  const unsigned short TEXTPATH_METHODTYPE_ALIGN = 1;\u000a  const unsigned short TEXTPATH_METHODTYPE_STRETCH = 2;\u000a\u000a  // textPath Spacing Types\u000a  const unsigned short TEXTPATH_SPACINGTYPE_UNKNOWN = 0;\u000a  const unsigned short TEXTPATH_SPACINGTYPE_AUTO = 1;\u000a  const unsigned short TEXTPATH_SPACINGTYPE_EXACT = 2;\u000a\u000a  [SameObject] readonly attribute SVGAnimatedLength startOffset;\u000a  [SameObject] readonly attribute SVGAnimatedEnumeration method;\u000a  [SameObject] readonly attribute SVGAnimatedEnumeration spacing;\u000a};\u000a\u000aSVGTextPathElement implements SVGURIReference;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/specs/animations",timestamp:1512969406399,contents:"interface TimeEvent : Event {\u000a\u000a  readonly attribute AbstractView view;\u000a  readonly attribute long detail;\u000a\u000a  void initTimeEvent(DOMString typeArg, AbstractView viewArg, long detailArg);\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/specs/animations",timestamp:1512969406399,contents:"interface SVGAnimationElement : SVGElement {\u000a\u000a  readonly attribute SVGElement? targetElement;\u000a\u000a  attribute EventHandler onbegin;\u000a  attribute EventHandler onend;\u000a  attribute EventHandler onrepeat;\u000a\u000a  float getStartTime();\u000a  float getCurrentTime();\u000a  float getSimpleDuration();\u000a\u000a  void beginElement();\u000a  void beginElementAt(float offset);\u000a  void endElement();\u000a  void endElementAt(float offset);\u000a};\u000a\u000aSVGAnimationElement implements SVGTests;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/specs/animations",timestamp:1512969406399,contents:"interface SVGAnimateElement : SVGAnimationElement {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/specs/animations",timestamp:1512969406399,contents:"interface SVGSetElement : SVGAnimationElement {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/specs/animations",timestamp:1512969406399,contents:"interface SVGAnimateMotionElement : SVGAnimationElement {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/specs/animations",timestamp:1512969406399,contents:"interface SVGMPathElement : SVGElement {\u000a};\u000a\u000aSVGMPathElement implements SVGURIReference;"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/specs/animations",timestamp:1512969406399,contents:"interface SVGAnimateTransformElement : SVGAnimationElement {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/specs/animations",timestamp:1512969406399,contents:"interface SVGDiscardElement : SVGAnimationElement {\u000a};"}));
put(foam.json.parse({class:"org.chromium.webidl.IDLSpecFile",url:"https://svgwg.org/specs/animations",timestamp:1512969406399,contents:"partial interface SVGSVGElement {\u000a  void pauseAnimations();\u000a  void unpauseAnimations();\u000a  boolean animationsPaused();\u000a  float getCurrentTime();\u000a  void setCurrentTime(float seconds);\u000a};"}));
